{
    "$defs": {
        "Acquirer10": {
            "additionalProperties": false,
            "properties": {
                "Identification": {
                    "$ref": "#/$defs/GenericIdentification177",
                    "description": "Identification of the acquirer (for example the bank identification number BIN)."
                },
                "ParametersVersion": {
                    "$ref": "#/$defs/Max256Text",
                    "description": "Version of the payment acquirer parameters of the POI."
                }
            },
            "type": "object",
            "description": "Acquirer involved in the card payment."
        },
        "ActionMessage11": {
            "additionalProperties": false,
            "properties": {
                "Format": {
                    "$ref": "#/$defs/OutputFormat3Code",
                    "description": "Message format."
                },
                "InformationQualifier": {
                    "$ref": "#/$defs/InformationQualify1Code",
                    "description": "Qualification of the information to sent to an output logical device."
                },
                "MinimumDisplayTime": {
                    "$ref": "#/$defs/Number",
                    "description": "Number of seconds the message has to be displayed."
                },
                "MessageContent": {
                    "$ref": "#/$defs/Max20000Text",
                    "description": "Content or reference of the message."
                },
                "MessageContentSignature": {
                    "$ref": "#/$defs/ContentInformationType38",
                    "description": "Digital signature of the message."
                },
                "MessageDestination": {
                    "$ref": "#/$defs/UserInterface4Code",
                    "description": "Destination of the message."
                },
                "OutputBarcode": {
                    "$ref": "#/$defs/OutputBarcode2",
                    "description": "Content of message displayed or printed as Barcode."
                },
                "ResponseRequiredFlag": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Flag to request a message response."
                }
            },
            "required": [
                "MessageDestination"
            ],
            "type": "object",
            "description": "Information to display, print or store."
        },
        "ActiveCurrencyAndAmount": {
            "additionalProperties": false,
            "properties": {
                "$": {
                    "$ref": "#/$defs/ActiveCurrencyAndAmount_SimpleType"
                },
                "@Ccy": {
                    "$ref": "#/$defs/ActiveCurrencyCode"
                }
            },
            "required": [
                "@Ccy"
            ],
            "type": [
                "object",
                "string",
                "number",
                "boolean"
            ],
            "description": "A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217."
        },
        "ActiveCurrencyAndAmount_SimpleType": {
            "minimum": 0,
            "type": "number"
        },
        "ActiveCurrencyCode": {
            "pattern": "^([A-Z]{3,3})$",
            "type": "string",
            "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\"."
        },
        "AddressType2Code": {
            "enum": [
                "ADDR",
                "PBOX",
                "HOME",
                "BIZZ",
                "MLTO",
                "DLVY"
            ],
            "type": "string",
            "description": "Specifies the type of address. \nCode: HOME: \t Residential: \tDefinition: Address is the home address. \nCode: BIZZ: \t Business: \tDefinition: Address is the business address. \nCode: ADDR: \t Postal: \tDefinition: Address is the complete postal address. \nCode: PBOX: \t POBox: \tDefinition: Address is a postal office (PO) box. \nCode: MLTO: \t MailTo: \tDefinition: Address is the address to which mail is sent. \nCode: DLVY: \t DeliveryTo: \tDefinition: Address is the address to which delivery is to take place."
        },
        "AddressVerification1": {
            "additionalProperties": false,
            "properties": {
                "AddressDigits": {
                    "$ref": "#/$defs/Max5NumericText",
                    "description": "Numeric characters from the cardholder's address excluding the postal code (that is street number)."
                },
                "PostalCodeDigits": {
                    "$ref": "#/$defs/Max5NumericText",
                    "description": "Numeric characters from the cardholder's postal code."
                }
            },
            "type": "object",
            "description": "Numeric characters of the cardholder's address for verification."
        },
        "AggregationTransaction3": {
            "additionalProperties": false,
            "properties": {
                "FirstPaymentDateTime": {
                    "$ref": "#/$defs/ISODateTime",
                    "description": "Date and time of the first payment."
                },
                "IndividualPayment": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DetailedAmount21"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/DetailedAmount21"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Individual payment that has been aggregated."
                },
                "LastPaymentDateTime": {
                    "$ref": "#/$defs/ISODateTime",
                    "description": "Date and time of the last payment."
                },
                "NumberOfPayments": {
                    "$ref": "#/$defs/Number",
                    "description": "Total number of payments that has been aggregated."
                }
            },
            "type": "object",
            "description": "Payment transaction with an aggregated amount."
        },
        "Algorithm26Code": {
            "enum": [
                "HS25",
                "HS38",
                "HS51",
                "HS01",
                "SH31",
                "SH32",
                "SH33",
                "SH35",
                "SHK1",
                "SHK2",
                "SMS3"
            ],
            "type": "string",
            "description": "Identification of a digest algorithm. \nCode: MACC: \t RetailCBCMAC: \tDefinition: Retail CBC (Chaining Block Cypher) MAC (Message Authentication Code) (cf. ISO 9807, ANSI X9.19) - (ASN.1 Object Identifier: id-retail-cbc-mac). \nCode: MCCS: \t RetailSHA256MAC: \tDefinition: Retail-CBC-MAC with SHA-256 (Secure HAsh standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-256). \nCode: UKPT: \t UKPT: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption - (ASN.1 Object Identifier: id-ukpt-wrap). \nCode: DKPT: \t DUKPT: \tDefinition: DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2004, Annex A, and ISO/DIS 13492-2006. - (ASN.1 Object Identifier: id-dukpt-wrap). \nCode: E3DC: \t DES112CBC: \tDefinition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with double length key (112 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc). \nCode: HS25: \t SHA256: \tDefinition: Message digest algorithm SHA-256 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha256). \nCode: ERS2: \t SHA256WithRSA: \tDefinition: Signature algorithms with RSA, using SHA-256 digest algorithm - (ASN.1 Object Identifier: sha256WithRSAEncryption). \nCode: ERSA: \t RSAEncryption: \tDefinition: RSA encryption algorithm - (ASN.1 Object Identifier: rsaEncryption). \nCode: EA2C: \t AES128CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: DKP9: \t DUKPT2009: \tDefinition: DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2009 Annex A. \nCode: UKA1: \t UKPTwithAES128: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CMA1: \t SHA256CMACwithAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: CMD1: \t SHA256CMACwithDES112: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Triple DES with a double length key (112 Bit) as defined in FIPS PUB 46-3. The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: HS38: \t SHA384: \tDefinition: Message digest algorithm SHA-384 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha384). \nCode: HS51: \t SHA512: \tDefinition: Message digest algorithm SHA-512 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha512). \nCode: RSAO: \t RSAES-OAEP: \tDefinition: RSA encryption scheme based on Optimal Asymmetric Encryption scheme (PKCS #1 version 2.1) - (ASN.1 Object Identifier: id-RSAES-OAEP). \nCode: MGF1: \t MGF1: \tDefinition: Generator Function, used for RSA encryption and RSA igital signature (PKCS #1 version 2.1) - (ASN.1 Object Identifier: id-mgf1). \nCode: HS01: \t SHA1: \tDefinition: The DEPRECATED Message digest algorithm SHA-1 as defined in FIPS 180-1 - (ASN.1 Object Identifier: id-sha1). \nCode: MCC1: \t RetailSHA1MAC: \tDefinition: The DEPRECATED Retail-CBC-MAC with SHA-1 (Secure Hash standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-1). \nCode: CMA9: \t SHA384CMACwithAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-384 digest of the message. \nCode: CMA5: \t SHA512CMACwithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-512 digest of the message. \nCode: EA5C: \t AES256CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard). \nCode: EA9C: \t AES192CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard). \nCode: ERS1: \t SHA1WithRSA: \tDefinition: The DEPRECATED Signature algorithms with RSA (PKCS #1 version 2.1), using SHA-1 digest algorithm - (ASN.1 Object Identifier: sha1WithRSAEncryption). \nCode: RPSS: \t RSASSA-PSS: \tDefinition: Signature algorithm with Appendix, Probabilistic Signature Scheme (PKCS #1 version 2.1), - (ASN.1 Object Identifier: id-RSASSA-PSS). \nCode: ECC1: \t EllipticCryptographicCurveFirstAlgorithm: \tDefinition: First Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC2: \t EllipticCryptographicCurveSecondAlgorithm: \tDefinition: Second Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC3: \t EllipticCryptographicCurveThirdAlgorithm: \tDefinition: Third Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC4: \t EllipticCryptographicCurveFourthAlgorithm: \tDefinition: Fourth Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC5: \t EllipticCryptographicCurveFifthAlgortihm: \tDefinition: Fifth Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: SH31: \t SHA3-224: \tDefinition: Message digest algorithm SHA3-224 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-224). \nCode: SH32: \t SHA3-256: \tDefinition: Message digest algorithm SHA3-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-256). \nCode: SH33: \t SHA3-384: \tDefinition: Message digest algorithm SHA3-384 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-384). \nCode: SH35: \t SHA3-512: \tDefinition: Message digest algorithm SHA3-512 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-512). \nCode: SHK1: \t SHAKE128: \tDefinition: Message digest algorithm SHAKE-128 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake128). \nCode: SHK2: \t SHAKE256: \tDefinition: Message digest algorithm SHAKE-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake256). \nCode: CMA2: \t SHA256CMACWithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: CM31: \t SHA3-256CMACWithAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-256 digest of the message. \nCode: CM32: \t SHA3-384CMACWithAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-384 digest of the message. \nCode: CM33: \t SHA3-512CMACWithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-512 digest of the message. \nCode: ERS3: \t SHA3-256WithRSA: \tDefinition: Signature algorithms with RSA, using SHA3-256 digest algorithm. (ASN.1 Object Identifier: id-rsassa-pkcs1-v1-5-with-sha3-256). \nCode: MCS3: \t SHA3-256-3DESMAC: \tDefinition: 3DES CBC-MAC with SHA3-256 (SecureHAsh standard) and ISO/IEC9797-1 method 2 padding. \nCode: DA12: \t AESDUKPT128ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A, With key length of 128 bits. \nCode: DA25: \t AESDUKPT256ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 256 bits. \nCode: DA19: \t AESDUKPT192ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 192 bits. \nCode: N108: \t Nist800-108KeyDerivation: \tDefinition: Key Derivation according to the Special Publication from the NIST entitled 800-108. \nCode: EA2R: \t AES128CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: EA9R: \t AES192CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: EA5R: \t AES256CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: ECP2: \t SignatureWithEllipticCurveP-256: \tDefinition: Elliptic Curve Signature with the Curve P-256 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: ECP3: \t SignatureWithEllipticCurveP-384: \tDefinition: Elliptic Curve Signature with the Curve P-384 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: ECP5: \t SignatureWithEllipticCurveP-512: \tDefinition: Elliptic Curve Signature with the Curve P-512 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: E3DR: \t DES112CTR: \tDefinition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with double length key (112 Bit) as defined in FIPS SP 800-38a. \nCode: E36C: \t DES168CBC: \tDefinition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with triple length key (168 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc). \nCode: E36R: \t DES168CTR: \tDefinition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with triple length key (168 Bit) as defined in FIPS SP 800-38a. \nCode: SD5C: \t SDE056CBC: \tDefinition: The DEPRECATED Simple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with simple length key (56 Bit) as defined in FIPS PUB 81 - (ASN.1 Object Identifier: des-cbc). \nCode: CCA1: \t CMACAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CCA2: \t CMACAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CCA3: \t CMACAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: MC3S: \t RetailSHA3-256MAC: \tDefinition: Reatil SHA3 256 length MAC \nCode: DAES: \t AESDUKPT: \tDefinition: AES with DUKPT \nCode: SDES: \t DES56CBC: \tDefinition: Single DES CBC mode \nCode: UKA2: \t UKPTwithAES192: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: UKA3: \t UKPTwithAES256: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: ES23: \t EcsdsaSha384: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: ES22: \t EcsdsaSha256: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: ES25: \t EcsdsaSha512: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ES32: \t EcsdaSha3-256: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: ES33: \t EcsdsaSha3-384: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: ES35: \t EcsdsaSha3-512: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ED35: \t EcdsaSha3-512: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ED22: \t EcdsaSha256: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: ED32: \t EcdsaSha3-256: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: ED33: \t EcdsaSha3-384: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: ED23: \t EcdsaSha384: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: ED25: \t EcdsaSha512: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: SMS3: \t SM3: \tDefinition: ShangMi 3 hash function as defined by ISO/IEC 10118-3:2018. \nCode: S34C: \t SM3SM4CBC: \tDefinition: ShangMi 4 enciphering method used in CBC mode coupled with ShangMi 3 hash function. \nCode: S34R: \t SM3SM4CTR: \tDefinition: ShangMi 4 enciphering method used in CTR mode coupled with ShangMi 3 hash function. \nCode: SM4C: \t SM4CBC: \tDefinition: ShangMi 4 enciphering method used in CBC mode. \nCode: SM4R: \t SM4CTR: \tDefinition: ShangMi 4 enciphering method used in CTR mode. \nCode: EO22: \t EcosdsaSha256: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: EO32: \t EcosdaSha3-256: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: EO33: \t EcosdsaSha3-384: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: EO35: \t EcosdsaSha3-512: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: EO23: \t EcosdsaSha384: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: EO25: \t EcosdsaSha512: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: EF22: \t EcfsdsaSha256: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: EF32: \t EcfsdaSha3-256: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: EF33: \t EcfsdsaSha3-384: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: EF35: \t EcfsdsaSha3-512: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: EF23: \t EcfsdsaSha384: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: EF25: \t EcfsdsaSha512: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: DD22: \t EddsaSha256: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: DD32: \t EddsaSha3-256: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: DD33: \t EddsaSha3-384: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: DD35: \t EddsaSha3-512: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: DD23: \t EddsaSha384: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: DD25: \t EddsaSha512: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: SM22: \t SM2Sha256: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: SM32: \t SM2Sha3-256: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: SM33: \t SM2Sha3-384: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: SM35: \t SM2Sha3-512: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: SM23: \t SM2Sha384: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: SM25: \t SM2Sha512: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: S2S3: \t SM2SM3: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with ShangMi3 Digest Algorithm."
        },
        "Algorithm27Code": {
            "enum": [
                "MACC",
                "MCCS",
                "CMA1",
                "MCC1",
                "CMA9",
                "CMA5",
                "CMA2",
                "CM31",
                "CM32",
                "CM33",
                "MCS3",
                "CCA1",
                "CCA2",
                "CCA3",
                "S34C",
                "S34R"
            ],
            "type": "string",
            "description": "Cryptographic algorithms for the MAC (Message Authentication Code). \nCode: MACC: \t RetailCBCMAC: \tDefinition: Retail CBC (Chaining Block Cypher) MAC (Message Authentication Code) (cf. ISO 9807, ANSI X9.19) - (ASN.1 Object Identifier: id-retail-cbc-mac). \nCode: MCCS: \t RetailSHA256MAC: \tDefinition: Retail-CBC-MAC with SHA-256 (Secure HAsh standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-256). \nCode: UKPT: \t UKPT: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption - (ASN.1 Object Identifier: id-ukpt-wrap). \nCode: DKPT: \t DUKPT: \tDefinition: DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2004, Annex A, and ISO/DIS 13492-2006. - (ASN.1 Object Identifier: id-dukpt-wrap). \nCode: E3DC: \t DES112CBC: \tDefinition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with double length key (112 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc). \nCode: HS25: \t SHA256: \tDefinition: Message digest algorithm SHA-256 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha256). \nCode: ERS2: \t SHA256WithRSA: \tDefinition: Signature algorithms with RSA, using SHA-256 digest algorithm - (ASN.1 Object Identifier: sha256WithRSAEncryption). \nCode: ERSA: \t RSAEncryption: \tDefinition: RSA encryption algorithm - (ASN.1 Object Identifier: rsaEncryption). \nCode: EA2C: \t AES128CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: DKP9: \t DUKPT2009: \tDefinition: DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2009 Annex A. \nCode: UKA1: \t UKPTwithAES128: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CMA1: \t SHA256CMACwithAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: CMD1: \t SHA256CMACwithDES112: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Triple DES with a double length key (112 Bit) as defined in FIPS PUB 46-3. The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: HS38: \t SHA384: \tDefinition: Message digest algorithm SHA-384 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha384). \nCode: HS51: \t SHA512: \tDefinition: Message digest algorithm SHA-512 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha512). \nCode: RSAO: \t RSAES-OAEP: \tDefinition: RSA encryption scheme based on Optimal Asymmetric Encryption scheme (PKCS #1 version 2.1) - (ASN.1 Object Identifier: id-RSAES-OAEP). \nCode: MGF1: \t MGF1: \tDefinition: Generator Function, used for RSA encryption and RSA igital signature (PKCS #1 version 2.1) - (ASN.1 Object Identifier: id-mgf1). \nCode: HS01: \t SHA1: \tDefinition: The DEPRECATED Message digest algorithm SHA-1 as defined in FIPS 180-1 - (ASN.1 Object Identifier: id-sha1). \nCode: MCC1: \t RetailSHA1MAC: \tDefinition: The DEPRECATED Retail-CBC-MAC with SHA-1 (Secure Hash standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-1). \nCode: CMA9: \t SHA384CMACwithAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-384 digest of the message. \nCode: CMA5: \t SHA512CMACwithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-512 digest of the message. \nCode: EA5C: \t AES256CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard). \nCode: EA9C: \t AES192CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard). \nCode: ERS1: \t SHA1WithRSA: \tDefinition: The DEPRECATED Signature algorithms with RSA (PKCS #1 version 2.1), using SHA-1 digest algorithm - (ASN.1 Object Identifier: sha1WithRSAEncryption). \nCode: RPSS: \t RSASSA-PSS: \tDefinition: Signature algorithm with Appendix, Probabilistic Signature Scheme (PKCS #1 version 2.1), - (ASN.1 Object Identifier: id-RSASSA-PSS). \nCode: ECC1: \t EllipticCryptographicCurveFirstAlgorithm: \tDefinition: First Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC2: \t EllipticCryptographicCurveSecondAlgorithm: \tDefinition: Second Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC3: \t EllipticCryptographicCurveThirdAlgorithm: \tDefinition: Third Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC4: \t EllipticCryptographicCurveFourthAlgorithm: \tDefinition: Fourth Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC5: \t EllipticCryptographicCurveFifthAlgortihm: \tDefinition: Fifth Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: SH31: \t SHA3-224: \tDefinition: Message digest algorithm SHA3-224 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-224). \nCode: SH32: \t SHA3-256: \tDefinition: Message digest algorithm SHA3-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-256). \nCode: SH33: \t SHA3-384: \tDefinition: Message digest algorithm SHA3-384 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-384). \nCode: SH35: \t SHA3-512: \tDefinition: Message digest algorithm SHA3-512 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-512). \nCode: SHK1: \t SHAKE128: \tDefinition: Message digest algorithm SHAKE-128 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake128). \nCode: SHK2: \t SHAKE256: \tDefinition: Message digest algorithm SHAKE-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake256). \nCode: CMA2: \t SHA256CMACWithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: CM31: \t SHA3-256CMACWithAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-256 digest of the message. \nCode: CM32: \t SHA3-384CMACWithAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-384 digest of the message. \nCode: CM33: \t SHA3-512CMACWithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-512 digest of the message. \nCode: ERS3: \t SHA3-256WithRSA: \tDefinition: Signature algorithms with RSA, using SHA3-256 digest algorithm. (ASN.1 Object Identifier: id-rsassa-pkcs1-v1-5-with-sha3-256). \nCode: MCS3: \t SHA3-256-3DESMAC: \tDefinition: 3DES CBC-MAC with SHA3-256 (SecureHAsh standard) and ISO/IEC9797-1 method 2 padding. \nCode: DA12: \t AESDUKPT128ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A, With key length of 128 bits. \nCode: DA25: \t AESDUKPT256ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 256 bits. \nCode: DA19: \t AESDUKPT192ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 192 bits. \nCode: N108: \t Nist800-108KeyDerivation: \tDefinition: Key Derivation according to the Special Publication from the NIST entitled 800-108. \nCode: EA2R: \t AES128CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: EA9R: \t AES192CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: EA5R: \t AES256CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: ECP2: \t SignatureWithEllipticCurveP-256: \tDefinition: Elliptic Curve Signature with the Curve P-256 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: ECP3: \t SignatureWithEllipticCurveP-384: \tDefinition: Elliptic Curve Signature with the Curve P-384 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: ECP5: \t SignatureWithEllipticCurveP-512: \tDefinition: Elliptic Curve Signature with the Curve P-512 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: E3DR: \t DES112CTR: \tDefinition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with double length key (112 Bit) as defined in FIPS SP 800-38a. \nCode: E36C: \t DES168CBC: \tDefinition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with triple length key (168 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc). \nCode: E36R: \t DES168CTR: \tDefinition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with triple length key (168 Bit) as defined in FIPS SP 800-38a. \nCode: SD5C: \t SDE056CBC: \tDefinition: The DEPRECATED Simple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with simple length key (56 Bit) as defined in FIPS PUB 81 - (ASN.1 Object Identifier: des-cbc). \nCode: CCA1: \t CMACAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CCA2: \t CMACAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CCA3: \t CMACAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: MC3S: \t RetailSHA3-256MAC: \tDefinition: Reatil SHA3 256 length MAC \nCode: DAES: \t AESDUKPT: \tDefinition: AES with DUKPT \nCode: SDES: \t DES56CBC: \tDefinition: Single DES CBC mode \nCode: UKA2: \t UKPTwithAES192: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: UKA3: \t UKPTwithAES256: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: ES23: \t EcsdsaSha384: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: ES22: \t EcsdsaSha256: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: ES25: \t EcsdsaSha512: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ES32: \t EcsdaSha3-256: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: ES33: \t EcsdsaSha3-384: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: ES35: \t EcsdsaSha3-512: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ED35: \t EcdsaSha3-512: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ED22: \t EcdsaSha256: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: ED32: \t EcdsaSha3-256: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: ED33: \t EcdsaSha3-384: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: ED23: \t EcdsaSha384: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: ED25: \t EcdsaSha512: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: SMS3: \t SM3: \tDefinition: ShangMi 3 hash function as defined by ISO/IEC 10118-3:2018. \nCode: S34C: \t SM3SM4CBC: \tDefinition: ShangMi 4 enciphering method used in CBC mode coupled with ShangMi 3 hash function. \nCode: S34R: \t SM3SM4CTR: \tDefinition: ShangMi 4 enciphering method used in CTR mode coupled with ShangMi 3 hash function. \nCode: SM4C: \t SM4CBC: \tDefinition: ShangMi 4 enciphering method used in CBC mode. \nCode: SM4R: \t SM4CTR: \tDefinition: ShangMi 4 enciphering method used in CTR mode. \nCode: EO22: \t EcosdsaSha256: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: EO32: \t EcosdaSha3-256: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: EO33: \t EcosdsaSha3-384: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: EO35: \t EcosdsaSha3-512: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: EO23: \t EcosdsaSha384: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: EO25: \t EcosdsaSha512: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: EF22: \t EcfsdsaSha256: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: EF32: \t EcfsdaSha3-256: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: EF33: \t EcfsdsaSha3-384: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: EF35: \t EcfsdsaSha3-512: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: EF23: \t EcfsdsaSha384: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: EF25: \t EcfsdsaSha512: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: DD22: \t EddsaSha256: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: DD32: \t EddsaSha3-256: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: DD33: \t EddsaSha3-384: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: DD35: \t EddsaSha3-512: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: DD23: \t EddsaSha384: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: DD25: \t EddsaSha512: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: SM22: \t SM2Sha256: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: SM32: \t SM2Sha3-256: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: SM33: \t SM2Sha3-384: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: SM35: \t SM2Sha3-512: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: SM23: \t SM2Sha384: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: SM25: \t SM2Sha512: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: S2S3: \t SM2SM3: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with ShangMi3 Digest Algorithm."
        },
        "Algorithm28Code": {
            "enum": [
                "EA2C",
                "E3DC",
                "DKP9",
                "UKPT",
                "UKA2",
                "EA9C",
                "EA5C",
                "DA12",
                "DA19",
                "DA25",
                "N108",
                "EA5R",
                "EA9R",
                "EA2R",
                "E3DR",
                "E36C",
                "E36R",
                "SD5C",
                "UKA1",
                "UKA3",
                "SM4C",
                "SM4R"
            ],
            "type": "string",
            "description": "Cryptographic algorithms for the protection of transported keys. \nCode: MACC: \t RetailCBCMAC: \tDefinition: Retail CBC (Chaining Block Cypher) MAC (Message Authentication Code) (cf. ISO 9807, ANSI X9.19) - (ASN.1 Object Identifier: id-retail-cbc-mac). \nCode: MCCS: \t RetailSHA256MAC: \tDefinition: Retail-CBC-MAC with SHA-256 (Secure HAsh standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-256). \nCode: UKPT: \t UKPT: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption - (ASN.1 Object Identifier: id-ukpt-wrap). \nCode: DKPT: \t DUKPT: \tDefinition: DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2004, Annex A, and ISO/DIS 13492-2006. - (ASN.1 Object Identifier: id-dukpt-wrap). \nCode: E3DC: \t DES112CBC: \tDefinition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with double length key (112 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc). \nCode: HS25: \t SHA256: \tDefinition: Message digest algorithm SHA-256 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha256). \nCode: ERS2: \t SHA256WithRSA: \tDefinition: Signature algorithms with RSA, using SHA-256 digest algorithm - (ASN.1 Object Identifier: sha256WithRSAEncryption). \nCode: ERSA: \t RSAEncryption: \tDefinition: RSA encryption algorithm - (ASN.1 Object Identifier: rsaEncryption). \nCode: EA2C: \t AES128CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: DKP9: \t DUKPT2009: \tDefinition: DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2009 Annex A. \nCode: UKA1: \t UKPTwithAES128: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CMA1: \t SHA256CMACwithAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: CMD1: \t SHA256CMACwithDES112: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Triple DES with a double length key (112 Bit) as defined in FIPS PUB 46-3. The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: HS38: \t SHA384: \tDefinition: Message digest algorithm SHA-384 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha384). \nCode: HS51: \t SHA512: \tDefinition: Message digest algorithm SHA-512 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha512). \nCode: RSAO: \t RSAES-OAEP: \tDefinition: RSA encryption scheme based on Optimal Asymmetric Encryption scheme (PKCS #1 version 2.1) - (ASN.1 Object Identifier: id-RSAES-OAEP). \nCode: MGF1: \t MGF1: \tDefinition: Generator Function, used for RSA encryption and RSA igital signature (PKCS #1 version 2.1) - (ASN.1 Object Identifier: id-mgf1). \nCode: HS01: \t SHA1: \tDefinition: The DEPRECATED Message digest algorithm SHA-1 as defined in FIPS 180-1 - (ASN.1 Object Identifier: id-sha1). \nCode: MCC1: \t RetailSHA1MAC: \tDefinition: The DEPRECATED Retail-CBC-MAC with SHA-1 (Secure Hash standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-1). \nCode: CMA9: \t SHA384CMACwithAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-384 digest of the message. \nCode: CMA5: \t SHA512CMACwithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-512 digest of the message. \nCode: EA5C: \t AES256CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard). \nCode: EA9C: \t AES192CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard). \nCode: ERS1: \t SHA1WithRSA: \tDefinition: The DEPRECATED Signature algorithms with RSA (PKCS #1 version 2.1), using SHA-1 digest algorithm - (ASN.1 Object Identifier: sha1WithRSAEncryption). \nCode: RPSS: \t RSASSA-PSS: \tDefinition: Signature algorithm with Appendix, Probabilistic Signature Scheme (PKCS #1 version 2.1), - (ASN.1 Object Identifier: id-RSASSA-PSS). \nCode: ECC1: \t EllipticCryptographicCurveFirstAlgorithm: \tDefinition: First Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC2: \t EllipticCryptographicCurveSecondAlgorithm: \tDefinition: Second Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC3: \t EllipticCryptographicCurveThirdAlgorithm: \tDefinition: Third Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC4: \t EllipticCryptographicCurveFourthAlgorithm: \tDefinition: Fourth Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC5: \t EllipticCryptographicCurveFifthAlgortihm: \tDefinition: Fifth Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: SH31: \t SHA3-224: \tDefinition: Message digest algorithm SHA3-224 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-224). \nCode: SH32: \t SHA3-256: \tDefinition: Message digest algorithm SHA3-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-256). \nCode: SH33: \t SHA3-384: \tDefinition: Message digest algorithm SHA3-384 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-384). \nCode: SH35: \t SHA3-512: \tDefinition: Message digest algorithm SHA3-512 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-512). \nCode: SHK1: \t SHAKE128: \tDefinition: Message digest algorithm SHAKE-128 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake128). \nCode: SHK2: \t SHAKE256: \tDefinition: Message digest algorithm SHAKE-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake256). \nCode: CMA2: \t SHA256CMACWithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: CM31: \t SHA3-256CMACWithAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-256 digest of the message. \nCode: CM32: \t SHA3-384CMACWithAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-384 digest of the message. \nCode: CM33: \t SHA3-512CMACWithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-512 digest of the message. \nCode: ERS3: \t SHA3-256WithRSA: \tDefinition: Signature algorithms with RSA, using SHA3-256 digest algorithm. (ASN.1 Object Identifier: id-rsassa-pkcs1-v1-5-with-sha3-256). \nCode: MCS3: \t SHA3-256-3DESMAC: \tDefinition: 3DES CBC-MAC with SHA3-256 (SecureHAsh standard) and ISO/IEC9797-1 method 2 padding. \nCode: DA12: \t AESDUKPT128ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A, With key length of 128 bits. \nCode: DA25: \t AESDUKPT256ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 256 bits. \nCode: DA19: \t AESDUKPT192ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 192 bits. \nCode: N108: \t Nist800-108KeyDerivation: \tDefinition: Key Derivation according to the Special Publication from the NIST entitled 800-108. \nCode: EA2R: \t AES128CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: EA9R: \t AES192CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: EA5R: \t AES256CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: ECP2: \t SignatureWithEllipticCurveP-256: \tDefinition: Elliptic Curve Signature with the Curve P-256 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: ECP3: \t SignatureWithEllipticCurveP-384: \tDefinition: Elliptic Curve Signature with the Curve P-384 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: ECP5: \t SignatureWithEllipticCurveP-512: \tDefinition: Elliptic Curve Signature with the Curve P-512 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: E3DR: \t DES112CTR: \tDefinition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with double length key (112 Bit) as defined in FIPS SP 800-38a. \nCode: E36C: \t DES168CBC: \tDefinition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with triple length key (168 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc). \nCode: E36R: \t DES168CTR: \tDefinition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with triple length key (168 Bit) as defined in FIPS SP 800-38a. \nCode: SD5C: \t SDE056CBC: \tDefinition: The DEPRECATED Simple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with simple length key (56 Bit) as defined in FIPS PUB 81 - (ASN.1 Object Identifier: des-cbc). \nCode: CCA1: \t CMACAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CCA2: \t CMACAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CCA3: \t CMACAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: MC3S: \t RetailSHA3-256MAC: \tDefinition: Reatil SHA3 256 length MAC \nCode: DAES: \t AESDUKPT: \tDefinition: AES with DUKPT \nCode: SDES: \t DES56CBC: \tDefinition: Single DES CBC mode \nCode: UKA2: \t UKPTwithAES192: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: UKA3: \t UKPTwithAES256: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: ES23: \t EcsdsaSha384: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: ES22: \t EcsdsaSha256: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: ES25: \t EcsdsaSha512: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ES32: \t EcsdaSha3-256: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: ES33: \t EcsdsaSha3-384: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: ES35: \t EcsdsaSha3-512: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ED35: \t EcdsaSha3-512: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ED22: \t EcdsaSha256: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: ED32: \t EcdsaSha3-256: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: ED33: \t EcdsaSha3-384: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: ED23: \t EcdsaSha384: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: ED25: \t EcdsaSha512: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: SMS3: \t SM3: \tDefinition: ShangMi 3 hash function as defined by ISO/IEC 10118-3:2018. \nCode: S34C: \t SM3SM4CBC: \tDefinition: ShangMi 4 enciphering method used in CBC mode coupled with ShangMi 3 hash function. \nCode: S34R: \t SM3SM4CTR: \tDefinition: ShangMi 4 enciphering method used in CTR mode coupled with ShangMi 3 hash function. \nCode: SM4C: \t SM4CBC: \tDefinition: ShangMi 4 enciphering method used in CBC mode. \nCode: SM4R: \t SM4CTR: \tDefinition: ShangMi 4 enciphering method used in CTR mode. \nCode: EO22: \t EcosdsaSha256: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: EO32: \t EcosdaSha3-256: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: EO33: \t EcosdsaSha3-384: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: EO35: \t EcosdsaSha3-512: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: EO23: \t EcosdsaSha384: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: EO25: \t EcosdsaSha512: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: EF22: \t EcfsdsaSha256: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: EF32: \t EcfsdaSha3-256: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: EF33: \t EcfsdsaSha3-384: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: EF35: \t EcfsdsaSha3-512: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: EF23: \t EcfsdsaSha384: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: EF25: \t EcfsdsaSha512: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: DD22: \t EddsaSha256: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: DD32: \t EddsaSha3-256: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: DD33: \t EddsaSha3-384: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: DD35: \t EddsaSha3-512: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: DD23: \t EddsaSha384: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: DD25: \t EddsaSha512: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: SM22: \t SM2Sha256: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: SM32: \t SM2Sha3-256: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: SM33: \t SM2Sha3-384: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: SM35: \t SM2Sha3-512: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: SM23: \t SM2Sha384: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: SM25: \t SM2Sha512: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: S2S3: \t SM2SM3: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with ShangMi3 Digest Algorithm."
        },
        "Algorithm29Code": {
            "enum": [
                "ERS2",
                "ERS1",
                "RPSS",
                "ERS3",
                "ED32",
                "ED33",
                "ED35",
                "ED23",
                "ED25",
                "ES22",
                "ES32",
                "ES33",
                "ES35",
                "ES23",
                "ES25",
                "ED22",
                "EF32",
                "EF22",
                "EF33",
                "EF35",
                "EF23",
                "EO33",
                "EF25",
                "EO32",
                "EO22",
                "EO35",
                "EO23",
                "EO25",
                "DD22",
                "DD32",
                "DD33",
                "DD35",
                "DD23",
                "DD25",
                "SM22",
                "SM33",
                "SM32",
                "SM35",
                "SM23",
                "SM25",
                "S2S3"
            ],
            "type": "string",
            "description": "Cryptographic algorithms for digital signatures. \nCode: MACC: \t RetailCBCMAC: \tDefinition: Retail CBC (Chaining Block Cypher) MAC (Message Authentication Code) (cf. ISO 9807, ANSI X9.19) - (ASN.1 Object Identifier: id-retail-cbc-mac). \nCode: MCCS: \t RetailSHA256MAC: \tDefinition: Retail-CBC-MAC with SHA-256 (Secure HAsh standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-256). \nCode: UKPT: \t UKPT: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption - (ASN.1 Object Identifier: id-ukpt-wrap). \nCode: DKPT: \t DUKPT: \tDefinition: DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2004, Annex A, and ISO/DIS 13492-2006. - (ASN.1 Object Identifier: id-dukpt-wrap). \nCode: E3DC: \t DES112CBC: \tDefinition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with double length key (112 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc). \nCode: HS25: \t SHA256: \tDefinition: Message digest algorithm SHA-256 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha256). \nCode: ERS2: \t SHA256WithRSA: \tDefinition: Signature algorithms with RSA, using SHA-256 digest algorithm - (ASN.1 Object Identifier: sha256WithRSAEncryption). \nCode: ERSA: \t RSAEncryption: \tDefinition: RSA encryption algorithm - (ASN.1 Object Identifier: rsaEncryption). \nCode: EA2C: \t AES128CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: DKP9: \t DUKPT2009: \tDefinition: DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2009 Annex A. \nCode: UKA1: \t UKPTwithAES128: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CMA1: \t SHA256CMACwithAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: CMD1: \t SHA256CMACwithDES112: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Triple DES with a double length key (112 Bit) as defined in FIPS PUB 46-3. The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: HS38: \t SHA384: \tDefinition: Message digest algorithm SHA-384 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha384). \nCode: HS51: \t SHA512: \tDefinition: Message digest algorithm SHA-512 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha512). \nCode: RSAO: \t RSAES-OAEP: \tDefinition: RSA encryption scheme based on Optimal Asymmetric Encryption scheme (PKCS #1 version 2.1) - (ASN.1 Object Identifier: id-RSAES-OAEP). \nCode: MGF1: \t MGF1: \tDefinition: Generator Function, used for RSA encryption and RSA igital signature (PKCS #1 version 2.1) - (ASN.1 Object Identifier: id-mgf1). \nCode: HS01: \t SHA1: \tDefinition: The DEPRECATED Message digest algorithm SHA-1 as defined in FIPS 180-1 - (ASN.1 Object Identifier: id-sha1). \nCode: MCC1: \t RetailSHA1MAC: \tDefinition: The DEPRECATED Retail-CBC-MAC with SHA-1 (Secure Hash standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-1). \nCode: CMA9: \t SHA384CMACwithAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-384 digest of the message. \nCode: CMA5: \t SHA512CMACwithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-512 digest of the message. \nCode: EA5C: \t AES256CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard). \nCode: EA9C: \t AES192CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard). \nCode: ERS1: \t SHA1WithRSA: \tDefinition: The DEPRECATED Signature algorithms with RSA (PKCS #1 version 2.1), using SHA-1 digest algorithm - (ASN.1 Object Identifier: sha1WithRSAEncryption). \nCode: RPSS: \t RSASSA-PSS: \tDefinition: Signature algorithm with Appendix, Probabilistic Signature Scheme (PKCS #1 version 2.1), - (ASN.1 Object Identifier: id-RSASSA-PSS). \nCode: ECC1: \t EllipticCryptographicCurveFirstAlgorithm: \tDefinition: First Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC2: \t EllipticCryptographicCurveSecondAlgorithm: \tDefinition: Second Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC3: \t EllipticCryptographicCurveThirdAlgorithm: \tDefinition: Third Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC4: \t EllipticCryptographicCurveFourthAlgorithm: \tDefinition: Fourth Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC5: \t EllipticCryptographicCurveFifthAlgortihm: \tDefinition: Fifth Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: SH31: \t SHA3-224: \tDefinition: Message digest algorithm SHA3-224 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-224). \nCode: SH32: \t SHA3-256: \tDefinition: Message digest algorithm SHA3-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-256). \nCode: SH33: \t SHA3-384: \tDefinition: Message digest algorithm SHA3-384 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-384). \nCode: SH35: \t SHA3-512: \tDefinition: Message digest algorithm SHA3-512 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-512). \nCode: SHK1: \t SHAKE128: \tDefinition: Message digest algorithm SHAKE-128 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake128). \nCode: SHK2: \t SHAKE256: \tDefinition: Message digest algorithm SHAKE-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake256). \nCode: CMA2: \t SHA256CMACWithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: CM31: \t SHA3-256CMACWithAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-256 digest of the message. \nCode: CM32: \t SHA3-384CMACWithAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-384 digest of the message. \nCode: CM33: \t SHA3-512CMACWithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-512 digest of the message. \nCode: ERS3: \t SHA3-256WithRSA: \tDefinition: Signature algorithms with RSA, using SHA3-256 digest algorithm. (ASN.1 Object Identifier: id-rsassa-pkcs1-v1-5-with-sha3-256). \nCode: MCS3: \t SHA3-256-3DESMAC: \tDefinition: 3DES CBC-MAC with SHA3-256 (SecureHAsh standard) and ISO/IEC9797-1 method 2 padding. \nCode: DA12: \t AESDUKPT128ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A, With key length of 128 bits. \nCode: DA25: \t AESDUKPT256ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 256 bits. \nCode: DA19: \t AESDUKPT192ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 192 bits. \nCode: N108: \t Nist800-108KeyDerivation: \tDefinition: Key Derivation according to the Special Publication from the NIST entitled 800-108. \nCode: EA2R: \t AES128CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: EA9R: \t AES192CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: EA5R: \t AES256CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: ECP2: \t SignatureWithEllipticCurveP-256: \tDefinition: Elliptic Curve Signature with the Curve P-256 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: ECP3: \t SignatureWithEllipticCurveP-384: \tDefinition: Elliptic Curve Signature with the Curve P-384 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: ECP5: \t SignatureWithEllipticCurveP-512: \tDefinition: Elliptic Curve Signature with the Curve P-512 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: E3DR: \t DES112CTR: \tDefinition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with double length key (112 Bit) as defined in FIPS SP 800-38a. \nCode: E36C: \t DES168CBC: \tDefinition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with triple length key (168 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc). \nCode: E36R: \t DES168CTR: \tDefinition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with triple length key (168 Bit) as defined in FIPS SP 800-38a. \nCode: SD5C: \t SDE056CBC: \tDefinition: The DEPRECATED Simple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with simple length key (56 Bit) as defined in FIPS PUB 81 - (ASN.1 Object Identifier: des-cbc). \nCode: CCA1: \t CMACAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CCA2: \t CMACAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CCA3: \t CMACAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: MC3S: \t RetailSHA3-256MAC: \tDefinition: Reatil SHA3 256 length MAC \nCode: DAES: \t AESDUKPT: \tDefinition: AES with DUKPT \nCode: SDES: \t DES56CBC: \tDefinition: Single DES CBC mode \nCode: UKA2: \t UKPTwithAES192: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: UKA3: \t UKPTwithAES256: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: ES23: \t EcsdsaSha384: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: ES22: \t EcsdsaSha256: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: ES25: \t EcsdsaSha512: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ES32: \t EcsdaSha3-256: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: ES33: \t EcsdsaSha3-384: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: ES35: \t EcsdsaSha3-512: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ED35: \t EcdsaSha3-512: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ED22: \t EcdsaSha256: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: ED32: \t EcdsaSha3-256: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: ED33: \t EcdsaSha3-384: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: ED23: \t EcdsaSha384: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: ED25: \t EcdsaSha512: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: SMS3: \t SM3: \tDefinition: ShangMi 3 hash function as defined by ISO/IEC 10118-3:2018. \nCode: S34C: \t SM3SM4CBC: \tDefinition: ShangMi 4 enciphering method used in CBC mode coupled with ShangMi 3 hash function. \nCode: S34R: \t SM3SM4CTR: \tDefinition: ShangMi 4 enciphering method used in CTR mode coupled with ShangMi 3 hash function. \nCode: SM4C: \t SM4CBC: \tDefinition: ShangMi 4 enciphering method used in CBC mode. \nCode: SM4R: \t SM4CTR: \tDefinition: ShangMi 4 enciphering method used in CTR mode. \nCode: EO22: \t EcosdsaSha256: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: EO32: \t EcosdaSha3-256: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: EO33: \t EcosdsaSha3-384: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: EO35: \t EcosdsaSha3-512: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: EO23: \t EcosdsaSha384: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: EO25: \t EcosdsaSha512: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: EF22: \t EcfsdsaSha256: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: EF32: \t EcfsdaSha3-256: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: EF33: \t EcfsdsaSha3-384: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: EF35: \t EcfsdsaSha3-512: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: EF23: \t EcfsdsaSha384: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: EF25: \t EcfsdsaSha512: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: DD22: \t EddsaSha256: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: DD32: \t EddsaSha3-256: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: DD33: \t EddsaSha3-384: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: DD35: \t EddsaSha3-512: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: DD23: \t EddsaSha384: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: DD25: \t EddsaSha512: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: SM22: \t SM2Sha256: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: SM32: \t SM2Sha3-256: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: SM33: \t SM2Sha3-384: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: SM35: \t SM2Sha3-512: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: SM23: \t SM2Sha384: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: SM25: \t SM2Sha512: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: S2S3: \t SM2SM3: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with ShangMi3 Digest Algorithm."
        },
        "Algorithm7Code": {
            "enum": [
                "ERSA",
                "RSAO"
            ],
            "type": "string",
            "description": "Asymmetric encryption algorithm of a transport key. \nCode: MACC: \t RetailCBCMAC: \tDefinition: Retail CBC (Chaining Block Cypher) MAC (Message Authentication Code) (cf. ISO 9807, ANSI X9.19) - (ASN.1 Object Identifier: id-retail-cbc-mac). \nCode: MCCS: \t RetailSHA256MAC: \tDefinition: Retail-CBC-MAC with SHA-256 (Secure HAsh standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-256). \nCode: UKPT: \t UKPT: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption - (ASN.1 Object Identifier: id-ukpt-wrap). \nCode: DKPT: \t DUKPT: \tDefinition: DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2004, Annex A, and ISO/DIS 13492-2006. - (ASN.1 Object Identifier: id-dukpt-wrap). \nCode: E3DC: \t DES112CBC: \tDefinition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with double length key (112 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc). \nCode: HS25: \t SHA256: \tDefinition: Message digest algorithm SHA-256 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha256). \nCode: ERS2: \t SHA256WithRSA: \tDefinition: Signature algorithms with RSA, using SHA-256 digest algorithm - (ASN.1 Object Identifier: sha256WithRSAEncryption). \nCode: ERSA: \t RSAEncryption: \tDefinition: RSA encryption algorithm - (ASN.1 Object Identifier: rsaEncryption). \nCode: EA2C: \t AES128CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: DKP9: \t DUKPT2009: \tDefinition: DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2009 Annex A. \nCode: UKA1: \t UKPTwithAES128: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CMA1: \t SHA256CMACwithAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: CMD1: \t SHA256CMACwithDES112: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Triple DES with a double length key (112 Bit) as defined in FIPS PUB 46-3. The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: HS38: \t SHA384: \tDefinition: Message digest algorithm SHA-384 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha384). \nCode: HS51: \t SHA512: \tDefinition: Message digest algorithm SHA-512 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha512). \nCode: RSAO: \t RSAES-OAEP: \tDefinition: RSA encryption scheme based on Optimal Asymmetric Encryption scheme (PKCS #1 version 2.1) - (ASN.1 Object Identifier: id-RSAES-OAEP). \nCode: MGF1: \t MGF1: \tDefinition: Generator Function, used for RSA encryption and RSA igital signature (PKCS #1 version 2.1) - (ASN.1 Object Identifier: id-mgf1). \nCode: HS01: \t SHA1: \tDefinition: The DEPRECATED Message digest algorithm SHA-1 as defined in FIPS 180-1 - (ASN.1 Object Identifier: id-sha1). \nCode: MCC1: \t RetailSHA1MAC: \tDefinition: The DEPRECATED Retail-CBC-MAC with SHA-1 (Secure Hash standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-1). \nCode: CMA9: \t SHA384CMACwithAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-384 digest of the message. \nCode: CMA5: \t SHA512CMACwithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-512 digest of the message. \nCode: EA5C: \t AES256CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard). \nCode: EA9C: \t AES192CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard). \nCode: ERS1: \t SHA1WithRSA: \tDefinition: The DEPRECATED Signature algorithms with RSA (PKCS #1 version 2.1), using SHA-1 digest algorithm - (ASN.1 Object Identifier: sha1WithRSAEncryption). \nCode: RPSS: \t RSASSA-PSS: \tDefinition: Signature algorithm with Appendix, Probabilistic Signature Scheme (PKCS #1 version 2.1), - (ASN.1 Object Identifier: id-RSASSA-PSS). \nCode: ECC1: \t EllipticCryptographicCurveFirstAlgorithm: \tDefinition: First Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC2: \t EllipticCryptographicCurveSecondAlgorithm: \tDefinition: Second Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC3: \t EllipticCryptographicCurveThirdAlgorithm: \tDefinition: Third Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC4: \t EllipticCryptographicCurveFourthAlgorithm: \tDefinition: Fourth Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC5: \t EllipticCryptographicCurveFifthAlgortihm: \tDefinition: Fifth Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: SH31: \t SHA3-224: \tDefinition: Message digest algorithm SHA3-224 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-224). \nCode: SH32: \t SHA3-256: \tDefinition: Message digest algorithm SHA3-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-256). \nCode: SH33: \t SHA3-384: \tDefinition: Message digest algorithm SHA3-384 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-384). \nCode: SH35: \t SHA3-512: \tDefinition: Message digest algorithm SHA3-512 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-512). \nCode: SHK1: \t SHAKE128: \tDefinition: Message digest algorithm SHAKE-128 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake128). \nCode: SHK2: \t SHAKE256: \tDefinition: Message digest algorithm SHAKE-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake256). \nCode: CMA2: \t SHA256CMACWithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: CM31: \t SHA3-256CMACWithAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-256 digest of the message. \nCode: CM32: \t SHA3-384CMACWithAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-384 digest of the message. \nCode: CM33: \t SHA3-512CMACWithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-512 digest of the message. \nCode: ERS3: \t SHA3-256WithRSA: \tDefinition: Signature algorithms with RSA, using SHA3-256 digest algorithm. (ASN.1 Object Identifier: id-rsassa-pkcs1-v1-5-with-sha3-256). \nCode: MCS3: \t SHA3-256-3DESMAC: \tDefinition: 3DES CBC-MAC with SHA3-256 (SecureHAsh standard) and ISO/IEC9797-1 method 2 padding. \nCode: DA12: \t AESDUKPT128ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A, With key length of 128 bits. \nCode: DA25: \t AESDUKPT256ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 256 bits. \nCode: DA19: \t AESDUKPT192ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 192 bits. \nCode: N108: \t Nist800-108KeyDerivation: \tDefinition: Key Derivation according to the Special Publication from the NIST entitled 800-108. \nCode: EA2R: \t AES128CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: EA9R: \t AES192CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: EA5R: \t AES256CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: ECP2: \t SignatureWithEllipticCurveP-256: \tDefinition: Elliptic Curve Signature with the Curve P-256 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: ECP3: \t SignatureWithEllipticCurveP-384: \tDefinition: Elliptic Curve Signature with the Curve P-384 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: ECP5: \t SignatureWithEllipticCurveP-512: \tDefinition: Elliptic Curve Signature with the Curve P-512 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: E3DR: \t DES112CTR: \tDefinition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with double length key (112 Bit) as defined in FIPS SP 800-38a. \nCode: E36C: \t DES168CBC: \tDefinition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with triple length key (168 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc). \nCode: E36R: \t DES168CTR: \tDefinition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with triple length key (168 Bit) as defined in FIPS SP 800-38a. \nCode: SD5C: \t SDE056CBC: \tDefinition: The DEPRECATED Simple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with simple length key (56 Bit) as defined in FIPS PUB 81 - (ASN.1 Object Identifier: des-cbc). \nCode: CCA1: \t CMACAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CCA2: \t CMACAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CCA3: \t CMACAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: MC3S: \t RetailSHA3-256MAC: \tDefinition: Reatil SHA3 256 length MAC \nCode: DAES: \t AESDUKPT: \tDefinition: AES with DUKPT \nCode: SDES: \t DES56CBC: \tDefinition: Single DES CBC mode \nCode: UKA2: \t UKPTwithAES192: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: UKA3: \t UKPTwithAES256: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: ES23: \t EcsdsaSha384: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: ES22: \t EcsdsaSha256: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: ES25: \t EcsdsaSha512: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ES32: \t EcsdaSha3-256: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: ES33: \t EcsdsaSha3-384: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: ES35: \t EcsdsaSha3-512: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ED35: \t EcdsaSha3-512: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ED22: \t EcdsaSha256: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: ED32: \t EcdsaSha3-256: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: ED33: \t EcdsaSha3-384: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: ED23: \t EcdsaSha384: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: ED25: \t EcdsaSha512: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: SMS3: \t SM3: \tDefinition: ShangMi 3 hash function as defined by ISO/IEC 10118-3:2018. \nCode: S34C: \t SM3SM4CBC: \tDefinition: ShangMi 4 enciphering method used in CBC mode coupled with ShangMi 3 hash function. \nCode: S34R: \t SM3SM4CTR: \tDefinition: ShangMi 4 enciphering method used in CTR mode coupled with ShangMi 3 hash function. \nCode: SM4C: \t SM4CBC: \tDefinition: ShangMi 4 enciphering method used in CBC mode. \nCode: SM4R: \t SM4CTR: \tDefinition: ShangMi 4 enciphering method used in CTR mode. \nCode: EO22: \t EcosdsaSha256: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: EO32: \t EcosdaSha3-256: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: EO33: \t EcosdsaSha3-384: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: EO35: \t EcosdsaSha3-512: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: EO23: \t EcosdsaSha384: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: EO25: \t EcosdsaSha512: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: EF22: \t EcfsdsaSha256: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: EF32: \t EcfsdaSha3-256: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: EF33: \t EcfsdsaSha3-384: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: EF35: \t EcfsdsaSha3-512: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: EF23: \t EcfsdsaSha384: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: EF25: \t EcfsdsaSha512: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: DD22: \t EddsaSha256: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: DD32: \t EddsaSha3-256: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: DD33: \t EddsaSha3-384: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: DD35: \t EddsaSha3-512: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: DD23: \t EddsaSha384: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: DD25: \t EddsaSha512: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: SM22: \t SM2Sha256: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: SM32: \t SM2Sha3-256: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: SM33: \t SM2Sha3-384: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: SM35: \t SM2Sha3-512: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: SM23: \t SM2Sha384: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: SM25: \t SM2Sha512: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: S2S3: \t SM2SM3: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with ShangMi3 Digest Algorithm."
        },
        "Algorithm8Code": {
            "enum": [
                "MGF1"
            ],
            "type": "string",
            "description": "Mask generator functions of the RSAES-OAEP encryption algorithm (RSA Encryption Scheme: Optimal Asymmetric Encryption Padding). \nCode: MACC: \t RetailCBCMAC: \tDefinition: Retail CBC (Chaining Block Cypher) MAC (Message Authentication Code) (cf. ISO 9807, ANSI X9.19) - (ASN.1 Object Identifier: id-retail-cbc-mac). \nCode: MCCS: \t RetailSHA256MAC: \tDefinition: Retail-CBC-MAC with SHA-256 (Secure HAsh standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-256). \nCode: UKPT: \t UKPT: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption - (ASN.1 Object Identifier: id-ukpt-wrap). \nCode: DKPT: \t DUKPT: \tDefinition: DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2004, Annex A, and ISO/DIS 13492-2006. - (ASN.1 Object Identifier: id-dukpt-wrap). \nCode: E3DC: \t DES112CBC: \tDefinition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with double length key (112 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc). \nCode: HS25: \t SHA256: \tDefinition: Message digest algorithm SHA-256 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha256). \nCode: ERS2: \t SHA256WithRSA: \tDefinition: Signature algorithms with RSA, using SHA-256 digest algorithm - (ASN.1 Object Identifier: sha256WithRSAEncryption). \nCode: ERSA: \t RSAEncryption: \tDefinition: RSA encryption algorithm - (ASN.1 Object Identifier: rsaEncryption). \nCode: EA2C: \t AES128CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: DKP9: \t DUKPT2009: \tDefinition: DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2009 Annex A. \nCode: UKA1: \t UKPTwithAES128: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CMA1: \t SHA256CMACwithAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: CMD1: \t SHA256CMACwithDES112: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Triple DES with a double length key (112 Bit) as defined in FIPS PUB 46-3. The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: HS38: \t SHA384: \tDefinition: Message digest algorithm SHA-384 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha384). \nCode: HS51: \t SHA512: \tDefinition: Message digest algorithm SHA-512 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha512). \nCode: RSAO: \t RSAES-OAEP: \tDefinition: RSA encryption scheme based on Optimal Asymmetric Encryption scheme (PKCS #1 version 2.1) - (ASN.1 Object Identifier: id-RSAES-OAEP). \nCode: MGF1: \t MGF1: \tDefinition: Generator Function, used for RSA encryption and RSA igital signature (PKCS #1 version 2.1) - (ASN.1 Object Identifier: id-mgf1). \nCode: HS01: \t SHA1: \tDefinition: The DEPRECATED Message digest algorithm SHA-1 as defined in FIPS 180-1 - (ASN.1 Object Identifier: id-sha1). \nCode: MCC1: \t RetailSHA1MAC: \tDefinition: The DEPRECATED Retail-CBC-MAC with SHA-1 (Secure Hash standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-1). \nCode: CMA9: \t SHA384CMACwithAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-384 digest of the message. \nCode: CMA5: \t SHA512CMACwithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-512 digest of the message. \nCode: EA5C: \t AES256CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard). \nCode: EA9C: \t AES192CBC: \tDefinition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard). \nCode: ERS1: \t SHA1WithRSA: \tDefinition: The DEPRECATED Signature algorithms with RSA (PKCS #1 version 2.1), using SHA-1 digest algorithm - (ASN.1 Object Identifier: sha1WithRSAEncryption). \nCode: RPSS: \t RSASSA-PSS: \tDefinition: Signature algorithm with Appendix, Probabilistic Signature Scheme (PKCS #1 version 2.1), - (ASN.1 Object Identifier: id-RSASSA-PSS). \nCode: ECC1: \t EllipticCryptographicCurveFirstAlgorithm: \tDefinition: First Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC2: \t EllipticCryptographicCurveSecondAlgorithm: \tDefinition: Second Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC3: \t EllipticCryptographicCurveThirdAlgorithm: \tDefinition: Third Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC4: \t EllipticCryptographicCurveFourthAlgorithm: \tDefinition: Fourth Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: ECC5: \t EllipticCryptographicCurveFifthAlgortihm: \tDefinition: Fifth Elliptic Cryptographic Curve Algorithm identified by EMVCo Nextgen. \nCode: SH31: \t SHA3-224: \tDefinition: Message digest algorithm SHA3-224 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-224). \nCode: SH32: \t SHA3-256: \tDefinition: Message digest algorithm SHA3-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-256). \nCode: SH33: \t SHA3-384: \tDefinition: Message digest algorithm SHA3-384 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-384). \nCode: SH35: \t SHA3-512: \tDefinition: Message digest algorithm SHA3-512 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-512). \nCode: SHK1: \t SHAKE128: \tDefinition: Message digest algorithm SHAKE-128 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake128). \nCode: SHK2: \t SHAKE256: \tDefinition: Message digest algorithm SHAKE-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake256). \nCode: CMA2: \t SHA256CMACWithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message. \nCode: CM31: \t SHA3-256CMACWithAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-256 digest of the message. \nCode: CM32: \t SHA3-384CMACWithAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-384 digest of the message. \nCode: CM33: \t SHA3-512CMACWithAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-512 digest of the message. \nCode: ERS3: \t SHA3-256WithRSA: \tDefinition: Signature algorithms with RSA, using SHA3-256 digest algorithm. (ASN.1 Object Identifier: id-rsassa-pkcs1-v1-5-with-sha3-256). \nCode: MCS3: \t SHA3-256-3DESMAC: \tDefinition: 3DES CBC-MAC with SHA3-256 (SecureHAsh standard) and ISO/IEC9797-1 method 2 padding. \nCode: DA12: \t AESDUKPT128ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A, With key length of 128 bits. \nCode: DA25: \t AESDUKPT256ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 256 bits. \nCode: DA19: \t AESDUKPT192ECB: \tDefinition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 192 bits. \nCode: N108: \t Nist800-108KeyDerivation: \tDefinition: Key Derivation according to the Special Publication from the NIST entitled 800-108. \nCode: EA2R: \t AES128CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: EA9R: \t AES192CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: EA5R: \t AES256CTR: \tDefinition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: ECP2: \t SignatureWithEllipticCurveP-256: \tDefinition: Elliptic Curve Signature with the Curve P-256 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: ECP3: \t SignatureWithEllipticCurveP-384: \tDefinition: Elliptic Curve Signature with the Curve P-384 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: ECP5: \t SignatureWithEllipticCurveP-512: \tDefinition: Elliptic Curve Signature with the Curve P-512 as defined by the Federal Information Processing Standards (FIPS 186-4 - July, 2013 - Digital Signature Standard). \nCode: E3DR: \t DES112CTR: \tDefinition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with double length key (112 Bit) as defined in FIPS SP 800-38a. \nCode: E36C: \t DES168CBC: \tDefinition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with triple length key (168 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc). \nCode: E36R: \t DES168CTR: \tDefinition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with triple length key (168 Bit) as defined in FIPS SP 800-38a. \nCode: SD5C: \t SDE056CBC: \tDefinition: The DEPRECATED Simple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with simple length key (56 Bit) as defined in FIPS PUB 81 - (ASN.1 Object Identifier: des-cbc). \nCode: CCA1: \t CMACAES128: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CCA2: \t CMACAES192: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: CCA3: \t CMACAES256: \tDefinition: CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: MC3S: \t RetailSHA3-256MAC: \tDefinition: Reatil SHA3 256 length MAC \nCode: DAES: \t AESDUKPT: \tDefinition: AES with DUKPT \nCode: SDES: \t DES56CBC: \tDefinition: Single DES CBC mode \nCode: UKA2: \t UKPTwithAES192: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: UKA3: \t UKPTwithAES256: \tDefinition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: ES23: \t EcsdsaSha384: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: ES22: \t EcsdsaSha256: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: ES25: \t EcsdsaSha512: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ES32: \t EcsdaSha3-256: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: ES33: \t EcsdsaSha3-384: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: ES35: \t EcsdsaSha3-512: \tDefinition: Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ED35: \t EcdsaSha3-512: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: ED22: \t EcdsaSha256: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: ED32: \t EcdsaSha3-256: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: ED33: \t EcdsaSha3-384: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: ED23: \t EcdsaSha384: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: ED25: \t EcdsaSha512: \tDefinition: Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: SMS3: \t SM3: \tDefinition: ShangMi 3 hash function as defined by ISO/IEC 10118-3:2018. \nCode: S34C: \t SM3SM4CBC: \tDefinition: ShangMi 4 enciphering method used in CBC mode coupled with ShangMi 3 hash function. \nCode: S34R: \t SM3SM4CTR: \tDefinition: ShangMi 4 enciphering method used in CTR mode coupled with ShangMi 3 hash function. \nCode: SM4C: \t SM4CBC: \tDefinition: ShangMi 4 enciphering method used in CBC mode. \nCode: SM4R: \t SM4CTR: \tDefinition: ShangMi 4 enciphering method used in CTR mode. \nCode: EO22: \t EcosdsaSha256: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: EO32: \t EcosdaSha3-256: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: EO33: \t EcosdsaSha3-384: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: EO35: \t EcosdsaSha3-512: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: EO23: \t EcosdsaSha384: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: EO25: \t EcosdsaSha512: \tDefinition: Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: EF22: \t EcfsdsaSha256: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: EF32: \t EcfsdaSha3-256: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: EF33: \t EcfsdsaSha3-384: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: EF35: \t EcfsdsaSha3-512: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: EF23: \t EcfsdsaSha384: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: EF25: \t EcfsdsaSha512: \tDefinition: Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: DD22: \t EddsaSha256: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: DD32: \t EddsaSha3-256: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: DD33: \t EddsaSha3-384: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: DD35: \t EddsaSha3-512: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: DD23: \t EddsaSha384: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: DD25: \t EddsaSha512: \tDefinition: Edward Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: SM22: \t SM2Sha256: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm. \nCode: SM32: \t SM2Sha3-256: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm. \nCode: SM33: \t SM2Sha3-384: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm. \nCode: SM35: \t SM2Sha3-512: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm. \nCode: SM23: \t SM2Sha384: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm. \nCode: SM25: \t SM2Sha512: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm. \nCode: S2S3: \t SM2SM3: \tDefinition: ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with ShangMi3 Digest Algorithm."
        },
        "AlgorithmIdentification31": {
            "additionalProperties": false,
            "properties": {
                "Algorithm": {
                    "$ref": "#/$defs/Algorithm27Code",
                    "description": "Identification of the MAC algorithm."
                },
                "Parameter": {
                    "$ref": "#/$defs/Parameter7",
                    "description": "Parameters associated to the MAC algorithm."
                }
            },
            "required": [
                "Algorithm"
            ],
            "type": "object",
            "description": "Identification of a cryptographic algorithm and parameters for the MAC computation."
        },
        "AlgorithmIdentification32": {
            "additionalProperties": false,
            "properties": {
                "Algorithm": {
                    "$ref": "#/$defs/Algorithm28Code",
                    "description": "Identification of the algorithm."
                },
                "Parameter": {
                    "$ref": "#/$defs/Parameter12",
                    "description": "Parameters associated to the encryption algorithm."
                }
            },
            "required": [
                "Algorithm"
            ],
            "type": "object",
            "description": "Cryptographic algorithm and parameters for the protection of the transported key."
        },
        "AlgorithmIdentification33": {
            "additionalProperties": false,
            "properties": {
                "Algorithm": {
                    "$ref": "#/$defs/Algorithm29Code",
                    "description": "Identification of the algorithm."
                },
                "Parameter": {
                    "$ref": "#/$defs/Parameter16",
                    "description": "Parameters of the RSASSA-PSS digital signature algorithm (RSA signature algorithm with appendix: Probabilistic Signature Scheme)."
                }
            },
            "required": [
                "Algorithm"
            ],
            "type": "object",
            "description": "Identification of a cryptographic algorithm and parameters for digital signatures."
        },
        "AlgorithmIdentification34": {
            "additionalProperties": false,
            "properties": {
                "Algorithm": {
                    "$ref": "#/$defs/Algorithm8Code",
                    "description": "Mask generator function cryptographic algorithm."
                },
                "Parameter": {
                    "$ref": "#/$defs/Parameter18",
                    "description": "Parameters associated to the mask generator function cryptographic algorithm."
                }
            },
            "required": [
                "Algorithm"
            ],
            "type": "object",
            "description": "Mask generator function cryptographic algorithm and parameters."
        },
        "AlgorithmIdentification35": {
            "additionalProperties": false,
            "properties": {
                "Algorithm": {
                    "$ref": "#/$defs/Algorithm7Code",
                    "description": "Asymmetric encryption algorithm of a transport key."
                },
                "Parameter": {
                    "$ref": "#/$defs/Parameter17",
                    "description": "Parameters of the encryption algorithm."
                }
            },
            "required": [
                "Algorithm"
            ],
            "type": "object",
            "description": "Cryptographic algorithms and parameters for the protection of transported keys by an asymmetric key."
        },
        "AlgorithmIdentification36": {
            "additionalProperties": false,
            "properties": {
                "Algorithm": {
                    "$ref": "#/$defs/Algorithm26Code",
                    "description": "Identification of the digest algorithm."
                }
            },
            "required": [
                "Algorithm"
            ],
            "type": "object",
            "description": "Cryptographic algorithm and parameters of digests."
        },
        "Amount5": {
            "additionalProperties": false,
            "properties": {
                "Amount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Amount value."
                },
                "Sign": {
                    "$ref": "#/$defs/PlusOrMinusIndicator",
                    "description": "Sign of the amount."
                }
            },
            "required": [
                "Amount"
            ],
            "type": "object",
            "description": "Signed amount in a given numeric currency"
        },
        "AmountUnit1Code": {
            "enum": [
                "MONE",
                "POIN"
            ],
            "type": "string",
            "description": "Unit of a amount (for loyalty or account). \nCode: POIN: \t Point: \tDefinition: The amount is expressed in point. \nCode: MONE: \t Monetary: \tDefinition: The amount is expressed in a monetary value in a currency."
        },
        "AnyBICDec2014Identifier": {
            "pattern": "^([0-9A-Z]{4,4}[A-Z]{2,2}[0-9A-Z]{2,2}([0-9A-Z]{3,3})?)$",
            "type": "string",
            "description": "Code allocated to a financial or non-financial institution by the ISO 9362 Registration Authority, as described in ISO 9362: 2014 - \"Banking - Banking telecommunication messages - Business identifier code (BIC)\"."
        },
        "AttendanceContext1Code": {
            "enum": [
                "ATTD",
                "SATT",
                "UATT"
            ],
            "type": "string",
            "description": "Human attendance at the POI location during the transaction. \nCode: ATTD: \t Attended: \tDefinition: Attended payment, with an attendant. \nCode: SATT: \t SemiAttended: \tDefinition: Semi-attended, including self checkout. An attendant supervises several payment, and could be called to help the cardholder. \nCode: UATT: \t Unattended: \tDefinition: Unattended payment, no attendant present. \nCode: ATTL: \t AttendantDelivery: \tDefinition: Delivery by an attendant. \nCode: CUST: \t CustomerDelivery: \tDefinition: Delivery by the customer. \nCode: CARR: \t CarrierDelivery: \tDefinition: Delivery by a carrier. \nCode: FULL: \t FullServe: \tDefinition: Full service for fuel distribution. \nCode: SELF: \t SelfServe: \tDefinition: Self service for fuel distribution."
        },
        "AttendanceContext2Code": {
            "enum": [
                "ATTL",
                "CARR",
                "CUST",
                "FULL",
                "SELF"
            ],
            "type": "string",
            "description": "Identify the method of delivery or distribution. \nCode: ATTD: \t Attended: \tDefinition: Attended payment, with an attendant. \nCode: SATT: \t SemiAttended: \tDefinition: Semi-attended, including self checkout. An attendant supervises several payment, and could be called to help the cardholder. \nCode: UATT: \t Unattended: \tDefinition: Unattended payment, no attendant present. \nCode: ATTL: \t AttendantDelivery: \tDefinition: Delivery by an attendant. \nCode: CUST: \t CustomerDelivery: \tDefinition: Delivery by the customer. \nCode: CARR: \t CarrierDelivery: \tDefinition: Delivery by a carrier. \nCode: FULL: \t FullServe: \tDefinition: Full service for fuel distribution. \nCode: SELF: \t SelfServe: \tDefinition: Self service for fuel distribution."
        },
        "AttributeType1Code": {
            "enum": [
                "CNAT",
                "LATT",
                "OATT",
                "OUAT",
                "CATT"
            ],
            "type": "string",
            "description": "Type of attribute of a distinguished name (DN). \nCode: CNAT: \t CommonName: \tDefinition: Common name of the attribute (ASN.1 Object Identifier: id-at-commonName). \nCode: LATT: \t Locality: \tDefinition: Locality of the attribute (ASN.1 Object Identifier: id-at-localityName). \nCode: OATT: \t OrganisationName: \tDefinition: Organization name of the attribute (ASN.1 Object Identifier: id-at-organizationName). \nCode: OUAT: \t OrganisationUnitName: \tDefinition: Organization unit name of the attribute (ASN.1 Object Identifier: id-at-organizationalUnitName). \nCode: CATT: \t CountryName: \tDefinition: Country name of the attribute (ASN.1 Object Identifier: id-at-countryName). \nCode: EMAL: \t EmailAddress: \tDefinition: Email address of the certificate subject. \nCode: CHLG: \t ChallengePassword: \tDefinition: Password by which an entity may request certificate revocation."
        },
        "AuthenticatedData10": {
            "additionalProperties": false,
            "properties": {
                "MAC": {
                    "$ref": "#/$defs/Max140Binary",
                    "description": "Message authentication code value."
                },
                "MACAlgorithm": {
                    "$ref": "#/$defs/AlgorithmIdentification31",
                    "description": "Algorithm to compute message authentication code (MAC)."
                },
                "EncapsulatedContent": {
                    "$ref": "#/$defs/EncapsulatedContent3",
                    "description": "Data to authenticate."
                },
                "Recipient": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Recipient15Choice"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Recipient15Choice"
                            },
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "description": "Session key or protection key identification used by the recipient."
                },
                "Version": {
                    "$ref": "#/$defs/Number",
                    "description": "Version of the data structure."
                }
            },
            "required": [
                "MAC",
                "MACAlgorithm",
                "EncapsulatedContent",
                "Recipient"
            ],
            "type": "object",
            "description": "Message authentication code (MAC), computed on the data to protect with an encryption key."
        },
        "AuthenticationEntity2Code": {
            "enum": [
                "ICCD",
                "AGNT",
                "MERC",
                "ACQR",
                "ISSR",
                "TRML"
            ],
            "type": "string",
            "description": "Entity or device that has performed the verification. \nCode: ICCD: \t ICC: \tDefinition: Application in the chip card (Integrated Circuit Card), for instance an offline PIN verification. \nCode: AGNT: \t AuthorisedAgent: \tDefinition: Authorisation agent of the issuer. \nCode: MERC: \t Merchant: \tDefinition: Merchant (for example signature verification by the attendant). \nCode: ACQR: \t Acquirer: \tDefinition: Acquirer of the transaction. \nCode: ISSR: \t Issuer: \tDefinition: Card issuer. \nCode: TRML: \t Terminal: \tDefinition: Secure application in the terminal."
        },
        "AuthenticationMethod6Code": {
            "enum": [
                "NPIN",
                "PPSG",
                "PSWD",
                "SCRT",
                "SCNL",
                "SNCT",
                "CPSG",
                "ADDB",
                "BIOM",
                "CDHI",
                "CRYP",
                "CSCV",
                "PSVE",
                "CSEC",
                "ADDS",
                "MANU",
                "FPIN",
                "TOKP"
            ],
            "type": "string",
            "description": "Methods used to authenticate a person or a card. \nCode: UKNW: \t UnknownMethod: \tDefinition: Authentication method is performed unknown. \nCode: BYPS: \t Bypass: \tDefinition: Authentication bypassed by the merchant. \nCode: NPIN: \t OnLinePIN: \tDefinition: On-line PIN authentication (Personal Identification Number). \nCode: FPIN: \t OfflinePIN: \tDefinition: Off-line PIN authentication (Personal Identification Number). \nCode: CPSG: \t SignatureCapture: \tDefinition: Electronic signature capture (handwritten signature). \nCode: PPSG: \t PaperSignature: \tDefinition: Handwritten paper signature. \nCode: MANU: \t ManualVerification: \tDefinition: Manual verification, for example passport or drivers license. \nCode: MERC: \t MerchantAuthentication: \tDefinition: Merchant-related authentication. \nCode: SCRT: \t SecureCertificate: \tDefinition: Electronic commerce transaction secured with the X.509 certificate of a customer. \nCode: SNCT: \t SecureNoCertificate: \tDefinition: Secure electronic transaction without cardholder certificate. \nCode: SCNL: \t SecuredChannel: \tDefinition: Channel-encrypted transaction. \nCode: PSWD: \t Password: \tDefinition: Authentication by a password. \nCode: ADDB: \t BillingAddressVerification: \tDefinition: Cardholder billing address verification. \nCode: BIOM: \t Biometry: \tDefinition: Biometric authentication of the cardholder. \nCode: CDHI: \t CardholderIdentificationData: \tDefinition: Cardholder data provided for verification, for instance social security number, driver license number, passport number. \nCode: CRYP: \t CryptogramVerification: \tDefinition: Verification of a cryptogram generated by a chip card or another device, for instance ARQC (Authorisation Request Cryptogram). \nCode: CSCV: \t CSCVerification: \tDefinition: Verification of Card Security Code. \nCode: PSVE: \t PassiveAuthentication: \tDefinition: Authentication based on statistical cardholder behaviour. \nCode: CSEC: \t SecureElectronicCommerce: \tDefinition: Authentication performed during a secure electronic commerce transaction. \nCode: ADDS: \t ShippingAddressVerification: \tDefinition: Cardholder shipping address verification. \nCode: TOKN: \t TokenAuthentication: \tDefinition: Cryptogram generated by the token requestor or a customer device to validate the authorised use of a token. \nCode: TOKP: \t PaymentToken: \tDefinition: Verification or authentication related to the use of a payment token, for instance the validation of the authorised use of a token. \nCode: TOKA: \t AuthenticationToken: \tDefinition: A token is used to verify an already performed authentication. \nCode: MOBL: \t Mobile: \tDefinition: Customer mobile device. \nCode: OTHR: \t Other: \tDefinition: Other customer authentication. \nCode: ADVF: \t AddressDigits: \tDefinition: Digits of the address. \nCode: ARNB: \t AlienRegistrationNumber: \tDefinition: Number assigned by a government agency to identify foreign nationals. \nCode: ARQC: \t ARQCVerification: \tDefinition: Verification of a cryptogram generated by a chip card, for instance an ARQC (Authorisation Request Cryptogram). \nCode: BTHD: \t BirthDate: \tDefinition: Date of birth of a person. \nCode: CHDN: \t CardholderName: \tDefinition: Name of cardholder \nCode: COFB: \t CityOfBirth: \tDefinition: City of birth to authenticate a person. \nCode: CUID: \t CustomerIdentification: \tDefinition: Customer number used as a mechanism of authentication. \nCode: DRVI: \t DriverIdentification: \tDefinition: Identification of a driver in a fleet of vehicles. \nCode: DRLN: \t DriverLicenseNumber: \tDefinition: Number assigned by a driving license authority to a person driving a car. \nCode: EMAL: \t Email: \tDefinition: Electronic mail address \nCode: EMIN: \t EmployeeIdentificationNumber: \tDefinition: Number assigned to an employee by an employer. \nCode: EMRN: \t EmployerIdentificationNumber: \tDefinition: Number assigned to an employer by a registration authority. \nCode: IDCN: \t IdentityCardNumber: \tDefinition: Number assigned by a national authority to an identity card. \nCode: OTPW: \t OneTimePassword: \tDefinition: Verification of a one-time password provided by the issuer. \nCode: OCHI: \t OtherCardholderIdentification: \tDefinition: Other cardholder data provided for identification. \nCode: OTHC: \t OtherCryptogram: \tDefinition: Verification of a cryptogram generated by a non-card form factor. \nCode: PASN: \t PassportNumber: \tDefinition: Number assigned by a passport authority to a passport. \nCode: PCDV: \t PostalCode: \tDefinition: Verification based on digits of the postal code. \nCode: SHAF: \t ShippingAddressFrom: \tDefinition: Shipping address from verification. \nCode: SHAT: \t ShippingAddressTo: \tDefinition: Shipping address to verification \nCode: CHSA: \t CardholderAddress: \tDefinition: Verification whether the address corresponds to the cardholder's one. \nCode: NVSC: \t NonVisibleCSC: \tDefinition: Non visible Card Security Code. \nCode: OTHN: \t OtherNational: \tDefinition: Other type of verification defined at national level. \nCode: OTHP: \t OtherPrivate: \tDefinition: Other type of verification defined at private level \nCode: PLOB: \t PlaceOfBirth: \tDefinition: Place of birth of a person. \nCode: SSNB: \t SocialSecurityNumber: \tDefinition: Number assigned by a social security agency. \nCode: TXIN: \t TaxIdentificationNumber: \tDefinition: Number assigned by a tax authority to an entity. \nCode: APKI: \t AccountDigitalSignature: \tDefinition: Account-based digital signature authentication. \nCode: ARPC: \t ARPCVerification: \tDefinition: Response Card Cryptogram (ARPC)  verification. \nCode: ATCC: \t ATC: \tDefinition: Application Transaction Counter \nCode: FBIG: \t OffLineBiographics: \tDefinition: Biographics authentication in an offline mode. \nCode: FBIO: \t OffLineBiometrics: \tDefinition: Biometrics authentication in an offline mode \nCode: OLDA: \t OffLineDataAuthentication: \tDefinition: Authentication of data in an offline mode \nCode: OLDS: \t OffLineDigitisedSignatureAnalysis: \tDefinition: Analysis of signature transmitted offline \nCode: OFPE: \t OffLinePINEncrypted: \tDefinition: PIN generated offline and transmitted encrypted \nCode: FCPN: \t OffLinePINInClear: \tDefinition: PIN generated offline and transmitted in clear \nCode: NBIG: \t OnLineBiographics: \tDefinition: Biographics authentication in an online mode. \nCode: PHOM: \t PhoneHome: \tDefinition: Customer home phone number. \nCode: PWOR: \t PhoneWork: \tDefinition: Customer work phone number \nCode: PKIS: \t PKISignature: \tDefinition: PKI (Public Key Infrastructure) based digital signature \nCode: QWAC: \t QualifiedCertificate: \tDefinition: QualifiedCertificate \nCode: THDS: \t ThreeDS: \tDefinition: Authentication performed during a secure electronic commerce transaction. \nCode: CHSN: \t CardholderCertificateSerialNumber: \tDefinition: Serial number of the cardholder's certificate. \nCode: ACSN: \t AcceptorCertificateSerialNumber: \tDefinition: Serial number of the acceptor's certificate. \nCode: NTID: \t NationalIdentifier: \tDefinition: Nationally assigned identifier."
        },
        "AuthenticationMethod8Code": {
            "enum": [
                "TOKA",
                "ADDB",
                "BYPS",
                "BIOM",
                "CDHI",
                "CRYP",
                "CSCV",
                "MANU",
                "MERC",
                "MOBL",
                "FPIN",
                "NPIN",
                "OTHR",
                "PPSG",
                "PSVE",
                "PSWD",
                "TOKP",
                "SCRT",
                "SCNL",
                "CSEC",
                "SNCT",
                "ADDS",
                "CPSG",
                "TOKN",
                "UKNW"
            ],
            "type": "string",
            "description": "Method to authenticate the customer or its card. \nCode: UKNW: \t UnknownMethod: \tDefinition: Authentication method is performed unknown. \nCode: BYPS: \t Bypass: \tDefinition: Authentication bypassed by the merchant. \nCode: NPIN: \t OnLinePIN: \tDefinition: On-line PIN authentication (Personal Identification Number). \nCode: FPIN: \t OfflinePIN: \tDefinition: Off-line PIN authentication (Personal Identification Number). \nCode: CPSG: \t SignatureCapture: \tDefinition: Electronic signature capture (handwritten signature). \nCode: PPSG: \t PaperSignature: \tDefinition: Handwritten paper signature. \nCode: MANU: \t ManualVerification: \tDefinition: Manual verification, for example passport or drivers license. \nCode: MERC: \t MerchantAuthentication: \tDefinition: Merchant-related authentication. \nCode: SCRT: \t SecureCertificate: \tDefinition: Electronic commerce transaction secured with the X.509 certificate of a customer. \nCode: SNCT: \t SecureNoCertificate: \tDefinition: Secure electronic transaction without cardholder certificate. \nCode: SCNL: \t SecuredChannel: \tDefinition: Channel-encrypted transaction. \nCode: PSWD: \t Password: \tDefinition: Authentication by a password. \nCode: ADDB: \t BillingAddressVerification: \tDefinition: Cardholder billing address verification. \nCode: BIOM: \t Biometry: \tDefinition: Biometric authentication of the cardholder. \nCode: CDHI: \t CardholderIdentificationData: \tDefinition: Cardholder data provided for verification, for instance social security number, driver license number, passport number. \nCode: CRYP: \t CryptogramVerification: \tDefinition: Verification of a cryptogram generated by a chip card or another device, for instance ARQC (Authorisation Request Cryptogram). \nCode: CSCV: \t CSCVerification: \tDefinition: Verification of Card Security Code. \nCode: PSVE: \t PassiveAuthentication: \tDefinition: Authentication based on statistical cardholder behaviour. \nCode: CSEC: \t SecureElectronicCommerce: \tDefinition: Authentication performed during a secure electronic commerce transaction. \nCode: ADDS: \t ShippingAddressVerification: \tDefinition: Cardholder shipping address verification. \nCode: TOKN: \t TokenAuthentication: \tDefinition: Cryptogram generated by the token requestor or a customer device to validate the authorised use of a token. \nCode: TOKP: \t PaymentToken: \tDefinition: Verification or authentication related to the use of a payment token, for instance the validation of the authorised use of a token. \nCode: TOKA: \t AuthenticationToken: \tDefinition: A token is used to verify an already performed authentication. \nCode: MOBL: \t Mobile: \tDefinition: Customer mobile device. \nCode: OTHR: \t Other: \tDefinition: Other customer authentication. \nCode: ADVF: \t AddressDigits: \tDefinition: Digits of the address. \nCode: ARNB: \t AlienRegistrationNumber: \tDefinition: Number assigned by a government agency to identify foreign nationals. \nCode: ARQC: \t ARQCVerification: \tDefinition: Verification of a cryptogram generated by a chip card, for instance an ARQC (Authorisation Request Cryptogram). \nCode: BTHD: \t BirthDate: \tDefinition: Date of birth of a person. \nCode: CHDN: \t CardholderName: \tDefinition: Name of cardholder \nCode: COFB: \t CityOfBirth: \tDefinition: City of birth to authenticate a person. \nCode: CUID: \t CustomerIdentification: \tDefinition: Customer number used as a mechanism of authentication. \nCode: DRVI: \t DriverIdentification: \tDefinition: Identification of a driver in a fleet of vehicles. \nCode: DRLN: \t DriverLicenseNumber: \tDefinition: Number assigned by a driving license authority to a person driving a car. \nCode: EMAL: \t Email: \tDefinition: Electronic mail address \nCode: EMIN: \t EmployeeIdentificationNumber: \tDefinition: Number assigned to an employee by an employer. \nCode: EMRN: \t EmployerIdentificationNumber: \tDefinition: Number assigned to an employer by a registration authority. \nCode: IDCN: \t IdentityCardNumber: \tDefinition: Number assigned by a national authority to an identity card. \nCode: OTPW: \t OneTimePassword: \tDefinition: Verification of a one-time password provided by the issuer. \nCode: OCHI: \t OtherCardholderIdentification: \tDefinition: Other cardholder data provided for identification. \nCode: OTHC: \t OtherCryptogram: \tDefinition: Verification of a cryptogram generated by a non-card form factor. \nCode: PASN: \t PassportNumber: \tDefinition: Number assigned by a passport authority to a passport. \nCode: PCDV: \t PostalCode: \tDefinition: Verification based on digits of the postal code. \nCode: SHAF: \t ShippingAddressFrom: \tDefinition: Shipping address from verification. \nCode: SHAT: \t ShippingAddressTo: \tDefinition: Shipping address to verification \nCode: CHSA: \t CardholderAddress: \tDefinition: Verification whether the address corresponds to the cardholder's one. \nCode: NVSC: \t NonVisibleCSC: \tDefinition: Non visible Card Security Code. \nCode: OTHN: \t OtherNational: \tDefinition: Other type of verification defined at national level. \nCode: OTHP: \t OtherPrivate: \tDefinition: Other type of verification defined at private level \nCode: PLOB: \t PlaceOfBirth: \tDefinition: Place of birth of a person. \nCode: SSNB: \t SocialSecurityNumber: \tDefinition: Number assigned by a social security agency. \nCode: TXIN: \t TaxIdentificationNumber: \tDefinition: Number assigned by a tax authority to an entity. \nCode: APKI: \t AccountDigitalSignature: \tDefinition: Account-based digital signature authentication. \nCode: ARPC: \t ARPCVerification: \tDefinition: Response Card Cryptogram (ARPC)  verification. \nCode: ATCC: \t ATC: \tDefinition: Application Transaction Counter \nCode: FBIG: \t OffLineBiographics: \tDefinition: Biographics authentication in an offline mode. \nCode: FBIO: \t OffLineBiometrics: \tDefinition: Biometrics authentication in an offline mode \nCode: OLDA: \t OffLineDataAuthentication: \tDefinition: Authentication of data in an offline mode \nCode: OLDS: \t OffLineDigitisedSignatureAnalysis: \tDefinition: Analysis of signature transmitted offline \nCode: OFPE: \t OffLinePINEncrypted: \tDefinition: PIN generated offline and transmitted encrypted \nCode: FCPN: \t OffLinePINInClear: \tDefinition: PIN generated offline and transmitted in clear \nCode: NBIG: \t OnLineBiographics: \tDefinition: Biographics authentication in an online mode. \nCode: PHOM: \t PhoneHome: \tDefinition: Customer home phone number. \nCode: PWOR: \t PhoneWork: \tDefinition: Customer work phone number \nCode: PKIS: \t PKISignature: \tDefinition: PKI (Public Key Infrastructure) based digital signature \nCode: QWAC: \t QualifiedCertificate: \tDefinition: QualifiedCertificate \nCode: THDS: \t ThreeDS: \tDefinition: Authentication performed during a secure electronic commerce transaction. \nCode: CHSN: \t CardholderCertificateSerialNumber: \tDefinition: Serial number of the cardholder's certificate. \nCode: ACSN: \t AcceptorCertificateSerialNumber: \tDefinition: Serial number of the acceptor's certificate. \nCode: NTID: \t NationalIdentifier: \tDefinition: Nationally assigned identifier."
        },
        "AuthenticationResult1Code": {
            "enum": [
                "DENY",
                "MRCH",
                "CARD",
                "AUTH",
                "CRPT",
                "UCRP"
            ],
            "type": "string",
            "description": "Specifies the result of authentication done. \nCode: DENY: \t Denial: \tDefinition: The authentication didn’t succeed. \nCode: CARD: \t NonParticipation: \tDefinition: The card does not participate in the authentication programme. \nCode: AUTH: \t UnableToAuthenticate: \tDefinition: The authentication couldn’t be carried out. \nCode: MRCH: \t MerchantNotEnroled: \tDefinition: Merchant not enrolled in the authentication programme. \nCode: CRPT: \t WithCryptogram: \tDefinition: Authentication succeeded with a cryptogram. \nCode: UCRP: \t WithoutCryptogram: \tDefinition: Authentication succeeded without a cryptogram."
        },
        "AuthorisationResult18": {
            "additionalProperties": false,
            "properties": {
                "AuthorisationCode": {
                    "$ref": "#/$defs/Max8Text",
                    "description": "Value assigned by the authorising party."
                },
                "AuthorisationEntity": {
                    "$ref": "#/$defs/GenericIdentification90",
                    "description": "Type of party that has delivered or declined the card payment authorisation (the party is not identified)."
                },
                "ResponseToAuthorisation": {
                    "$ref": "#/$defs/ResponseType10",
                    "description": "Response to an authorisation request."
                }
            },
            "required": [
                "ResponseToAuthorisation"
            ],
            "type": "object",
            "description": "Outcome of the authorisation."
        },
        "BBANIdentifier": {
            "pattern": "^([0-9A-Za-z]{1,30})$",
            "type": "string",
            "description": "Basic Bank Account Number (BBAN). Identifier used nationally by financial institutions, ie, in individual countries, generally as part of a National Account Numbering Scheme(s), which uniquely identifies the account of a customer."
        },
        "BalanceInquiryRequest7": {
            "additionalProperties": false,
            "properties": {
                "LoyaltyAccountRequest": {
                    "$ref": "#/$defs/LoyaltyAccountRequest3",
                    "description": "Data related to a requested Loyalty program or account."
                },
                "PaymentAccountRequest": {
                    "$ref": "#/$defs/PaymentAccountRequest1",
                    "description": "Data related to the account pointed by the payment card."
                },
                "SaleTransactionIdentification": {
                    "$ref": "#/$defs/TransactionIdentifier1",
                    "description": "Sale System identification of the transaction in an unambiguous way."
                },
                "StoredValueAccountRequest": {
                    "$ref": "#/$defs/StoredValueRequest7",
                    "description": "Data related to a requested Stored value account."
                }
            },
            "type": "object",
            "description": "Specifies data element nexessary to request balance information."
        },
        "BarcodeType1Code": {
            "enum": [
                "COQR",
                "C128",
                "C025",
                "C039",
                "EA13",
                "EAN8",
                "P417",
                "UPCA"
            ],
            "type": "string",
            "description": "Type of BarCode coding. \nCode: EAN8: \t BarcodeEncodedAsEAN8: \tDefinition: Barcode encoded according to the EAN8 standard. \nCode: EA13: \t BarcodeEncodedAsEA13: \tDefinition: Barcode encoded according to the EAN13 standard. \nCode: C039: \t BarcodeEncodedAsCode39: \tDefinition: Barcode encoded according to the Code 39 standard. \nCode: UPCA: \t BarcodeEncodedAsUPCA: \tDefinition: Barcode encoded according to the UPCA standard. \nCode: C025: \t BarcodeEncodedAsCode25: \tDefinition: Barcode encoded according to the Code 25 standard. \nCode: C128: \t BarcodeEncodedAsCode128: \tDefinition: Barcode encoded according to the Code 128 standard. \nCode: P417: \t BarcodeEncodedAsPDF417: \tDefinition: Barcode encoded according to the PDF417 standard. \nCode: COQR: \t BarcodeEncodedAs2DQRCode: \tDefinition: Barcode encoded according to the 2Dimensions Quick Response Code Standard."
        },
        "BaseOneRate": {
            "type": "number",
            "description": "Rate expressed as a decimal, for example, 0.7 is 7/10 and 70%."
        },
        "BatchRequest6": {
            "additionalProperties": false,
            "properties": {
                "RemoveAllFlag": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Flag to remove all the transactions."
                },
                "SaleBatchIdentification": {
                    "$ref": "#/$defs/TransactionIdentifier1",
                    "description": "Sale System identification of the batch in an unambiguous way."
                },
                "TransactionToPerform": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TransactionToPerform6Choice"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/TransactionToPerform6Choice"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Content of the Batch Request message."
                }
            },
            "type": "object",
            "description": "Data to request a batch service."
        },
        "BinRange1": {
            "additionalProperties": false,
            "properties": {
                "HigherBin": {
                    "$ref": "#/$defs/Max15NumericText",
                    "description": "Higher value of BIN in the range."
                },
                "LowerBin": {
                    "$ref": "#/$defs/Max15NumericText",
                    "description": "Lower value of BIN in the range."
                }
            },
            "required": [
                "HigherBin",
                "LowerBin"
            ],
            "type": "object",
            "description": "Specifies a set of cards which shares the same functionalities."
        },
        "BusinessArea2Code": {
            "enum": [
                "AIBD",
                "PPAY",
                "TKNF",
                "EOPT",
                "TOPT"
            ],
            "type": "string",
            "description": "Specifies the business context of the transaction \nCode: PPAY: \t PlainPayment: \tDefinition: The card is used to perform a plain payment. \nCode: OPMT: \t Openpayment: \tDefinition: The card is used in a Transit business case where the fare amount is not known when the transaction is initiated. \nCode: TKNF: \t TransitKnownFare: \tDefinition: The card is used in a Transit business case where the fare amount is known when the transaction is initiated. \nCode: AIBD: \t ArtificialIntelligenceBasedDecision: \tDefinition: The payment is initiated by an artificial intelligence based decision. \nCode: EOPT: \t EnergyOpenPayment: \tDefinition: Indicates when the card is used in an energy business case where the amount could not be assessed when the transaction is initiated. \nCode: TOPT: \t TransitOpenPayment: \tDefinition: Indicates when the card is used in a transit business case where the fare amount is not known when the transaction is initiated."
        },
        "BytePadding1Code": {
            "enum": [
                "LNGT",
                "NUL8",
                "NULG",
                "NULL",
                "RAND"
            ],
            "type": "string",
            "description": "Byte padding for a cypher block chaining mode encryption, if the padding is not implicit. \nCode: LNGT: \t LengthPadding: \tDefinition: Message to encrypt is completed by a byte value containing the total number of added bytes. \nCode: NUL8: \t Null80Padding: \tDefinition: Message to encrypt is completed by one bit of value 1, followed by null bits until the encryption block length is reached. \nCode: NULG: \t NullLengthPadding: \tDefinition: Message to encrypt is completed by null byte values, the last byte containing the total number of added bytes. \nCode: NULL: \t NullPadding: \tDefinition: Message to encrypt is completed by null bytes. \nCode: RAND: \t RandomPadding: \tDefinition: Message to encrypt is completed by random value, the last byte containing the total number of added bytes."
        },
        "CardAccountType3Code": {
            "enum": [
                "CTDP",
                "CHCK",
                "CRDT",
                "CURR",
                "CDBT",
                "DFLT",
                "EPRS",
                "HEQL",
                "ISTL",
                "INVS",
                "LCDT",
                "MBNW",
                "MNMK",
                "MNMC",
                "MTGL",
                "RTRM",
                "RVLV",
                "SVNG",
                "STBD",
                "UVRL",
                "PRPD",
                "FLTC"
            ],
            "type": "string",
            "description": "Type of cardholder account used for the transaction. \nCode: DFLT: \t Default: \tDefinition: Default account. \nCode: SVNG: \t Savings: \tDefinition: Savings account. \nCode: CHCK: \t Checking: \tDefinition: Checking account. \nCode: CRDT: \t CreditCard: \tDefinition: Credit card account. \nCode: UVRL: \t Universal: \tDefinition: Universal account. \nCode: INVS: \t Investment: \tDefinition: Investment account. \nCode: EPRS: \t EpurseCard: \tDefinition: Electronic purse card account. \nCode: CTDP: \t CertificateOfDeposit: \tDefinition: Certificate of deposit saving account. \nCode: CURR: \t Current: \tDefinition: Current account. \nCode: CDBT: \t DebitCard: \tDefinition: Debit card account. \nCode: HEQL: \t HomeEquityLoan: \tDefinition: Home equity loan credit account. \nCode: ISTL: \t InstalmentLoan: \tDefinition: Instalment loan credit account. \nCode: LCDT: \t LineOfCredit: \tDefinition: Line of credit account. \nCode: MBNW: \t MobilePhoneAccount: \tDefinition: Mobile Station Integrated Services Digital Network Number (MSISDN). \nCode: MNMK: \t MoneyMarket: \tDefinition: Money market saving account. \nCode: MNMC: \t MoneyMarketChecking: \tDefinition: Money market checking account. \nCode: MTGL: \t MortgageLoan: \tDefinition: Mortgage loan credit account. \nCode: RTRM: \t RetirementAccount: \tDefinition: Retirement account. \nCode: RVLV: \t RevolvingLoanAccount: \tDefinition: Revolving loan account. \nCode: STBD: \t StockOrBond: \tDefinition: Stock or bond investment account. \nCode: PRPD: \t PrePaid: \tDefinition: Pre-paid account. \nCode: FLTC: \t FleetCard: \tDefinition: Fleet card account. \nCode: CASH: \t Cash: \tDefinition: Cash as a source type  to perform the transaction. \nCode: DBAC: \t DebitAccount: \tDefinition: Account for debiting funds. \nCode: CRAC: \t CreditAccount: \tDefinition: Account for crediting funds. \nCode: OTHN: \t OtherNational: \tDefinition: Other type of account defined at national level. \nCode: OTHP: \t OtherPrivate: \tDefinition: Other type of account defined at private level. \nCode: BENE: \t Benefit: \tDefinition: Benefit account type"
        },
        "CardAcquisitionRequest3": {
            "additionalProperties": false,
            "properties": {
                "AllowedLoyaltyBrand": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Max35Text"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Max35Text"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Loyalty brands or programs allowed by the Sale System for the loyalty transaction."
                },
                "AllowedPaymentBrand": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Max35Text"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Max35Text"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Card payment brands allowed by the Sale System for the payment transaction."
                },
                "CashBackFlag": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Indicates if Cashback is allowed"
                },
                "ForceCustomerSelectionFlag": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Indicates if the Customer realises the selection of the card application."
                },
                "PaymentType": {
                    "$ref": "#/$defs/CardPaymentServiceType13Code",
                    "description": "Type of payment transaction."
                },
                "SaleToAcquirerData": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Sale information intended for the Acquirer."
                },
                "SaleToIssuerData": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Sale information intended for the Issuer."
                },
                "SaleToPOIData": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "The POI System receives this information."
                },
                "SaleTransactionIdentification": {
                    "$ref": "#/$defs/TransactionIdentifier1",
                    "description": "Sale System identification of the transaction in an unambiguous way."
                },
                "TotalAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Amount of the transaction. It allows the processing of a contactless card."
                }
            },
            "type": "object",
            "description": "Data to request to card data acquisition."
        },
        "CardDataReading5Code": {
            "enum": [
                "TAGC",
                "PHYS",
                "BRCD",
                "MGST",
                "CICC",
                "DFLE",
                "CTLS",
                "ECTL",
                "CDFL"
            ],
            "type": "string",
            "description": "Type of reading of the card data. \nCode: TAGC: \t Tag: \tDefinition: Tag reading capabilities (RFID, etc.). \nCode: PHYS: \t Physical: \tDefinition: Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event. \nCode: BRCD: \t BarCode: \tDefinition: Bar code. \nCode: MGST: \t MagneticStripe: \tDefinition: Magnetic stripe. \nCode: CICC: \t ICC: \tDefinition: ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816. \nCode: DFLE: \t AccountData: \tDefinition: Account data on file. \nCode: CTLS: \t ProximityReader: \tDefinition: Contactless proximity reader. \nCode: ECTL: \t EMVProximityReader: \tDefinition: Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa). \nCode: CDFL: \t CardOnFile: \tDefinition: Card information are stored on a file. \nCode: UNKW: \t Unknown: \tDefinition: Unknown card reading capability. \nCode: SICC: \t SynchronousIntegratedCircuitCard: \tDefinition: Synchronous ICC - (Integrated Circuit Card) with contact. \nCode: ICCY: \t ICCContact: \tDefinition: ICC contact capability \nCode: ICPY: \t ICCProximity: \tDefinition: ICC contactless proximity \nCode: MICR: \t MagneticInkCharacterRecognition: \tDefinition: Recognition of magnetic ink characters \nCode: MLEY: \t ManualEntry: \tDefinition: Manual, no terminal used. \nCode: MSIP: \t MSIProximity: \tDefinition: Magstripe image contactless proximity \nCode: OCRR: \t OpticalCharacterRecognition: \tDefinition: OCR either at time of transaction or after the event. \nCode: OPTC: \t OpticalCode: \tDefinition: Optical coded reading capabilities (e.g. barcode, QR code, etc.) \nCode: OTHN: \t OtherNational: \tDefinition: Other national capability type assigned at national level. \nCode: OTHP: \t OtherPrivate: \tDefinition: Other card reading capability assigned on a private basis. \nCode: RFID: \t RFIDTag: \tDefinition: Radio Frequency Identification tag capabilities. \nCode: UNSP: \t Unspecified: \tDefinition: Unspecified capability. \nCode: KEEN: \t KeyEntered: \tDefinition: Key entered. \nCode: QRCD: \t QRCode: \tDefinition: Quick response code. \nCode: CAMR: \t Camera: \tDefinition: Card details captured via camera. \nCode: MBNK: \t MobileBankingApplication: \tDefinition: Card details were obtained via a mobile banking application. \nCode: TOKN: \t Token: \tDefinition: Card details were obtained via a token."
        },
        "CardDataReading8Code": {
            "enum": [
                "TAGC",
                "PHYS",
                "BRCD",
                "MGST",
                "CICC",
                "DFLE",
                "CTLS",
                "ECTL",
                "CDFL",
                "SICC",
                "UNKW",
                "QRCD",
                "OPTC"
            ],
            "type": "string",
            "description": "Type of reading of the card data. \nCode: TAGC: \t Tag: \tDefinition: Tag reading capabilities (RFID, etc.). \nCode: PHYS: \t Physical: \tDefinition: Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event. \nCode: BRCD: \t BarCode: \tDefinition: Bar code. \nCode: MGST: \t MagneticStripe: \tDefinition: Magnetic stripe. \nCode: CICC: \t ICC: \tDefinition: ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816. \nCode: DFLE: \t AccountData: \tDefinition: Account data on file. \nCode: CTLS: \t ProximityReader: \tDefinition: Contactless proximity reader. \nCode: ECTL: \t EMVProximityReader: \tDefinition: Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa). \nCode: CDFL: \t CardOnFile: \tDefinition: Card information are stored on a file. \nCode: UNKW: \t Unknown: \tDefinition: Unknown card reading capability. \nCode: SICC: \t SynchronousIntegratedCircuitCard: \tDefinition: Synchronous ICC - (Integrated Circuit Card) with contact. \nCode: ICCY: \t ICCContact: \tDefinition: ICC contact capability \nCode: ICPY: \t ICCProximity: \tDefinition: ICC contactless proximity \nCode: MICR: \t MagneticInkCharacterRecognition: \tDefinition: Recognition of magnetic ink characters \nCode: MLEY: \t ManualEntry: \tDefinition: Manual, no terminal used. \nCode: MSIP: \t MSIProximity: \tDefinition: Magstripe image contactless proximity \nCode: OCRR: \t OpticalCharacterRecognition: \tDefinition: OCR either at time of transaction or after the event. \nCode: OPTC: \t OpticalCode: \tDefinition: Optical coded reading capabilities (e.g. barcode, QR code, etc.) \nCode: OTHN: \t OtherNational: \tDefinition: Other national capability type assigned at national level. \nCode: OTHP: \t OtherPrivate: \tDefinition: Other card reading capability assigned on a private basis. \nCode: RFID: \t RFIDTag: \tDefinition: Radio Frequency Identification tag capabilities. \nCode: UNSP: \t Unspecified: \tDefinition: Unspecified capability. \nCode: KEEN: \t KeyEntered: \tDefinition: Key entered. \nCode: QRCD: \t QRCode: \tDefinition: Quick response code. \nCode: CAMR: \t Camera: \tDefinition: Card details captured via camera. \nCode: MBNK: \t MobileBankingApplication: \tDefinition: Card details were obtained via a mobile banking application. \nCode: TOKN: \t Token: \tDefinition: Card details were obtained via a token."
        },
        "CardDirectDebit2": {
            "additionalProperties": false,
            "properties": {
                "CreditorIdentification": {
                    "$ref": "#/$defs/Creditor4",
                    "description": "Information related to the creditor."
                },
                "DebtorIdentification": {
                    "$ref": "#/$defs/Debtor4",
                    "description": "Information related to the debtor."
                },
                "MandateRelatedInformation": {
                    "$ref": "#/$defs/MandateRelatedInformation13",
                    "description": "Provides further details of the mandate signed between the creditor and the debtor."
                }
            },
            "required": [
                "CreditorIdentification",
                "MandateRelatedInformation"
            ],
            "type": "object",
            "description": "Element containing all information needed for a card initiating direct debit."
        },
        "CardFallback1Code": {
            "enum": [
                "FFLB",
                "SFLB",
                "NFLB"
            ],
            "type": "string",
            "description": "Information about card entry mode fallback. \nCode: NFLB: \t NoFallback: \tDefinition: No card fall-back during the transaction in progress. \nCode: SFLB: \t FallbackAfterSuccess: \tDefinition: Card fall-back occurred during the transaction in progress. The previous transaction on the terminal was successful. \nCode: FFLB: \t FallbackAfterFailure: \tDefinition: Card fall-back occurred during the transaction in progress. The previous transaction on the terminal failed."
        },
        "CardIdentificationType1Code": {
            "enum": [
                "ACCT",
                "BARC",
                "ISO2",
                "PHON",
                "CPAN",
                "PRIV",
                "UUID"
            ],
            "type": "string",
            "description": "Type of account identification. \nCode: CPAN: \t PrimaryAccountNumber: \tDefinition: Standard card identification (card number). \nCode: ISO2: \t ISOTrack2: \tDefinition: ISO Track 2 including identification. \nCode: BARC: \t BarCode: \tDefinition: Bar-code with a specific form of identification. \nCode: ACCT: \t AccountNumber: \tDefinition: Account identification. \nCode: PHON: \t PhoneNumber: \tDefinition: A phone number identifies the account on which the phone card is assigned. \nCode: UUID: \t UniversalUniqueIdentification: \tDefinition: A Universal Unique Identification code is set for identification. \nCode: PRIV: \t PrivativeNumbering: \tDefinition: An identification set by a privative application."
        },
        "CardPaymentContext30": {
            "additionalProperties": false,
            "properties": {
                "DirectDebitContext": {
                    "$ref": "#/$defs/CardDirectDebit2",
                    "description": "Context of the direct debit transaction."
                },
                "PaymentContext": {
                    "$ref": "#/$defs/PaymentContext29",
                    "description": "Context of the card payment transaction."
                },
                "SaleContext": {
                    "$ref": "#/$defs/SaleContext4",
                    "description": "Context of the sale involving the card payment transaction."
                }
            },
            "type": "object",
            "description": "Context in which the transaction is performed (payment and sale)."
        },
        "CardPaymentEnvironment80": {
            "additionalProperties": false,
            "properties": {
                "Acquirer": {
                    "$ref": "#/$defs/Acquirer10",
                    "description": "Acquirer involved in the card payment."
                },
                "Card": {
                    "$ref": "#/$defs/PaymentCard35",
                    "description": "Payment card performing the transaction."
                },
                "Check": {
                    "$ref": "#/$defs/Check1",
                    "description": "Check Payment instrument."
                },
                "Cardholder": {
                    "$ref": "#/$defs/Cardholder21",
                    "description": "Cardholder involved in the card payment."
                },
                "CustomerDevice": {
                    "$ref": "#/$defs/CustomerDevice3",
                    "description": "Device used by the customer to perform the payment transaction."
                },
                "LoyaltyAccount": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/LoyaltyAccount3"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/LoyaltyAccount3"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Store value account associated to the payment."
                },
                "Merchant": {
                    "$ref": "#/$defs/Organisation41",
                    "description": "Merchant performing the card payment transaction.\r\nUsage: In some cases, merchant and acceptor may be regarded as the same entity."
                },
                "MerchantToken": {
                    "$ref": "#/$defs/MerchantToken2",
                    "description": "Merchant token information."
                },
                "POI": {
                    "$ref": "#/$defs/PointOfInteraction14",
                    "description": "Point of interaction (POI) performing the transaction."
                },
                "PaymentToken": {
                    "$ref": "#/$defs/Token1",
                    "description": "Payment token information."
                },
                "ProtectedCardholderData": {
                    "$ref": "#/$defs/ContentInformationType40",
                    "description": "Replacement of the message element Cardholder by a digital envelope using a cryptographic key."
                },
                "SaleEnvironment": {
                    "$ref": "#/$defs/RetailerSaleEnvironment2",
                    "description": "Sale Retailer Environment for this message."
                },
                "StoredValueAccount": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StoredValueAccount2"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/StoredValueAccount2"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Store value account payment instrument."
                },
                "ServiceProvider": {
                    "$ref": "#/$defs/Acquirer10",
                    "description": "Third party agent which provides services."
                },
                "Wallet": {
                    "$ref": "#/$defs/CustomerDevice3",
                    "description": "Container for tenders used by the customer to perform the payment transaction."
                }
            },
            "type": "object",
            "description": "Environment of the transaction."
        },
        "CardPaymentServiceType13Code": {
            "enum": [
                "CRDP",
                "CSHW",
                "CSHD",
                "IRES",
                "DEFR",
                "URES",
                "PRES",
                "RECP",
                "INSP",
                "INSI",
                "RFND",
                "VCAU"
            ],
            "type": "string",
            "description": "Additional attribute of the service type. \nCode: CAFT: \t CardsFundTransfer: \tDefinition: Transfer of funds to and/or from a card account. \nCode: ORCR: \t OriginalCredit: \tDefinition: Original credit. \nCode: CRDP: \t CardPayment: \tDefinition: Card payment. \nCode: CSHB: \t CashBack: \tDefinition: Card payment with cash-back. \nCode: CSHW: \t CashAdvance: \tDefinition: Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter. \nCode: CSHD: \t CashDeposit: \tDefinition: Cash deposit. \nCode: DEFR: \t DeferredPayment: \tDefinition: Deferred payment. \nCode: RESA: \t Reservation: \tDefinition: Reservation (pre-authorisation). \nCode: LOAD: \t Loading: \tDefinition: Loading or reloading non-financial account. \nCode: RFND: \t Refund: \tDefinition: Refund transaction. \nCode: QUCH: \t QuasiCash: \tDefinition: Quasi-cash. \nCode: BALC: \t Balance: \tDefinition: Balance enquiry. \nCode: CACT: \t CardActivation: \tDefinition: Card activation. \nCode: CAVR: \t CardVerification: \tDefinition: Card verification. \nCode: PINC: \t PINChange: \tDefinition: PIN (Personal Identification Number) change. \nCode: VALC: \t ValidityCheck: \tDefinition: Card validity check. \nCode: AGGR: \t Aggregation: \tDefinition: Aggregation of low payments. \nCode: DCCV: \t DCC: \tDefinition: Dynamic currency conversion (DCC). \nCode: GRTT: \t Gratuity: \tDefinition: Card payment with gratuity. \nCode: INSP: \t Instalment: \tDefinition: Instalment payment. \nCode: LOYT: \t Loyalty: \tDefinition: Loyalty services. \nCode: NRES: \t NoShow: \tDefinition: No show after reservation. \nCode: PUCO: \t PurchaseCorporate: \tDefinition: Purchase and corporate data. \nCode: RECP: \t RecurringPayment: \tDefinition: Recurring payment. \nCode: SOAF: \t SolicitedAvailableFunds: \tDefinition: Solicited available funds. \nCode: UNAF: \t UnsolicitedAvailableFunds: \tDefinition: Unsolicited available funds. \nCode: VCAU: \t VoiceAuthorisation: \tDefinition: Voice authorisation. \nCode: IRES: \t InitialReservation: \tDefinition: Initial reservation. \nCode: URES: \t UpdateReservation: \tDefinition: Update reservation. \nCode: PRES: \t PaymentReservation: \tDefinition: Payment after reservation. \nCode: ARES: \t AdditionalPayment: \tDefinition: Additional payment after reservation. \nCode: FREC: \t FirstRecurring: \tDefinition: Initial recurring payment. \nCode: RREC: \t FollowingRecurring: \tDefinition: Repeat recurring payment. \nCode: TP2B: \t PersonToBusiness: \tDefinition: Card payment transaction transfer from person to business. \nCode: TP2P: \t PersonToPerson: \tDefinition: Card payment transaction transfer from person to person. \nCode: INSA: \t AcceptorInstalment: \tDefinition: Instalment payment transaction performed by the acceptor or the acquirer. \nCode: INSI: \t IssuerInstalment: \tDefinition: Instalment payment transaction performed by the card issuer. \nCode: UNLD: \t Unloading: \tDefinition: Unloading non-financial account. \nCode: CAFH: \t CardsFundTransferPush: \tDefinition: Transfer of funds to a card or an account. \nCode: CAFL: \t CardsFundTransferPull: \tDefinition: Transfer of funds from a card or an account. \nCode: CHWD: \t CashWithdrawal: \tDefinition: Withdrawal of cash on an ATM. \nCode: PINU: \t PINUnblock: \tDefinition: Unblock the cardholder PIN. \nCode: CSWD: \t ChosenWithdrawal: \tDefinition: Amount and notes values are chosen by the customer. \nCode: AUWS: \t PreAuthorisedWithdrawal: \tDefinition: Withdrawal transaction was pre-authorised by another channel (amount could be absent). \nCode: PFWD: \t ProfileWithdrawal: \tDefinition: Amount and Notes Values are pre-defined by the customer profile. \nCode: SDWD: \t StandardWithdrawal: \tDefinition: Customer pressed a button associated with a withdrawal of unique amount and notes mix. \nCode: TFBL: \t TransferCardBillPayment: \tDefinition: Transfer for payment of bills. \nCode: TFCS: \t TransferFromCash: \tDefinition: Transfer from cash deposit. \nCode: TFCH: \t TransferFromCheque: \tDefinition: Transfer from cheque deposit. \nCode: TFDB: \t TransferFundsDisbursementGeneral: \tDefinition: Transfer for general disbursement. \nCode: TFGD: \t TransferGovernmentDisbursement: \tDefinition: Transfer for government disbursement. \nCode: TFMD: \t TransferMerchantDisbursement: \tDefinition: Transfer for merchant disbursement. \nCode: TFPD: \t TransferPayrollPensionDisbursement: \tDefinition: Transfer for payroll pension disbursement. \nCode: NRFD: \t NonRefundable: \tDefinition: Payment of goods or services which are not refundable, for instance low cost airline tickets. \nCode: INST: \t Instant: \tDefinition: Instant transaction. \nCode: CADJ: \t CreditAdjustement: \tDefinition: Credit adjustment to a previous transaction. \nCode: DADJ: \t DebitAdjustement: \tDefinition: Debit adjustment to a previous transaction. \nCode: CRTC: \t CreateCertificate: \tDefinition: Creation of an X.509 certificate with the public key and the information of the owner of the asymmetric key provided by the requestor. \nCode: CRTR: \t RenewCerificate: \tDefinition: Renewal of an X.509 certificate, protected by the certificate to renew. \nCode: CRTK: \t RevokeCertificate: \tDefinition: Revocation of an active X.509 certificate. \nCode: WLSA: \t AddWhiteList: \tDefinition: Add a POI in the white list of the terminal manager. \nCode: WLSR: \t RemoveWhiteList: \tDefinition: Remove a POI from the white list of the terminal manager. \nCode: CIDD: \t CardInitiatingDirectDebit: \tDefinition: Direct Debit initiated by Card. \nCode: GOPT: \t GuaranteeOfPayment: \tDefinition: Acceptor claims for guarantee of payment."
        },
        "CardPaymentServiceType14Code": {
            "enum": [
                "IRES",
                "URES",
                "PRES",
                "ARES",
                "FREC",
                "RREC",
                "GOPT"
            ],
            "type": "string",
            "description": "Additional attributes of the service provided by the card payment transaction. \nCode: CAFT: \t CardsFundTransfer: \tDefinition: Transfer of funds to and/or from a card account. \nCode: ORCR: \t OriginalCredit: \tDefinition: Original credit. \nCode: CRDP: \t CardPayment: \tDefinition: Card payment. \nCode: CSHB: \t CashBack: \tDefinition: Card payment with cash-back. \nCode: CSHW: \t CashAdvance: \tDefinition: Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter. \nCode: CSHD: \t CashDeposit: \tDefinition: Cash deposit. \nCode: DEFR: \t DeferredPayment: \tDefinition: Deferred payment. \nCode: RESA: \t Reservation: \tDefinition: Reservation (pre-authorisation). \nCode: LOAD: \t Loading: \tDefinition: Loading or reloading non-financial account. \nCode: RFND: \t Refund: \tDefinition: Refund transaction. \nCode: QUCH: \t QuasiCash: \tDefinition: Quasi-cash. \nCode: BALC: \t Balance: \tDefinition: Balance enquiry. \nCode: CACT: \t CardActivation: \tDefinition: Card activation. \nCode: CAVR: \t CardVerification: \tDefinition: Card verification. \nCode: PINC: \t PINChange: \tDefinition: PIN (Personal Identification Number) change. \nCode: VALC: \t ValidityCheck: \tDefinition: Card validity check. \nCode: AGGR: \t Aggregation: \tDefinition: Aggregation of low payments. \nCode: DCCV: \t DCC: \tDefinition: Dynamic currency conversion (DCC). \nCode: GRTT: \t Gratuity: \tDefinition: Card payment with gratuity. \nCode: INSP: \t Instalment: \tDefinition: Instalment payment. \nCode: LOYT: \t Loyalty: \tDefinition: Loyalty services. \nCode: NRES: \t NoShow: \tDefinition: No show after reservation. \nCode: PUCO: \t PurchaseCorporate: \tDefinition: Purchase and corporate data. \nCode: RECP: \t RecurringPayment: \tDefinition: Recurring payment. \nCode: SOAF: \t SolicitedAvailableFunds: \tDefinition: Solicited available funds. \nCode: UNAF: \t UnsolicitedAvailableFunds: \tDefinition: Unsolicited available funds. \nCode: VCAU: \t VoiceAuthorisation: \tDefinition: Voice authorisation. \nCode: IRES: \t InitialReservation: \tDefinition: Initial reservation. \nCode: URES: \t UpdateReservation: \tDefinition: Update reservation. \nCode: PRES: \t PaymentReservation: \tDefinition: Payment after reservation. \nCode: ARES: \t AdditionalPayment: \tDefinition: Additional payment after reservation. \nCode: FREC: \t FirstRecurring: \tDefinition: Initial recurring payment. \nCode: RREC: \t FollowingRecurring: \tDefinition: Repeat recurring payment. \nCode: TP2B: \t PersonToBusiness: \tDefinition: Card payment transaction transfer from person to business. \nCode: TP2P: \t PersonToPerson: \tDefinition: Card payment transaction transfer from person to person. \nCode: INSA: \t AcceptorInstalment: \tDefinition: Instalment payment transaction performed by the acceptor or the acquirer. \nCode: INSI: \t IssuerInstalment: \tDefinition: Instalment payment transaction performed by the card issuer. \nCode: UNLD: \t Unloading: \tDefinition: Unloading non-financial account. \nCode: CAFH: \t CardsFundTransferPush: \tDefinition: Transfer of funds to a card or an account. \nCode: CAFL: \t CardsFundTransferPull: \tDefinition: Transfer of funds from a card or an account. \nCode: CHWD: \t CashWithdrawal: \tDefinition: Withdrawal of cash on an ATM. \nCode: PINU: \t PINUnblock: \tDefinition: Unblock the cardholder PIN. \nCode: CSWD: \t ChosenWithdrawal: \tDefinition: Amount and notes values are chosen by the customer. \nCode: AUWS: \t PreAuthorisedWithdrawal: \tDefinition: Withdrawal transaction was pre-authorised by another channel (amount could be absent). \nCode: PFWD: \t ProfileWithdrawal: \tDefinition: Amount and Notes Values are pre-defined by the customer profile. \nCode: SDWD: \t StandardWithdrawal: \tDefinition: Customer pressed a button associated with a withdrawal of unique amount and notes mix. \nCode: TFBL: \t TransferCardBillPayment: \tDefinition: Transfer for payment of bills. \nCode: TFCS: \t TransferFromCash: \tDefinition: Transfer from cash deposit. \nCode: TFCH: \t TransferFromCheque: \tDefinition: Transfer from cheque deposit. \nCode: TFDB: \t TransferFundsDisbursementGeneral: \tDefinition: Transfer for general disbursement. \nCode: TFGD: \t TransferGovernmentDisbursement: \tDefinition: Transfer for government disbursement. \nCode: TFMD: \t TransferMerchantDisbursement: \tDefinition: Transfer for merchant disbursement. \nCode: TFPD: \t TransferPayrollPensionDisbursement: \tDefinition: Transfer for payroll pension disbursement. \nCode: NRFD: \t NonRefundable: \tDefinition: Payment of goods or services which are not refundable, for instance low cost airline tickets. \nCode: INST: \t Instant: \tDefinition: Instant transaction. \nCode: CADJ: \t CreditAdjustement: \tDefinition: Credit adjustment to a previous transaction. \nCode: DADJ: \t DebitAdjustement: \tDefinition: Debit adjustment to a previous transaction. \nCode: CRTC: \t CreateCertificate: \tDefinition: Creation of an X.509 certificate with the public key and the information of the owner of the asymmetric key provided by the requestor. \nCode: CRTR: \t RenewCerificate: \tDefinition: Renewal of an X.509 certificate, protected by the certificate to renew. \nCode: CRTK: \t RevokeCertificate: \tDefinition: Revocation of an active X.509 certificate. \nCode: WLSA: \t AddWhiteList: \tDefinition: Add a POI in the white list of the terminal manager. \nCode: WLSR: \t RemoveWhiteList: \tDefinition: Remove a POI from the white list of the terminal manager. \nCode: CIDD: \t CardInitiatingDirectDebit: \tDefinition: Direct Debit initiated by Card. \nCode: GOPT: \t GuaranteeOfPayment: \tDefinition: Acceptor claims for guarantee of payment."
        },
        "CardPaymentServiceType5Code": {
            "enum": [
                "BALC",
                "CACT",
                "CRDP",
                "CAFH",
                "CAVR",
                "CSHW",
                "CSHD",
                "DEFR",
                "LOAD",
                "ORCR",
                "PINC",
                "QUCH",
                "RFND",
                "RESA",
                "VALC",
                "UNLD",
                "CAFT",
                "CAFL"
            ],
            "type": "string",
            "description": "Main service provided during the card payment transaction. \nCode: CAFT: \t CardsFundTransfer: \tDefinition: Transfer of funds to and/or from a card account. \nCode: ORCR: \t OriginalCredit: \tDefinition: Original credit. \nCode: CRDP: \t CardPayment: \tDefinition: Card payment. \nCode: CSHB: \t CashBack: \tDefinition: Card payment with cash-back. \nCode: CSHW: \t CashAdvance: \tDefinition: Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter. \nCode: CSHD: \t CashDeposit: \tDefinition: Cash deposit. \nCode: DEFR: \t DeferredPayment: \tDefinition: Deferred payment. \nCode: RESA: \t Reservation: \tDefinition: Reservation (pre-authorisation). \nCode: LOAD: \t Loading: \tDefinition: Loading or reloading non-financial account. \nCode: RFND: \t Refund: \tDefinition: Refund transaction. \nCode: QUCH: \t QuasiCash: \tDefinition: Quasi-cash. \nCode: BALC: \t Balance: \tDefinition: Balance enquiry. \nCode: CACT: \t CardActivation: \tDefinition: Card activation. \nCode: CAVR: \t CardVerification: \tDefinition: Card verification. \nCode: PINC: \t PINChange: \tDefinition: PIN (Personal Identification Number) change. \nCode: VALC: \t ValidityCheck: \tDefinition: Card validity check. \nCode: AGGR: \t Aggregation: \tDefinition: Aggregation of low payments. \nCode: DCCV: \t DCC: \tDefinition: Dynamic currency conversion (DCC). \nCode: GRTT: \t Gratuity: \tDefinition: Card payment with gratuity. \nCode: INSP: \t Instalment: \tDefinition: Instalment payment. \nCode: LOYT: \t Loyalty: \tDefinition: Loyalty services. \nCode: NRES: \t NoShow: \tDefinition: No show after reservation. \nCode: PUCO: \t PurchaseCorporate: \tDefinition: Purchase and corporate data. \nCode: RECP: \t RecurringPayment: \tDefinition: Recurring payment. \nCode: SOAF: \t SolicitedAvailableFunds: \tDefinition: Solicited available funds. \nCode: UNAF: \t UnsolicitedAvailableFunds: \tDefinition: Unsolicited available funds. \nCode: VCAU: \t VoiceAuthorisation: \tDefinition: Voice authorisation. \nCode: IRES: \t InitialReservation: \tDefinition: Initial reservation. \nCode: URES: \t UpdateReservation: \tDefinition: Update reservation. \nCode: PRES: \t PaymentReservation: \tDefinition: Payment after reservation. \nCode: ARES: \t AdditionalPayment: \tDefinition: Additional payment after reservation. \nCode: FREC: \t FirstRecurring: \tDefinition: Initial recurring payment. \nCode: RREC: \t FollowingRecurring: \tDefinition: Repeat recurring payment. \nCode: TP2B: \t PersonToBusiness: \tDefinition: Card payment transaction transfer from person to business. \nCode: TP2P: \t PersonToPerson: \tDefinition: Card payment transaction transfer from person to person. \nCode: INSA: \t AcceptorInstalment: \tDefinition: Instalment payment transaction performed by the acceptor or the acquirer. \nCode: INSI: \t IssuerInstalment: \tDefinition: Instalment payment transaction performed by the card issuer. \nCode: UNLD: \t Unloading: \tDefinition: Unloading non-financial account. \nCode: CAFH: \t CardsFundTransferPush: \tDefinition: Transfer of funds to a card or an account. \nCode: CAFL: \t CardsFundTransferPull: \tDefinition: Transfer of funds from a card or an account. \nCode: CHWD: \t CashWithdrawal: \tDefinition: Withdrawal of cash on an ATM. \nCode: PINU: \t PINUnblock: \tDefinition: Unblock the cardholder PIN. \nCode: CSWD: \t ChosenWithdrawal: \tDefinition: Amount and notes values are chosen by the customer. \nCode: AUWS: \t PreAuthorisedWithdrawal: \tDefinition: Withdrawal transaction was pre-authorised by another channel (amount could be absent). \nCode: PFWD: \t ProfileWithdrawal: \tDefinition: Amount and Notes Values are pre-defined by the customer profile. \nCode: SDWD: \t StandardWithdrawal: \tDefinition: Customer pressed a button associated with a withdrawal of unique amount and notes mix. \nCode: TFBL: \t TransferCardBillPayment: \tDefinition: Transfer for payment of bills. \nCode: TFCS: \t TransferFromCash: \tDefinition: Transfer from cash deposit. \nCode: TFCH: \t TransferFromCheque: \tDefinition: Transfer from cheque deposit. \nCode: TFDB: \t TransferFundsDisbursementGeneral: \tDefinition: Transfer for general disbursement. \nCode: TFGD: \t TransferGovernmentDisbursement: \tDefinition: Transfer for government disbursement. \nCode: TFMD: \t TransferMerchantDisbursement: \tDefinition: Transfer for merchant disbursement. \nCode: TFPD: \t TransferPayrollPensionDisbursement: \tDefinition: Transfer for payroll pension disbursement. \nCode: NRFD: \t NonRefundable: \tDefinition: Payment of goods or services which are not refundable, for instance low cost airline tickets. \nCode: INST: \t Instant: \tDefinition: Instant transaction. \nCode: CADJ: \t CreditAdjustement: \tDefinition: Credit adjustment to a previous transaction. \nCode: DADJ: \t DebitAdjustement: \tDefinition: Debit adjustment to a previous transaction. \nCode: CRTC: \t CreateCertificate: \tDefinition: Creation of an X.509 certificate with the public key and the information of the owner of the asymmetric key provided by the requestor. \nCode: CRTR: \t RenewCerificate: \tDefinition: Renewal of an X.509 certificate, protected by the certificate to renew. \nCode: CRTK: \t RevokeCertificate: \tDefinition: Revocation of an active X.509 certificate. \nCode: WLSA: \t AddWhiteList: \tDefinition: Add a POI in the white list of the terminal manager. \nCode: WLSR: \t RemoveWhiteList: \tDefinition: Remove a POI from the white list of the terminal manager. \nCode: CIDD: \t CardInitiatingDirectDebit: \tDefinition: Direct Debit initiated by Card. \nCode: GOPT: \t GuaranteeOfPayment: \tDefinition: Acceptor claims for guarantee of payment."
        },
        "CardPaymentServiceType9Code": {
            "enum": [
                "AGGR",
                "DCCV",
                "GRTT",
                "LOYT",
                "NRES",
                "PUCO",
                "RECP",
                "SOAF",
                "VCAU",
                "INSI",
                "INSA",
                "CSHB",
                "INST",
                "NRFD"
            ],
            "type": "string",
            "description": "Service provided by the card payment transaction, in addition to the main service. \nCode: CAFT: \t CardsFundTransfer: \tDefinition: Transfer of funds to and/or from a card account. \nCode: ORCR: \t OriginalCredit: \tDefinition: Original credit. \nCode: CRDP: \t CardPayment: \tDefinition: Card payment. \nCode: CSHB: \t CashBack: \tDefinition: Card payment with cash-back. \nCode: CSHW: \t CashAdvance: \tDefinition: Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter. \nCode: CSHD: \t CashDeposit: \tDefinition: Cash deposit. \nCode: DEFR: \t DeferredPayment: \tDefinition: Deferred payment. \nCode: RESA: \t Reservation: \tDefinition: Reservation (pre-authorisation). \nCode: LOAD: \t Loading: \tDefinition: Loading or reloading non-financial account. \nCode: RFND: \t Refund: \tDefinition: Refund transaction. \nCode: QUCH: \t QuasiCash: \tDefinition: Quasi-cash. \nCode: BALC: \t Balance: \tDefinition: Balance enquiry. \nCode: CACT: \t CardActivation: \tDefinition: Card activation. \nCode: CAVR: \t CardVerification: \tDefinition: Card verification. \nCode: PINC: \t PINChange: \tDefinition: PIN (Personal Identification Number) change. \nCode: VALC: \t ValidityCheck: \tDefinition: Card validity check. \nCode: AGGR: \t Aggregation: \tDefinition: Aggregation of low payments. \nCode: DCCV: \t DCC: \tDefinition: Dynamic currency conversion (DCC). \nCode: GRTT: \t Gratuity: \tDefinition: Card payment with gratuity. \nCode: INSP: \t Instalment: \tDefinition: Instalment payment. \nCode: LOYT: \t Loyalty: \tDefinition: Loyalty services. \nCode: NRES: \t NoShow: \tDefinition: No show after reservation. \nCode: PUCO: \t PurchaseCorporate: \tDefinition: Purchase and corporate data. \nCode: RECP: \t RecurringPayment: \tDefinition: Recurring payment. \nCode: SOAF: \t SolicitedAvailableFunds: \tDefinition: Solicited available funds. \nCode: UNAF: \t UnsolicitedAvailableFunds: \tDefinition: Unsolicited available funds. \nCode: VCAU: \t VoiceAuthorisation: \tDefinition: Voice authorisation. \nCode: IRES: \t InitialReservation: \tDefinition: Initial reservation. \nCode: URES: \t UpdateReservation: \tDefinition: Update reservation. \nCode: PRES: \t PaymentReservation: \tDefinition: Payment after reservation. \nCode: ARES: \t AdditionalPayment: \tDefinition: Additional payment after reservation. \nCode: FREC: \t FirstRecurring: \tDefinition: Initial recurring payment. \nCode: RREC: \t FollowingRecurring: \tDefinition: Repeat recurring payment. \nCode: TP2B: \t PersonToBusiness: \tDefinition: Card payment transaction transfer from person to business. \nCode: TP2P: \t PersonToPerson: \tDefinition: Card payment transaction transfer from person to person. \nCode: INSA: \t AcceptorInstalment: \tDefinition: Instalment payment transaction performed by the acceptor or the acquirer. \nCode: INSI: \t IssuerInstalment: \tDefinition: Instalment payment transaction performed by the card issuer. \nCode: UNLD: \t Unloading: \tDefinition: Unloading non-financial account. \nCode: CAFH: \t CardsFundTransferPush: \tDefinition: Transfer of funds to a card or an account. \nCode: CAFL: \t CardsFundTransferPull: \tDefinition: Transfer of funds from a card or an account. \nCode: CHWD: \t CashWithdrawal: \tDefinition: Withdrawal of cash on an ATM. \nCode: PINU: \t PINUnblock: \tDefinition: Unblock the cardholder PIN. \nCode: CSWD: \t ChosenWithdrawal: \tDefinition: Amount and notes values are chosen by the customer. \nCode: AUWS: \t PreAuthorisedWithdrawal: \tDefinition: Withdrawal transaction was pre-authorised by another channel (amount could be absent). \nCode: PFWD: \t ProfileWithdrawal: \tDefinition: Amount and Notes Values are pre-defined by the customer profile. \nCode: SDWD: \t StandardWithdrawal: \tDefinition: Customer pressed a button associated with a withdrawal of unique amount and notes mix. \nCode: TFBL: \t TransferCardBillPayment: \tDefinition: Transfer for payment of bills. \nCode: TFCS: \t TransferFromCash: \tDefinition: Transfer from cash deposit. \nCode: TFCH: \t TransferFromCheque: \tDefinition: Transfer from cheque deposit. \nCode: TFDB: \t TransferFundsDisbursementGeneral: \tDefinition: Transfer for general disbursement. \nCode: TFGD: \t TransferGovernmentDisbursement: \tDefinition: Transfer for government disbursement. \nCode: TFMD: \t TransferMerchantDisbursement: \tDefinition: Transfer for merchant disbursement. \nCode: TFPD: \t TransferPayrollPensionDisbursement: \tDefinition: Transfer for payroll pension disbursement. \nCode: NRFD: \t NonRefundable: \tDefinition: Payment of goods or services which are not refundable, for instance low cost airline tickets. \nCode: INST: \t Instant: \tDefinition: Instant transaction. \nCode: CADJ: \t CreditAdjustement: \tDefinition: Credit adjustment to a previous transaction. \nCode: DADJ: \t DebitAdjustement: \tDefinition: Debit adjustment to a previous transaction. \nCode: CRTC: \t CreateCertificate: \tDefinition: Creation of an X.509 certificate with the public key and the information of the owner of the asymmetric key provided by the requestor. \nCode: CRTR: \t RenewCerificate: \tDefinition: Renewal of an X.509 certificate, protected by the certificate to renew. \nCode: CRTK: \t RevokeCertificate: \tDefinition: Revocation of an active X.509 certificate. \nCode: WLSA: \t AddWhiteList: \tDefinition: Add a POI in the white list of the terminal manager. \nCode: WLSR: \t RemoveWhiteList: \tDefinition: Remove a POI from the white list of the terminal manager. \nCode: CIDD: \t CardInitiatingDirectDebit: \tDefinition: Direct Debit initiated by Card. \nCode: GOPT: \t GuaranteeOfPayment: \tDefinition: Acceptor claims for guarantee of payment."
        },
        "CardPaymentToken5": {
            "additionalProperties": false,
            "properties": {
                "CardSequenceNumber": {
                    "$ref": "#/$defs/Min2Max3NumericText",
                    "description": "Identify a payment token inside a set of cards with the same PAN."
                },
                "Token": {
                    "$ref": "#/$defs/Min8Max28NumericText",
                    "description": "Surrogate value of the PAN."
                },
                "TokenAssuranceData": {
                    "$ref": "#/$defs/Max500Binary",
                    "description": "Information about the identification and verification of the cardholder."
                },
                "TokenAssuranceLevel": {
                    "$ref": "#/$defs/Number",
                    "description": "Level of confidence resulting of the identification and authentication of the cardholder performed and the entity that performed it."
                },
                "TokenAssuranceMethod": {
                    "$ref": "#/$defs/Max2NumericText",
                    "description": "Value that allows a Token Service Provider to indicate the identification and verification performed representing the binding of the payment token to the underlying PAN and cardholder."
                },
                "TokenCharacteristic": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Max35Text"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Max35Text"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Additional payment token information."
                },
                "TokenInitiatedIndicator": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Original transaction was initiated by Token."
                },
                "TokenRequestor": {
                    "$ref": "#/$defs/PaymentTokenIdentifiers1",
                    "description": "Identifier of a token provider requestor."
                },
                "TokenExpiryDate": {
                    "$ref": "#/$defs/Max10Text",
                    "description": "Expiration date of the payment token that is generated by and maintained in the token vault."
                }
            },
            "type": "object",
            "description": "Payment token information."
        },
        "CardPaymentTransaction131": {
            "additionalProperties": false,
            "properties": {
                "CurrencyConversion": {
                    "$ref": "#/$defs/CurrencyConversion31",
                    "description": "Link to a previous currency conversion."
                },
                "POIIdentification": {
                    "$ref": "#/$defs/GenericIdentification32",
                    "description": "Identification of the POI (Point Of Interaction) performing the transaction."
                },
                "SaleReferenceIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Global reference of the sale transaction for the sale system."
                },
                "TransactionIdentification": {
                    "$ref": "#/$defs/TransactionIdentifier1",
                    "description": "Unique identification of the transaction assigned by the POI (Point Of Interaction)."
                }
            },
            "required": [
                "POIIdentification",
                "TransactionIdentification"
            ],
            "type": "object",
            "description": "Identification of the original transaction."
        },
        "CardPaymentTransaction136": {
            "additionalProperties": false,
            "properties": {
                "AdditionalService": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CardPaymentServiceType9Code"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/CardPaymentServiceType9Code"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Service in addition to the main service."
                },
                "AdditionalTransactionData": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Max70Text"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Max70Text"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Additional information related to the transaction."
                },
                "AuthorisationResult": {
                    "$ref": "#/$defs/AuthorisationResult18",
                    "description": "Outcome of the authorisation request."
                },
                "CardProgrammeApplied": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Specifies the card program actually selected by the cardholder among the ones supported by the retailer and/or the one actually proposed to him."
                },
                "CardProgrammeProposed": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Max35Text"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Max35Text"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Specifies the card program proposed by a retailer to a cardholder among a series of payment programmes offered by the retailer."
                },
                "CustomerConsent": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Indicates if the customer has explicitly validated a choice."
                },
                "CustomerOrder": {
                    "$ref": "#/$defs/CustomerOrder1",
                    "description": "Customer Order processing data."
                },
                "CustomerToken": {
                    "$ref": "#/$defs/CardPaymentToken5",
                    "description": "Customer payment token information."
                },
                "IssuerCITIdentification": {
                    "$ref": "#/$defs/Max140Text",
                    "description": "Identification, given by the Issuer, of the transaction processed with the cardholder that legitimates this merchant initiated transaction."
                },
                "IssuerReferenceData": {
                    "$ref": "#/$defs/Max140Text",
                    "description": "Identification of the transaction given by the Issuer."
                },
                "LastTransactionFlag": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Flag indicating processing of the last transaction."
                },
                "MerchantCITIdentification": {
                    "$ref": "#/$defs/Max140Text",
                    "description": "Identification, given by the merchant, of the transaction processed with the cardholder that legitimates this merchant initiated transaction."
                },
                "MerchantCategoryCode": {
                    "$ref": "#/$defs/Min3Max4Text",
                    "description": "Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction."
                },
                "MerchantReferenceData": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Merchant information that must be returned unchanged in the response."
                },
                "OriginalTransaction": {
                    "$ref": "#/$defs/CardPaymentTransaction131",
                    "description": "Identification of the original transaction."
                },
                "ReconciliationIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Unique identification of the Acquirer/Acceptor reconciliation period."
                },
                "SaleReferenceIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Global reference of the sale transaction for the sale system."
                },
                "SaleToAcquirerData": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Sale information intended for the Acquirer."
                },
                "SaleToIssuerData": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Sale information intended for the Issuer."
                },
                "SaleToPOIData": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Specifies element that the sale system wants to store in the POI system."
                },
                "ServiceAttribute": {
                    "$ref": "#/$defs/CardPaymentServiceType14Code",
                    "description": "Additional attribute of the service type."
                },
                "TransactionCapture": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Flag indicating whether the transaction data must be captured or not in addition to the message process."
                },
                "TransactionDetails": {
                    "$ref": "#/$defs/CardPaymentTransactionDetails53",
                    "description": "Details of the transaction."
                },
                "TransactionIdentification": {
                    "$ref": "#/$defs/TransactionIdentifier1",
                    "description": "Identification of the transaction assigned by the initiator of the request. For instance refers to POITransactionIdentification if used inside an authorisation request or to SaleTransactionIdentification if the message is a payment request initiated by a sale system."
                },
                "TransactionType": {
                    "$ref": "#/$defs/CardPaymentServiceType5Code",
                    "description": "Type of transaction being undertaken for the main service."
                }
            },
            "required": [
                "TransactionDetails",
                "TransactionIdentification",
                "TransactionType"
            ],
            "type": "object",
            "description": "Data associated with the transaction for a potential currency conversion."
        },
        "CardPaymentTransactionDetails53": {
            "additionalProperties": false,
            "properties": {
                "AccountType": {
                    "$ref": "#/$defs/CardAccountType3Code",
                    "description": "Type of cardholder account used for the transaction."
                },
                "AdditionalInformation": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ExternallyDefinedData5"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/ExternallyDefinedData5"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Additional information related to the transaction like an Invoice or IndustryData (for example  hospitality, lodging, transportation)."
                },
                "AggregationTransaction": {
                    "$ref": "#/$defs/AggregationTransaction3",
                    "description": "Payment transaction with an aggregated amount."
                },
                "AmountQualifier": {
                    "$ref": "#/$defs/TypeOfAmount8Code",
                    "description": "Qualifies the amount associated with the transaction."
                },
                "AuthorisedAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Amount authorised for the payment transaction."
                },
                "Currency": {
                    "$ref": "#/$defs/ActiveCurrencyCode",
                    "description": "Currency associated with the transaction."
                },
                "CurrencyConversionResult": {
                    "$ref": "#/$defs/CurrencyConversion30",
                    "description": "Result of the currency conversion proposed to the cardholder."
                },
                "CumulativeAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Contains the updated amount of all authorisations related to the same business transaction."
                },
                "CompletionSequenceCounter": {
                    "$ref": "#/$defs/PositiveNumber",
                    "description": "Identification in the Sequence of the Completion related to the authorisation of this transaction."
                },
                "CompletionSequenceNumber": {
                    "$ref": "#/$defs/PositiveNumber",
                    "description": "Total Number of Completion related to the authorisation of this transaction."
                },
                "DeliveryLocation": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Location of the delivery, for instance pump number or parking bay."
                },
                "DetailedAmount": {
                    "$ref": "#/$defs/DetailedAmount15",
                    "description": "Detailed amounts associated with the total amount of transaction."
                },
                "ICCRelatedData": {
                    "$ref": "#/$defs/Max10000Binary",
                    "description": "Data related to an integrated circuit card application."
                },
                "Instalment": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Instalment5"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Instalment5"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Data related to a financial loan (instalment)."
                },
                "InvoiceAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Amount of the transaction that will be invoiced to the cardholder."
                },
                "OnLineReason": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/OnLineReason2Code"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/OnLineReason2Code"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Reason to process an online authorisation."
                },
                "ProductCodeSetIdentification": {
                    "$ref": "#/$defs/Max10Text",
                    "description": "Codification used to identify the products."
                },
                "Recurring": {
                    "$ref": "#/$defs/RecurringTransaction6",
                    "description": "Data related to a recurring transaction."
                },
                "ReSubmissionCounter": {
                    "$ref": "#/$defs/PositiveNumber",
                    "description": "In case a message is sent after the consumption of goods or service, it indicates the number of times the authorisation has been sent to the Acquirer in order to get an approval."
                },
                "RequestedAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Amount requested to be authorised."
                },
                "SaleItem": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Product6"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Product6"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Item purchased with the transaction."
                },
                "TotalAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Total amount of the transaction."
                },
                "TotalAuthorisedAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Total Amount authorised for the payment transaction when a sequence of completion is used."
                },
                "UnattendedLevelCategory": {
                    "$ref": "#/$defs/Max35NumericText",
                    "description": "Transaction category level on an unattended POI (Point Of Interaction)."
                },
                "ValidityDate": {
                    "$ref": "#/$defs/ISODate",
                    "description": "Transaction authorisation deadline to complete the related payment."
                }
            },
            "required": [
                "TotalAmount"
            ],
            "type": "object",
            "description": "Details of the transaction in the authorisation request in a batch."
        },
        "CardProductType1Code": {
            "enum": [
                "COMM",
                "CONS"
            ],
            "type": "string",
            "description": "Type of card product. \nCode: COMM: \t CommercialCard: \tDefinition: Cards issued as a means of business expenditure, for instance business card or corporate card. The user could be a company, an individual for business expenses or a self employed for business purposes. \nCode: CONS: \t ConsumerCard: \tDefinition: Cards issued as a means of personal expenditure. The user is always an individual."
        },
        "Cardholder21": {
            "additionalProperties": false,
            "properties": {
                "Authentication": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CardholderAuthentication17"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/CardholderAuthentication17"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Method and data intended to be used for this transaction to authenticate the cardholder and its card."
                },
                "BillingAddress": {
                    "$ref": "#/$defs/PostalAddress22",
                    "description": "Postal address of the owner of the payment card."
                },
                "Identification": {
                    "$ref": "#/$defs/PersonIdentification15",
                    "description": "Identification of the cardholder involved in a transaction."
                },
                "Language": {
                    "$ref": "#/$defs/LanguageCode",
                    "description": "Language selected for the cardholder interface during the transaction.\r\nReference ISO 639-1 (alpha-2) et ISO 639-2 (alpha-3)."
                },
                "MobileData": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/MobileData6"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/MobileData6"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Data related to the mobile of stakeholder."
                },
                "Name": {
                    "$ref": "#/$defs/Max45Text",
                    "description": "Cardholder name associated with the card."
                },
                "PersonalData": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Identifies personal data related to the cardholder."
                },
                "ShippingAddress": {
                    "$ref": "#/$defs/PostalAddress22",
                    "description": "Postal address for delivery of goods or services."
                },
                "TripNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the trip."
                },
                "TransactionVerificationResult": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TransactionVerificationResult4"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/TransactionVerificationResult4"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Result of performed verifications for the transaction."
                },
                "Vehicle": {
                    "$ref": "#/$defs/Vehicle1",
                    "description": "Information related to the vehicle used for the transaction."
                }
            },
            "type": "object",
            "description": "Data related to the cardholder."
        },
        "CardholderAuthentication17": {
            "additionalProperties": false,
            "properties": {
                "AddressVerification": {
                    "$ref": "#/$defs/AddressVerification1",
                    "description": "Numeric characters of the cardholder's billing or shipping address for verification."
                },
                "AuthenticationAdditionalInformation": {
                    "$ref": "#/$defs/ExternallyDefinedData5",
                    "description": "Additional information related to the result of the authentication."
                },
                "AuthenticationLevel": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Level of authentication for a given type – e.g. value assigned by scheme rules or by bilateral agreements."
                },
                "AuthenticationMethod": {
                    "$ref": "#/$defs/AuthenticationMethod8Code",
                    "description": "Method and data intended to be used for this transaction to authenticate the cardholder or its card."
                },
                "AuthenticationResult": {
                    "$ref": "#/$defs/AuthenticationResult1Code",
                    "description": "Result of authentication."
                },
                "AuthenticationType": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Type of authentication for a given method - e.g. three-domain authentication, scheme-proprietary authentication, etc."
                },
                "AuthenticationValue": {
                    "$ref": "#/$defs/Max5000Binary",
                    "description": "Value used to authenticate the cardholder."
                },
                "AuthenticationExemption": {
                    "$ref": "#/$defs/Exemption1Code",
                    "description": "If Strong Customer Authentication is not mandated to process the transaction, this message element must identify the reason of exemption."
                },
                "CardholderIdentification": {
                    "$ref": "#/$defs/PersonIdentification15",
                    "description": "Identification of the cardholder to verify."
                },
                "CardholderOnLinePIN": {
                    "$ref": "#/$defs/OnLinePIN11",
                    "description": "Encrypted personal identification number (PIN) and related information."
                },
                "ProtectedAuthenticationValue": {
                    "$ref": "#/$defs/ContentInformationType40",
                    "description": "Protection of the authentication value."
                }
            },
            "type": "object",
            "description": "Data related to the authentication of the cardholder."
        },
        "CardholderVerificationCapability4Code": {
            "enum": [
                "APKI",
                "CHDT",
                "MNSG",
                "MNVR",
                "FBIG",
                "FBIO",
                "FDSG",
                "FCPN",
                "FEPN",
                "NPIN",
                "PKIS",
                "SCEC",
                "NBIO",
                "NOVF",
                "OTHR"
            ],
            "type": "string",
            "description": "Cardholder verification capabilities by the terminal. \nCode: MNSG: \t ManualSignature: \tDefinition: Manual signature verification. \nCode: NPIN: \t OnLinePIN: \tDefinition: Online PIN (Personal Identification Number). \nCode: FCPN: \t OfflinePINClear: \tDefinition: Offline PIN in clear (Personal Identification Number). \nCode: FEPN: \t OfflinePINEncrypted: \tDefinition: Offline PIN encrypted (Personal Identification Number). \nCode: FDSG: \t OfflineDigitalSignature: \tDefinition: Offline digital signature analysis. \nCode: FBIO: \t OfflineBiometrics: \tDefinition: Offline biometrics. \nCode: MNVR: \t ManualVerification: \tDefinition: Other manual verification, for example passport or drivers license. \nCode: FBIG: \t OfflineBiographics: \tDefinition: Offline biographics. \nCode: APKI: \t AccountDigitalSignature: \tDefinition: Account based digital signature. \nCode: PKIS: \t PKISignature: \tDefinition: PKI (Public Key Infrastructure) based digital signature. \nCode: CHDT: \t CardholderData: \tDefinition: Cardholder authentication data. \nCode: SCEC: \t SecureElectronicCommerce: \tDefinition: Three domain secure (three domain secure authentication of the cardholder). \nCode: UNKW: \t Unknown: \tDefinition: Unknown cardholder verification capability. \nCode: PCOD: \t PersonalCode: \tDefinition: Personal code of the customer for banking services. \nCode: NOVF: \t NoCapabilities: \tDefinition: No cardholder verification capability. \nCode: NBIO: \t OnLineBiometrics: \tDefinition: Online biometrics. \nCode: OTHR: \t Other: \tDefinition: Other cardholder verification capabilities. \nCode: OTHN: \t OtherNational: \tDefinition: Other type of cardholder verification defined at national level \nCode: OTHP: \t OtherPrivate: \tDefinition: Other type of cardholder verification defined in a private manner. \nCode: SIGN: \t Signature: \tDefinition: Handwritten signature verification \nCode: UNSP: \t Unspecified: \tDefinition: Cardholder verification capability unspecified. \nCode: VORN: \t VoiceRecognition: \tDefinition: Recognition by voice. \nCode: NOPN: \t NoPINEntry: \tDefinition: Device has no pin entry capability. \nCode: NOOP: \t NoOnLinePINEntry: \tDefinition: Device has no online pin entry capability."
        },
        "CashAccountIdentification7Choice": {
            "additionalProperties": false,
            "properties": {
                "BBAN": {
                    "$ref": "#/$defs/BBANIdentifier",
                    "description": "Basic Bank Account Number (BBAN) - identifier used nationally by financial institutions, ie, in individual countries, generally as part of a National Account Numbering Scheme(s), to uniquely identify the account of a customer."
                },
                "DomesticAccount": {
                    "$ref": "#/$defs/SimpleIdentificationInformation4",
                    "description": "Account number used by financial institutions in individual countries to identify an account of a customer, but not necessarily the bank and branch of the financial institution in which the account is held."
                },
                "IBAN": {
                    "$ref": "#/$defs/IBAN2007Identifier",
                    "description": "International Bank Account Number (IBAN) - identifier used internationally by financial institutions to uniquely identify the account of a customer. Further specifications of the format and content of the IBAN can be found in the standard ISO 13616 \"Banking and related financial services - International Bank Account Number (IBAN)\" version 1997-10-01, or later revisions."
                },
                "UPIC": {
                    "$ref": "#/$defs/UPICIdentifier",
                    "description": "Universal Payment Identification Code (UPIC) - identifier used by the New York Clearing House to mask confidential data, such as bank accounts and bank routing numbers. UPIC numbers remain with business customers, regardless of banking relationship changes."
                }
            },
            "type": "object",
            "description": "Choice between formats for the identification of a cash account."
        },
        "CertificateIssuer1": {
            "additionalProperties": false,
            "properties": {
                "RelativeDistinguishedName": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/RelativeDistinguishedName1"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/RelativeDistinguishedName1"
                            },
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "description": "Relative distinguished name inside a X.509 certificate."
                }
            },
            "required": [
                "RelativeDistinguishedName"
            ],
            "type": "object",
            "description": "Certificate issuer name (see X.509)."
        },
        "Check1": {
            "additionalProperties": false,
            "properties": {
                "AccountNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the account linked to the check."
                },
                "BankIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the institution (bank) issuing the check."
                },
                "CheckCardNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Check guarantee card number.\r\nThe human readable number from the Check Guarantee Card that is presented during the check tendering process."
                },
                "CheckNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the check."
                },
                "CheckType": {
                    "$ref": "#/$defs/CheckType1Code",
                    "description": "Type of the check (personal or professional)."
                },
                "CheckTrackData2": {
                    "$ref": "#/$defs/TrackData2",
                    "description": "Track Data of the check to digitally identify the data."
                },
                "Country": {
                    "$ref": "#/$defs/Max3Text",
                    "description": "Country of the check."
                }
            },
            "type": "object",
            "description": "Identification of check as payment instrument."
        },
        "CheckType1Code": {
            "enum": [
                "BANK",
                "BUSI",
                "GOVC",
                "PAYR",
                "PERS"
            ],
            "type": "string",
            "description": "Type of bank check. \nCode: PERS: \t PersonalCheck: \tDefinition: The check belongs to an individual. \nCode: BUSI: \t BusinessCheck: \tDefinition: The check belongs to a Company or a professional entity. \nCode: BANK: \t BankCheck: \tDefinition: The check is guaranteed by a bank. \nCode: PAYR: \t PayrollCheck: \tDefinition: Check issued by a company for the employees. \nCode: GOVC: \t GovernmentCheck: \tDefinition: Check issued by Government."
        },
        "Commission18": {
            "additionalProperties": false,
            "properties": {
                "AdditionalInformation": {
                    "$ref": "#/$defs/Max350Text",
                    "description": "Additional information about the type of markup."
                },
                "Rate": {
                    "$ref": "#/$defs/PercentageRate",
                    "description": "Commission expressed as a percentage."
                }
            },
            "required": [
                "Rate"
            ],
            "type": "object",
            "description": "Amount of money due to a party as compensation for a service."
        },
        "Commission19": {
            "additionalProperties": false,
            "properties": {
                "AdditionalInformation": {
                    "$ref": "#/$defs/Max350Text",
                    "description": "Additional information about the type of commission."
                },
                "Amount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Commission expressed as an amount of money."
                }
            },
            "required": [
                "Amount"
            ],
            "type": "object",
            "description": "Amount of money due to a party as compensation for a service."
        },
        "CommunicationAddress9": {
            "additionalProperties": false,
            "properties": {
                "AdditionalContactInformation": {
                    "$ref": "#/$defs/Max256Text",
                    "description": "Additional information used to facilitate contact with the card acceptor, for instance sales agent name, dispute manager name."
                },
                "CustomerService": {
                    "$ref": "#/$defs/PhoneNumber",
                    "description": "Phone number of the customer service."
                },
                "Email": {
                    "$ref": "#/$defs/Max256Text",
                    "description": "Address for electronic mail (e-mail)."
                },
                "Phone": {
                    "$ref": "#/$defs/PhoneNumber",
                    "description": "Collection of information that identifies a phone number, as defined by telecom services."
                },
                "PostalAddress": {
                    "$ref": "#/$defs/PostalAddress22",
                    "description": "Postal address of the entity."
                },
                "URLAddress": {
                    "$ref": "#/$defs/Max256Text",
                    "description": "Address for the Universal Resource Locator (URL), for example used over the www (HTTP) service."
                }
            },
            "type": "object",
            "description": "Communication information."
        },
        "CommunicationCharacteristics5": {
            "additionalProperties": false,
            "properties": {
                "Active": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Communication hardware is activated."
                },
                "CommunicationType": {
                    "$ref": "#/$defs/POICommunicationType2Code",
                    "description": "Type of low level communication."
                },
                "Parameters": {
                    "$ref": "#/$defs/NetworkParameters7",
                    "description": "Network parameters of the communication link."
                },
                "PhysicalInterface": {
                    "$ref": "#/$defs/PhysicalInterfaceParameter1",
                    "description": "Physical Interface used by the communication link."
                },
                "RemoteParty": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/PartyType7Code"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/PartyType7Code"
                            },
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "description": "Entity that communicate with the current component, using this communication device."
                }
            },
            "required": [
                "Active",
                "CommunicationType",
                "RemoteParty"
            ],
            "type": "object",
            "description": "Low level communication of the hardware or software component toward another component or an external entity."
        },
        "ContentInformationType38": {
            "additionalProperties": false,
            "properties": {
                "AuthenticatedData": {
                    "$ref": "#/$defs/AuthenticatedData10",
                    "description": "Data protection by a message authentication code (MAC)."
                },
                "ContentType": {
                    "$ref": "#/$defs/ContentType2Code",
                    "description": "Type of data protection."
                },
                "SignedData": {
                    "$ref": "#/$defs/SignedData9",
                    "description": "Data protected by a digital signatures."
                }
            },
            "required": [
                "ContentType"
            ],
            "type": "object",
            "description": "General cryptographic message syntax (CMS) containing data. protected by a MAC or a digital signature."
        },
        "ContentInformationType39": {
            "additionalProperties": false,
            "properties": {
                "AuthenticatedData": {
                    "$ref": "#/$defs/AuthenticatedData10",
                    "description": "Data protection by a message authentication code (MAC)."
                },
                "ContentType": {
                    "$ref": "#/$defs/ContentType2Code",
                    "description": "Type of data protection."
                },
                "DigestedData": {
                    "$ref": "#/$defs/DigestedData6",
                    "description": "Data protected by a digest."
                },
                "EnvelopedData": {
                    "$ref": "#/$defs/EnvelopedData11",
                    "description": "Data protection by encryption, with a session key."
                },
                "SignedData": {
                    "$ref": "#/$defs/SignedData9",
                    "description": "Data protected by a digital signatures."
                }
            },
            "required": [
                "ContentType"
            ],
            "type": "object",
            "description": "General cryptographic message syntax (CMS) containing protected data."
        },
        "ContentInformationType40": {
            "additionalProperties": false,
            "properties": {
                "ContentType": {
                    "$ref": "#/$defs/ContentType2Code",
                    "description": "Type of data protection."
                },
                "EnvelopedData": {
                    "$ref": "#/$defs/EnvelopedData11",
                    "description": "Data protection by encryption or by a digital envelope, with an encryption key."
                }
            },
            "required": [
                "ContentType",
                "EnvelopedData"
            ],
            "type": "object",
            "description": "General cryptographic message syntax (CMS) containing encrypted data."
        },
        "ContentType2Code": {
            "enum": [
                "DATA",
                "SIGN",
                "EVLP",
                "DGST",
                "AUTH"
            ],
            "type": "string",
            "description": "Identification of the type of a Cryptographic Message Syntax (CMS) data structure. \nCode: DATA: \t PlainData: \tDefinition: Generic, non cryptographic, or unqualified data content - (ASN.1 Object Identifier: id-data). \nCode: SIGN: \t SignedData: \tDefinition: Digital signature - (ASN.1 Object Identifier: id-signedData). \nCode: EVLP: \t EnvelopedData: \tDefinition: Encrypted data, with encryption key - (ASN.1 Object Identifier: id-envelopedData). \nCode: DGST: \t DigestedData: \tDefinition: Message digest - (ASN.1 Object Identifier: id-digestedData). \nCode: ECRP: \t EncryptedData: \tDefinition: Encrypted data - (ASN.1 Object Identifier: id-encryptedData). \nCode: AUTH: \t AuthenticatedData: \tDefinition: MAC (Message Authentication Code), with encryption key - (ASN.1 Object Identifier: id-ct-authData). \nCode: IFSE: \t ISOFinancialServicesDataEncryption: \tDefinition: General data encryption that conforms to the ISO 13492 standard."
        },
        "CountryCode": {
            "pattern": "^([A-Z]{2,2})$",
            "type": "string",
            "description": "Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code)."
        },
        "Creditor4": {
            "additionalProperties": false,
            "properties": {
                "Creditor": {
                    "$ref": "#/$defs/PartyIdentification178Choice",
                    "description": "Party that receives an amount of money from the debtor. In the context of the payment model, the creditor is also the credit account owner."
                },
                "RegistrationIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Reference assigned to a creditor by its financial institution, or relevant authority, authorising the creditor to take part in a direct debit scheme."
                }
            },
            "required": [
                "Creditor"
            ],
            "type": "object",
            "description": "Information about the creditor."
        },
        "CryptographicKey18": {
            "additionalProperties": false,
            "properties": {
                "ActivationDate": {
                    "$ref": "#/$defs/ISODateTime",
                    "description": "Date and time on which the key must be activated."
                },
                "AdditionalIdentification": {
                    "$ref": "#/$defs/Max35Binary",
                    "description": "Additional identification of the key.\r\nUsage\r\nFor derived unique key per transaction (DUKPT) keys, the key serial number (KSN) with the 21 bits of the transaction counter set to zero."
                },
                "AdditionalManagementInformation": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/GenericInformation1"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/GenericInformation1"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Additional Information needed by the receiver to securely process the management of the security element."
                },
                "ComponentWithAuthorisedAccess": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/GenericIdentification186"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/GenericIdentification186"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Identification of components which are allowed to access this cryptographic key."
                },
                "DeactivationDate": {
                    "$ref": "#/$defs/ISODateTime",
                    "description": "Date and time on which the key must be deactivated."
                },
                "Function": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/KeyUsage1Code"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/KeyUsage1Code"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Allowed usage of the key."
                },
                "Identification": {
                    "$ref": "#/$defs/Max350Text",
                    "description": "Name of the cryptographic key."
                },
                "ItemNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Hierarchical identification of a key inside all the key system. It is composed of all item numbers of the upper level components, separated by the '.' character, ended by the item number of the current component."
                },
                "KeyCheckValue": {
                    "$ref": "#/$defs/Max35Binary",
                    "description": "Value for checking a cryptographic key security parameter."
                },
                "KeyValue": {
                    "$ref": "#/$defs/ContentInformationType39",
                    "description": "Encrypted cryptographic key."
                },
                "Name": {
                    "$ref": "#/$defs/Max256Text",
                    "description": "Name of the Cryptographic Element."
                },
                "ProtectedComponentWithAuthorisedAccess": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ContentInformationType39"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/ContentInformationType39"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Protection of Identification of components which are allowed to access this cryptographic key."
                },
                "SecurityProfile": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the set of security elements to which this element belongs."
                },
                "Type": {
                    "$ref": "#/$defs/CryptographicKeyType3Code",
                    "description": "Type of algorithm used by the cryptographic key."
                },
                "Version": {
                    "$ref": "#/$defs/Max256Text",
                    "description": "Version of the cryptographic key."
                }
            },
            "required": [
                "Identification",
                "Version"
            ],
            "type": "object",
            "description": "Cryptographic Key."
        },
        "CryptographicKeyType3Code": {
            "enum": [
                "AES2",
                "EDE3",
                "DKP9",
                "AES9",
                "AES5",
                "EDE4"
            ],
            "type": "string",
            "description": "Codes for qualifying the type of cryptographic keys. \nCode: DESC: \t DES: \tDefinition: Data encryption standard. \nCode: AESC: \t AES: \tDefinition: Advanced encryption standard. \nCode: RSAC: \t RSA: \tDefinition: Rivest, Shamir and Adleman. \nCode: ECCC: \t ECC: \tDefinition: Elliptic-curve cryptography. \nCode: AES2: \t AES128: \tDefinition: AES (Advanced Encryption Standard) 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). \nCode: EDE3: \t DES112: \tDefinition: Data encryption standard key of 112 bits (without the parity bits). \nCode: DKP9: \t DUKPT2009: \tDefinition: DUKPT (Derived Unique Key Per Transaction) key, as specified in ANSI X9.24-2009 Annex A. \nCode: AES9: \t AES192: \tDefinition: AES (Advanced Encryption Standard) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard). \nCode: AES5: \t AES256: \tDefinition: AES (Advanced Encryption Standard) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard). \nCode: EDE4: \t DES168: \tDefinition: Data encryption standard key of 168 bits (without the parity bits). \nCode: APPL: \t Application: \tDefinition: Key used to protect application information. \nCode: DYNC: \t Dynamic: \tDefinition: Any cryptographic key that can be downloaded. \nCode: DATA: \t Data: \tDefinition: Key used to protect data in the messages. \nCode: KENC: \t KeyEncryption: \tDefinition: Key used to encrypt other keys. \nCode: WRKG: \t Working: \tDefinition: Temporary key used to download keys. \nCode: PINK: \t PIN: \tDefinition: Key used to encrypt a PIN. \nCode: MACK: \t MAC: \tDefinition: Key used to generate the MAC of a message. \nCode: DKAE: \t DUKPTAES: \tDefinition: DUKPT AES (Derived Unique Key Per Transaction) algorithm. \nCode: UKPT: \t UKPT: \tDefinition: UKPT (Unique Key Per Transaction). Encryption key using Triple DES for encryption with a double length key (112 bits). FIPS PUB 46-3. \nCode: UKA8: \t UKPTAES128: \tDefinition: UKPT (Unique Key Per Transaction). Encryption key using AES (Advanced Encryption Standard) with a 128 bits length key. \r\nFIPS 197 - 6 November 2001). \nCode: UKA6: \t UKPTAES256: \tDefinition: UKPT (Unique Key Per Transaction). Encryption key using AES (Advanced Encryption Standard) with a  256 bits length key. \r\nFIPS 197 - 6 November 2001). \nCode: ISKW: \t ISO20038KeyWrap: \tDefinition: ISO 20038 - Banking and related financial services - Key wrap using symmetric keys. Method using symmetric keys as the wrapping algorithm."
        },
        "CurrencyConversion29": {
            "additionalProperties": false,
            "properties": {
                "ApplicableBinRange": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/BinRange1"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/BinRange1"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Range of Bin for which the conversion is possible."
                },
                "CurrencyConversionIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the currency conversion operation for the service provider."
                },
                "CommissionDetails": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Commission19"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Commission19"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Commission or additional charges made as part of a currency conversion."
                },
                "DeclarationDetails": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ActionMessage11"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/ActionMessage11"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Card scheme declaration (disclaimer) to present to the cardholder."
                },
                "MarkUpDetails": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Commission18"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Commission18"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Markup made as part of a currency conversion."
                },
                "InvertedExchangeRate": {
                    "$ref": "#/$defs/PercentageRate",
                    "description": "Exchange rate, expressed as a percentage, applied to convert the resulting amount into the original amount."
                },
                "OriginalAmount": {
                    "$ref": "#/$defs/OriginalAmountDetails1",
                    "description": "Original amount in the source currency."
                },
                "QuotationDate": {
                    "$ref": "#/$defs/ISODateTime",
                    "description": "Date and time at which the exchange rate has been quoted."
                },
                "ResultingAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Amount converted in the target currency, including additional charges."
                },
                "SourceCurrency": {
                    "$ref": "#/$defs/CurrencyDetails2",
                    "description": "Currency from which the amount is converted (ISO 4217, 3 alphanumeric characters)."
                },
                "TargetCurrency": {
                    "$ref": "#/$defs/CurrencyDetails3",
                    "description": "Currency into which the amount is converted (ISO 4217, 3 alphanumeric characters)."
                },
                "ValidFrom": {
                    "$ref": "#/$defs/ISODateTime",
                    "description": "Specifies when the currency conversion could start."
                },
                "ValidUntil": {
                    "$ref": "#/$defs/ISODateTime",
                    "description": "Validity limit of the exchange rate."
                },
                "ExchangeRate": {
                    "$ref": "#/$defs/PercentageRate",
                    "description": "Exchange rate, expressed as a percentage, applied to convert the original amount into the resulting amount."
                }
            },
            "required": [
                "SourceCurrency",
                "TargetCurrency",
                "ExchangeRate"
            ],
            "type": "object",
            "description": "Conversion between the currency of a card acceptor and the currency of a card issuer, provided by a dedicated service provider. The currency conversion has to be accepted by the cardholder."
        },
        "CurrencyConversion30": {
            "additionalProperties": false,
            "properties": {
                "AcceptedByCardholder": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "True if the cardholder has accepted the currency conversion that the acquirer has proposed."
                },
                "Conversion": {
                    "$ref": "#/$defs/CurrencyConversion29",
                    "description": "Conversion between the currency of a card acceptor and the currency of a cardholder, provided by a dedicated service provider."
                }
            },
            "type": "object",
            "description": "Conversion between the currency of a card acceptor and the currency of a card issuer, provided by a dedicated service provider."
        },
        "CurrencyConversion31": {
            "additionalProperties": false,
            "properties": {
                "ConversionDetails": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CurrencyConversion29"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/CurrencyConversion29"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Information about the conversion of currency."
                },
                "Result": {
                    "$ref": "#/$defs/CurrencyConversionResponse3Code",
                    "description": "Result of a requested currency conversion."
                },
                "ResultReason": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Plain text explaining the result of the currency conversion request."
                }
            },
            "required": [
                "Result"
            ],
            "type": "object",
            "description": "Conversion between the currency of a card acceptor and the currency of a card issuer, provided by a dedicated service provider."
        },
        "CurrencyConversionResponse3Code": {
            "enum": [
                "ODCC",
                "DCCA",
                "ICRD",
                "IMER",
                "IPRD",
                "IRAT",
                "NDCC",
                "REST",
                "CATG"
            ],
            "type": "string",
            "description": "Result of a requested currency conversion. \nCode: IMER: \t InvalidMerchant: \tDefinition: The card acceptor has not been recognised. \nCode: ICRD: \t InvalidCard: \tDefinition: The card is not valid for dynamic currency conversion. \nCode: IPRD: \t InvalidProduct: \tDefinition: Dynamic currency conversion service cannot be offered for this card product. \nCode: IRAT: \t NoRate: \tDefinition: Exchange rates are not available. \nCode: ODCC: \t Allowed: \tDefinition: Dynamic currency conversion may be offered to the cardholder. \nCode: DCCA: \t Assumed: \tDefinition: Transaction authorised with dynamic currency conversion. \nCode: NDCC: \t NotAvailable: \tDefinition: Dynamic currency conversion is not available for other reason. \nCode: IATM: \t InvalidATM: \tDefinition: The ATM is not valid for dynamic currency conversion. \nCode: IAMG: \t InvalidATMManager: \tDefinition: The ATM manager is not valid for dynamic currency conversion. \nCode: REST: \t Restriction: \tDefinition: Conversion accepted for the requested amount exclusively. \nCode: CATG: \t Catalogue: \tDefinition: Conversion accepted for a range of amounts."
        },
        "CurrencyDetails2": {
            "additionalProperties": false,
            "properties": {
                "AlphaCode": {
                    "$ref": "#/$defs/ActiveCurrencyCode",
                    "description": "Alpha currency code (ISO 4217, 3 alphanumeric characters)."
                },
                "Decimal": {
                    "$ref": "#/$defs/Number",
                    "description": "Maximal number of digits after the decimal separator for the currency."
                },
                "Name": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Full name of the currency."
                },
                "NumericCode": {
                    "$ref": "#/$defs/Exact3NumericText",
                    "description": "Numeric currency code (ISO 4217, 3 numeric characters)."
                }
            },
            "type": "object",
            "description": "Details of a currency."
        },
        "CurrencyDetails3": {
            "additionalProperties": false,
            "properties": {
                "AlphaCode": {
                    "$ref": "#/$defs/ActiveCurrencyCode",
                    "description": "Alpha currency code (ISO 4217, 3 alphanumeric characters)."
                },
                "Decimal": {
                    "$ref": "#/$defs/Number",
                    "description": "Maximal number of digits after the decimal separator for the currency."
                },
                "Name": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Full name of the currency."
                },
                "NumericCode": {
                    "$ref": "#/$defs/Exact3NumericText",
                    "description": "Numeric currency code (ISO 4217, 3 numeric characters)."
                }
            },
            "required": [
                "AlphaCode",
                "Decimal",
                "NumericCode"
            ],
            "type": "object",
            "description": "Details of a currency."
        },
        "CustomerDevice3": {
            "additionalProperties": false,
            "properties": {
                "Identification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identifier of the component."
                },
                "Provider": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Provider of the component."
                },
                "Type": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Type of component."
                }
            },
            "type": "object",
            "description": "Device used by the customer to perform the payment."
        },
        "CustomerOrder1": {
            "additionalProperties": false,
            "properties": {
                "AccessedBy": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of an entity accessing data to perform an operation."
                },
                "AdditionalInformation": {
                    "$ref": "#/$defs/Max1025Text",
                    "description": "Unqualified information related to customer order."
                },
                "Currency": {
                    "$ref": "#/$defs/ActiveCurrencyCode",
                    "description": "Currency of monetary amount."
                },
                "CustomerOrderIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of a customer order."
                },
                "CurrentAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Total amount of all completed transactions of a customer order."
                },
                "EndDate": {
                    "$ref": "#/$defs/ISODateTime",
                    "description": "Date time of the end of an operation."
                },
                "ForecastedAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Initial or global amount of the order."
                },
                "OpenOrderState": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Specifies if a customer order is currently open."
                },
                "SaleReferenceIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of a Sale transaction for a sequence of related POI transactions."
                },
                "StartDate": {
                    "$ref": "#/$defs/ISODateTime",
                    "description": "Date time of the beginning of an operation."
                },
                "Unit": {
                    "$ref": "#/$defs/AmountUnit1Code",
                    "description": "Unit of amount."
                }
            },
            "required": [
                "CustomerOrderIdentification",
                "ForecastedAmount",
                "SaleReferenceIdentification",
                "StartDate"
            ],
            "type": "object",
            "description": "Customer order attached to a customer, recorded in the POI system."
        },
        "DateAndPlaceOfBirth1": {
            "additionalProperties": false,
            "properties": {
                "BirthDate": {
                    "$ref": "#/$defs/ISODate",
                    "description": "Date on which a person is born."
                },
                "CityOfBirth": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "City where a person was born."
                },
                "CountryOfBirth": {
                    "$ref": "#/$defs/CountryCode",
                    "description": "Country where a person was born."
                },
                "ProvinceOfBirth": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Province where a person was born."
                }
            },
            "required": [
                "BirthDate",
                "CityOfBirth",
                "CountryOfBirth"
            ],
            "type": "object",
            "description": "Date and place of birth of a person."
        },
        "Debtor4": {
            "additionalProperties": false,
            "properties": {
                "AccountIdentification": {
                    "$ref": "#/$defs/CashAccountIdentification7Choice",
                    "description": "Unique and unambiguous identification for the account between the account owner and the account servicer."
                },
                "Debtor": {
                    "$ref": "#/$defs/PartyIdentification178Choice",
                    "description": "Party that owes an amount of money to the (ultimate) creditor. In the context of the payment model, the debtor is also the debit account owner."
                }
            },
            "type": "object",
            "description": "Information about the debtor."
        },
        "DecimalNumber": {
            "type": "number",
            "description": "Number of objects represented as a decimal number, for example 0.75 or 45.6."
        },
        "DetailedAmount15": {
            "additionalProperties": false,
            "properties": {
                "AmountGoodsAndServices": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Amount of purchase goods and services without tax."
                },
                "CashBack": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Cash-back amount."
                },
                "Fees": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DetailedAmount4"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/DetailedAmount4"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Fees amount."
                },
                "Gratuity": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Gratuity amount."
                },
                "Rebate": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DetailedAmount4"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/DetailedAmount4"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Global rebate of the transaction. This amount is counted as a negative amount."
                },
                "Surcharge": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DetailedAmount4"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/DetailedAmount4"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Additional charge paid by the cardholder. For example airline credit card surcharge."
                },
                "ValueAddedTax": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DetailedAmount4"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/DetailedAmount4"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Value added tax amount."
                }
            },
            "type": "object",
            "description": "Detailed amounts associated with the total amount of transaction."
        },
        "DetailedAmount21": {
            "additionalProperties": false,
            "properties": {
                "Amount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Amount value."
                },
                "CardDataEntryMode": {
                    "$ref": "#/$defs/CardDataReading8Code",
                    "description": "Card data entry mode for the related payment."
                },
                "DateTime": {
                    "$ref": "#/$defs/ISODateTime",
                    "description": "Date and time of the payment."
                },
                "ICCRelatedData": {
                    "$ref": "#/$defs/Max10000Binary",
                    "description": "Data of an integrated circuit card application for the related payment."
                },
                "Label": {
                    "$ref": "#/$defs/Max140Text",
                    "description": "Short description of the amount to display or print."
                }
            },
            "required": [
                "Amount",
                "DateTime"
            ],
            "type": "object",
            "description": "Detailed amounts associated with the total amount of transaction."
        },
        "DetailedAmount4": {
            "additionalProperties": false,
            "properties": {
                "Amount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Amount value."
                },
                "Label": {
                    "$ref": "#/$defs/Max140Text",
                    "description": "Short description of the amount to display or print."
                }
            },
            "required": [
                "Amount"
            ],
            "type": "object",
            "description": "Detailed amounts associated with the total amount of transaction."
        },
        "DigestedData6": {
            "additionalProperties": false,
            "properties": {
                "Digest": {
                    "$ref": "#/$defs/Max140Binary",
                    "description": "Result of data-digesting process."
                },
                "DigestAlgorithm": {
                    "$ref": "#/$defs/AlgorithmIdentification36",
                    "description": "Identification of the digest algorithm."
                },
                "EncapsulatedContent": {
                    "$ref": "#/$defs/EncapsulatedContent3",
                    "description": "Data on which the digest is computed."
                },
                "Version": {
                    "$ref": "#/$defs/Number",
                    "description": "Version of the data structure."
                }
            },
            "required": [
                "Digest",
                "DigestAlgorithm",
                "EncapsulatedContent"
            ],
            "type": "object",
            "description": "Digest computed on the identified data."
        },
        "DisplayCapabilities4": {
            "additionalProperties": false,
            "properties": {
                "AvailableFormat": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/OutputFormat1Code"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/OutputFormat1Code"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Available message format."
                },
                "AvailableLanguage": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/LanguageCode"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/LanguageCode"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Available language for the message. Reference ISO 639-1 (alpha-2) et ISO 639-2 (alpha-3)."
                },
                "Destination": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/UserInterface4Code"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/UserInterface4Code"
                            },
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "description": "Destination of the message to present."
                },
                "LineWidth": {
                    "$ref": "#/$defs/Number",
                    "description": "Number of columns of the display or printer."
                },
                "NumberOfLines": {
                    "$ref": "#/$defs/Number",
                    "description": "Number of lines of the display."
                }
            },
            "required": [
                "Destination"
            ],
            "type": "object",
            "description": "Capabilities of the display components performing the transaction."
        },
        "Document": {
            "additionalProperties": false,
            "properties": {
                "SaleToPOIServiceRequestV06": {
                    "$ref": "#/$defs/SaleToPOIServiceRequestV06",
                    "description": "This SaleToPOIServiceRequest message is sent by a sale system to trig a financial service on POI system."
                }
            },
            "required": [
                "SaleToPOIServiceRequestV06"
            ],
            "type": "object",
            "description": "General information that unambiguously identifies a document, such as identification number and issue date time."
        },
        "EnableServiceRequest6": {
            "additionalProperties": false,
            "properties": {
                "DisplayOutput": {
                    "$ref": "#/$defs/ActionMessage11",
                    "description": "Prompt or welcome message."
                },
                "ServicesEnabled": {
                    "$ref": "#/$defs/RetailerService2Code",
                    "description": "Services enabled before the start-up of a transaction."
                },
                "TransactionAction": {
                    "$ref": "#/$defs/TransactionAction1Code",
                    "description": "Action to realise on a transaction."
                }
            },
            "required": [
                "TransactionAction"
            ],
            "type": "object",
            "description": "Data to request to enable a service."
        },
        "EncapsulatedContent3": {
            "additionalProperties": false,
            "properties": {
                "Content": {
                    "$ref": "#/$defs/Max100KBinary",
                    "description": "Actual data to authenticate."
                },
                "ContentType": {
                    "$ref": "#/$defs/ContentType2Code",
                    "description": "Type of data which have been authenticated."
                }
            },
            "required": [
                "ContentType"
            ],
            "type": "object",
            "description": "Data to authenticate."
        },
        "EncryptedContent7": {
            "additionalProperties": false,
            "properties": {
                "ContentEncryptionAlgorithm": {
                    "$ref": "#/$defs/AlgorithmIdentification32",
                    "description": "Algorithm used to encrypt the data."
                },
                "ContentType": {
                    "$ref": "#/$defs/ContentType2Code",
                    "description": "Type of data which have been encrypted."
                },
                "EncryptedData": {
                    "$ref": "#/$defs/Max100KBinary",
                    "description": "Encrypted data, result of the content encryption."
                }
            },
            "required": [
                "ContentType",
                "EncryptedData"
            ],
            "type": "object",
            "description": "Encrypted data with an encryption key."
        },
        "EncryptionFormat2Code": {
            "enum": [
                "TR31",
                "TR34",
                "I238"
            ],
            "type": "string",
            "description": "Format of data before encryption, if the format is not plaintext or implicit. \nCode: TR31: \t TR31: \tDefinition: Format of a cryptographic key specified by the ANSI X9 TR-31 standard. \nCode: TR34: \t TR34: \tDefinition: Format of a cryptographic key specified by the ANSI X9 TR-34 standard. \nCode: I238: \t ISO20038KeyWrap: \tDefinition: Format of a cryptographic key specified by the ISO20038 standard. \nCode: CBCE: \t CBC: \tDefinition: Cipher Block Chaining mode of encryption \nCode: CTCE: \t CTCE: \tDefinition: CTC encryption mode."
        },
        "EnvelopedData11": {
            "additionalProperties": false,
            "properties": {
                "EncryptedContent": {
                    "$ref": "#/$defs/EncryptedContent7",
                    "description": "Data protection by encryption (digital envelope), with an encryption key."
                },
                "OriginatorInformation": {
                    "$ref": "#/$defs/OriginatorInformation1",
                    "description": "Provides certificates of the originator."
                },
                "Recipient": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Recipient15Choice"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Recipient15Choice"
                            },
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "description": "Session key or identification of the protection key used by the recipient."
                },
                "Version": {
                    "$ref": "#/$defs/Number",
                    "description": "Version of the data structure."
                }
            },
            "required": [
                "Recipient"
            ],
            "type": "object",
            "description": "Encrypted data with encryption key."
        },
        "Exact3AlphaNumericText": {
            "pattern": "^([0-9A-Za-z]{3,3})$",
            "type": "string",
            "description": "Specifies an alphanumeric string with a length of exact 3 characters."
        },
        "Exact3NumericText": {
            "pattern": "^([0-9]{3,3})$",
            "type": "string",
            "description": "Specifies a numeric string with an exact length of 3 digits."
        },
        "Exact4NumericText": {
            "pattern": "^([0-9]{4,4})$",
            "type": "string",
            "description": "Specifies a numeric string with an exact length of 4 digits."
        },
        "Exemption1Code": {
            "enum": [
                "LOWA",
                "MINT",
                "RECP",
                "SCPE",
                "SCAD",
                "TRAE",
                "PKGE",
                "TMBE"
            ],
            "type": "string",
            "description": "Strong customer authentication exemption. \nCode: MINT: \t MerchantInitiatedTransaction: \tDefinition: Transaction is initiated by the Card Acceptor. \nCode: RECP: \t RecurringPayment: \tDefinition: Transaction is one of a series of recurring payment. \nCode: LOWA: \t LowAmountExemption: \tDefinition: Transaction's amount is low and could be processed without strong customer authentication. \nCode: TRAE: \t TransactionRiskAnalysisExemption: \tDefinition: According to the transaction risk analysis the strong customer authentication is not mandated. \nCode: TMBE: \t TrustedMerchantBeneficiaryExemption: \tDefinition: Cardholder has enrolled the Card Acceptor in the exemption list of strong customer authentication. \nCode: SCAD: \t StrongCustomerAuthenticationDelegation: \tDefinition: Card Acceptor is a strong customer authentication delegate. \nCode: SCPE: \t SecureCorporatePaymentExemption: \tDefinition: Transaction is a secure corporate payment. \nCode: PKGE: \t TransportFareOrParkingFeeUnattendedPaymentExemption: \tDefinition: Payment is processed in a environment where strong customer authentication is inappropriate. \nCode: PAAC: \t PaymentAccountExemption: \tDefinition: Payment account information exemption. \nCode: CTLS: \t ContactlessExemption: \tDefinition: Contactless payment at point of sale exemption. \nCode: TRSP: \t TransferSamePersonExemption: \tDefinition: Credit transfer between accounts held by the same natural or legal person exemption."
        },
        "ExternallyDefinedData5": {
            "additionalProperties": false,
            "properties": {
                "Identification": {
                    "$ref": "#/$defs/Max1025Text",
                    "description": "Identification of the set of data to exchange."
                },
                "ProtectedValue": {
                    "$ref": "#/$defs/ContentInformationType39",
                    "description": "Protection of the values to exchange."
                },
                "Type": {
                    "$ref": "#/$defs/Max1025Text",
                    "description": "Identification of the standard used to encode the values to exchange."
                },
                "Value": {
                    "$ref": "#/$defs/Max100KBinary",
                    "description": "Data to exchange according to an external standard."
                }
            },
            "required": [
                "Identification"
            ],
            "type": "object",
            "description": "Data container to exchange data elements defined by another standard."
        },
        "Frequency3Code": {
            "enum": [
                "YEAR",
                "MNTH",
                "QURT",
                "MIAN",
                "WEEK",
                "DAIL",
                "TEND"
            ],
            "type": "string",
            "description": "Specifies the regularity of an event. \nCode: YEAR: \t Annual: \tDefinition: Event takes place every year or once a year. \nCode: MNTH: \t Monthly: \tDefinition: Event takes place every month or once a month. \nCode: QURT: \t Quarterly: \tDefinition: Event takes place every three months or four times a year. \nCode: MIAN: \t SemiAnnual: \tDefinition: Event takes place every six months or two times a year. \nCode: WEEK: \t Weekly: \tDefinition: Event takes place once a week. \nCode: DAIL: \t Daily: \tDefinition: Event takes place every day. \nCode: ADHO: \t Adhoc: \tDefinition: Event takes place on request or as necessary. \nCode: INDA: \t IntraDay: \tDefinition: Event takes place several times a day. \nCode: OVNG: \t Overnight: \tDefinition: Event takes place overnight. \nCode: TEND: \t TenDays: \tDefinition: Event takes place every ten business days. \nCode: FRTN: \t Fortnightly: \tDefinition: Event takes place every two weeks. \nCode: MOVE: \t TriggeredByMovement: \tDefinition: Event takes place at the end of the day if there was a movement on the account, otherwise nothing is sent that day. \nCode: NEVR: \t Never: \tDefinition: Event does never take place. \nCode: RATE: \t Rate: \tDefinition: Event takes place based on a change of a rate. \nCode: CRED: \t OnCreditEvent: \tDefinition: Event occurs due to a credit event occurring for an issuer. \nCode: UPFR: \t Upfront: \tDefinition: Event that takes place at the initiation of a trade or agreement. \nCode: EXPI: \t OnExpiry: \tDefinition: Event occurs on expiry of a financial contract. \nCode: HOUL: \t Hourly: \tDefinition: Event takes place every hours. \nCode: TRIL: \t TriAnnual: \tDefinition: Event takes place every four months or three times a year. \nCode: BIMN: \t Bimonthly: \tDefinition: Event takes place every two months or six times a year. \nCode: ODMD: \t OnDemand: \tDefinition: Event takes place on demand. \nCode: SHFT: \t Shift: \tDefinition: Event associated with a shift. \nCode: TWWK: \t TwiceAWeek: \tDefinition: Two times a week"
        },
        "GenericIdentification176": {
            "additionalProperties": false,
            "properties": {
                "Country": {
                    "$ref": "#/$defs/Min2Max3AlphaText",
                    "description": "Country of the entity (ISO 3166-1 alpha-2 or alpha-3)."
                },
                "Identification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the entity."
                },
                "Issuer": {
                    "$ref": "#/$defs/PartyType33Code",
                    "description": "Entity assigning the identification (for example merchant, acceptor, acquirer, or tax authority)."
                },
                "ShortName": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Name of the entity."
                },
                "Type": {
                    "$ref": "#/$defs/PartyType33Code",
                    "description": "Type of identified entity."
                }
            },
            "required": [
                "Identification"
            ],
            "type": "object",
            "description": "Identification of an entity."
        },
        "GenericIdentification177": {
            "additionalProperties": false,
            "properties": {
                "Country": {
                    "$ref": "#/$defs/Min2Max3AlphaText",
                    "description": "Country of the entity (ISO 3166-1 alpha-2 or alpha-3)."
                },
                "Geolocation": {
                    "$ref": "#/$defs/Geolocation1",
                    "description": "Location of the entity."
                },
                "Identification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the entity."
                },
                "Issuer": {
                    "$ref": "#/$defs/PartyType33Code",
                    "description": "Entity assigning the identification (for example merchant, acceptor, acquirer, or tax authority)."
                },
                "RemoteAccess": {
                    "$ref": "#/$defs/NetworkParameters7",
                    "description": "Access information to reach the target host."
                },
                "ShortName": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Name of the entity."
                },
                "Type": {
                    "$ref": "#/$defs/PartyType33Code",
                    "description": "Type of identified entity."
                }
            },
            "required": [
                "Identification"
            ],
            "type": "object",
            "description": "Identification of an entity."
        },
        "GenericIdentification186": {
            "additionalProperties": false,
            "properties": {
                "Identification": {
                    "$ref": "#/$defs/Max256Text",
                    "description": "Identification of an element in the system."
                },
                "Type": {
                    "$ref": "#/$defs/PartyType7Code",
                    "description": "Type of actor in the system."
                }
            },
            "required": [
                "Identification",
                "Type"
            ],
            "type": "object",
            "description": "Information to identify an element in the system."
        },
        "GenericIdentification32": {
            "additionalProperties": false,
            "properties": {
                "Identification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the entity."
                },
                "Issuer": {
                    "$ref": "#/$defs/PartyType4Code",
                    "description": "Entity assigning the identification (for example merchant, acceptor, acquirer, or tax authority)."
                },
                "ShortName": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Name of the entity."
                },
                "Type": {
                    "$ref": "#/$defs/PartyType3Code",
                    "description": "Type of identified entity."
                }
            },
            "required": [
                "Identification"
            ],
            "type": "object",
            "description": "Identification of an entity."
        },
        "GenericIdentification36": {
            "additionalProperties": false,
            "properties": {
                "Identification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Proprietary information, often a code, issued by the data source scheme issuer."
                },
                "Issuer": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Entity that assigns the identification."
                },
                "SchemeName": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Short textual description of the scheme."
                }
            },
            "required": [
                "Identification",
                "Issuer"
            ],
            "type": "object",
            "description": "Identification using a proprietary scheme."
        },
        "GenericIdentification4": {
            "additionalProperties": false,
            "properties": {
                "Identification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identifier issued to a person for which no specific identifier has been defined."
                },
                "IdentificationType": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Specifies the nature of the identifier.\nUsage: IdentificationType is used to specify what kind of identifier is used. It should be used in case the identifier is different from the identifiers listed in the pre-defined identifier list."
                }
            },
            "required": [
                "Identification",
                "IdentificationType"
            ],
            "type": "object",
            "description": "Information related to an identification, eg, party identification or account identification."
        },
        "GenericIdentification48": {
            "additionalProperties": false,
            "properties": {
                "Identification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Proprietary information, often a code, issued by the data source scheme issuer."
                },
                "Issuer": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Entity that assigns the identification."
                },
                "Version": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Version of the identification."
                }
            },
            "required": [
                "Identification",
                "Issuer",
                "Version"
            ],
            "type": "object",
            "description": "Information related to an identification."
        },
        "GenericIdentification90": {
            "additionalProperties": false,
            "properties": {
                "Country": {
                    "$ref": "#/$defs/Min2Max3AlphaText",
                    "description": "Country of the entity (ISO 3166-1 alpha-2 or alpha-3)."
                },
                "Identification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the entity."
                },
                "Issuer": {
                    "$ref": "#/$defs/PartyType4Code",
                    "description": "Entity assigning the identification (for example merchant, acceptor, acquirer, or tax authority)."
                },
                "ShortName": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Name of the entity."
                },
                "Type": {
                    "$ref": "#/$defs/PartyType14Code",
                    "description": "Type of identified entity."
                }
            },
            "required": [
                "Type"
            ],
            "type": "object",
            "description": "Identification of an entity."
        },
        "GenericInformation1": {
            "additionalProperties": false,
            "properties": {
                "Name": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Name of the generic information to exchange."
                },
                "Value": {
                    "$ref": "#/$defs/Max140Text",
                    "description": "Value of the generic information to exchange."
                }
            },
            "required": [
                "Name"
            ],
            "type": "object",
            "description": "GenericInformation exchanged with a name and value."
        },
        "Geolocation1": {
            "additionalProperties": false,
            "properties": {
                "GeographicCoordinates": {
                    "$ref": "#/$defs/GeolocationGeographicCoordinates1",
                    "description": "Geographic location specified by geographic coordinates."
                },
                "UTMCoordinates": {
                    "$ref": "#/$defs/GeolocationUTMCoordinates1",
                    "description": "Geographic location specified by UTM coordinates."
                }
            },
            "type": "object",
            "description": "Geographic location specified by geographic or UTM coordinates."
        },
        "GeolocationGeographicCoordinates1": {
            "additionalProperties": false,
            "properties": {
                "Latitude": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Angular distance of a location on the earth south or north of the equator.\r\nThe latitude is measured in degrees, minutes and seconds, following by \"N\" for the north and \"S\" for the south of the equator. For example: 48°51'29\" N the Eiffel Tower latitude."
                },
                "Longitude": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Angular measurement of the distance of a location on the earth east or west of the Greenwich observatory.\r\nThe longitude is measured in degrees, minutes and seconds, following by \"E\" for the east and \"W\" for the west. For example: 23°27'30\" E."
                }
            },
            "required": [
                "Latitude",
                "Longitude"
            ],
            "type": "object",
            "description": "Location on the Earth specified by two numbers representing vertical and horizontal position."
        },
        "GeolocationUTMCoordinates1": {
            "additionalProperties": false,
            "properties": {
                "UTMEastward": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "X-coordinate of the Universal Transverse Mercator \r\ncoordinate system."
                },
                "UTMNorthward": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Y-coordinate of the Universal Transverse Mercator \r\ncoordinate system."
                },
                "UTMZone": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "UTM grid zone combination of the longitude zone (1 to 60) and the latitude band (C to X, excluding I and O)."
                }
            },
            "required": [
                "UTMEastward",
                "UTMNorthward",
                "UTMZone"
            ],
            "type": "object",
            "description": "Location on the Earth specified by the Universal Transverse Mercator coordinate system.\r\nIdentifies the geographic location using the WGS84 ellipsoid spatial reference system."
        },
        "GracePeriod1": {
            "additionalProperties": false,
            "properties": {
                "OtherUnitType": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Grace period other unit type."
                },
                "Time": {
                    "$ref": "#/$defs/Max3NumericText",
                    "description": "Grace period time relative to the grace period unit type. "
                },
                "UnitType": {
                    "$ref": "#/$defs/GracePeriodUnitType1Code",
                    "description": "Grace period unit type."
                }
            },
            "required": [
                "Time",
                "UnitType"
            ],
            "type": "object",
            "description": "Grace period applicable to an instalment plan."
        },
        "GracePeriodUnitType1Code": {
            "enum": [
                "WEKS",
                "PMTS",
                "OTHP",
                "OTHN",
                "MNTH",
                "DAYS"
            ],
            "type": "string",
            "description": "Contains the details of the grace period applicable to the instalment. \nCode: MNTH: \t Months: \tDefinition: Grace period months. \nCode: PMTS: \t Payments: \tDefinition: Grace period payments. \nCode: DAYS: \t Days: \tDefinition: Grace period days. \nCode: WEKS: \t Weeks: \tDefinition: Grace period weeks. \nCode: OTHN: \t OtherNational: \tDefinition: Other National Grace period. \nCode: OTHP: \t OtherPrivate: \tDefinition: Other Private Grace period."
        },
        "Header41": {
            "additionalProperties": false,
            "properties": {
                "CreationDateTime": {
                    "$ref": "#/$defs/ISODateTime",
                    "description": "Date and time at which the message was created."
                },
                "InitiatingParty": {
                    "$ref": "#/$defs/GenericIdentification177",
                    "description": "Unique identification of the partner that has initiated the exchange."
                },
                "MessageFunction": {
                    "$ref": "#/$defs/RetailerMessage1Code",
                    "description": "Identifies the type of process related to the message."
                },
                "ProtocolVersion": {
                    "$ref": "#/$defs/Max6Text",
                    "description": "Version of the acquirer protocol specifications."
                },
                "RecipientParty": {
                    "$ref": "#/$defs/GenericIdentification177",
                    "description": "Unique identification of the partner that is the recipient of the message exchange."
                },
                "Traceability": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Traceability8"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Traceability8"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Identification of partners involved in exchange from the merchant to the issuer, with the relative timestamp of their exchanges."
                },
                "ExchangeIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Unique identification of an exchange occurrence."
                }
            },
            "required": [
                "CreationDateTime",
                "InitiatingParty",
                "MessageFunction",
                "ProtocolVersion",
                "ExchangeIdentification"
            ],
            "type": "object",
            "description": "Set of characteristics related to the protocol."
        },
        "IBAN2007Identifier": {
            "pattern": "^([A-Z]{2,2}[0-9]{2,2}[0-9A-Za-z]{1,30})$",
            "type": "string",
            "description": "The International Bank Account Number is a code used internationally by financial institutions to uniquely identify the account of a customer at a financial institution as described in the 2007 edition of the ISO 13616 standard \"Banking and related financial services - International Bank Account Number (IBAN)\" and replaced by the more recent edition of the standard."
        },
        "ISO3NumericCountryCode": {
            "pattern": "^([0-9]{3,3})$",
            "type": "string",
            "description": "Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Numeric-3 code). The code is checked against the list of country names coded with three digit characters, defined in the standard."
        },
        "ISODate": {
            "type": "string",
            "description": "A particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format. This representation is defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601."
        },
        "ISODateTime": {
            "type": "string",
            "description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed."
        },
        "ImpliedCurrencyAndAmount": {
            "minimum": 0,
            "type": "number",
            "description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount."
        },
        "InformationQualify1Code": {
            "enum": [
                "CUSA",
                "DISP",
                "DOCT",
                "ERRO",
                "INPT",
                "POIR",
                "RCPT",
                "SOND",
                "STAT",
                "VCHR"
            ],
            "type": "string",
            "description": "Qualification of the information to sent to an output logical device, to display or print to the Cashier or the Customer. \nCode: STAT: \t Status: \tDefinition: The information is a new state on which the message sender is entering. For instance, during a payment, the POI could display to the Cashier that POI request an authorisation to the host acquirer. \nCode: ERRO: \t Error: \tDefinition: The information is related to an error situation occurring on the message sender. \nCode: DISP: \t Display: \tDefinition: Standard display interface. \nCode: SOND: \t Sound: \tDefinition: Standard sound interface. \nCode: INPT: \t Input: \tDefinition: Answer to a question or information to be entered by the Cashier or the Customer, at the request of the POI Terminal or the Sale Terminal. \nCode: POIR: \t POIReplication: \tDefinition: Information displayed on the Cardholder POI interface, replicated on the Cashier interface. \nCode: CUSA: \t CustomerAssistance: \tDefinition: Input of the Cardholder POI interface which can be entered by the Cashier to assist the Customer. \nCode: RCPT: \t Receipt: \tDefinition: Where you print the Payment receipt that could be located on the Sale System or in some cases a restricted Sale ticket on the POI Terminal. \nCode: DOCT: \t Document: \tDefinition: When the POI System wants to print specific document (check, dynamic currency conversion ...). Used by the Sale System when the printer is not located on the Sale System. \nCode: VCHR: \t Voucher: \tDefinition: Coupons, voucher or special ticket generated by the POI or the Sale System and to be printed."
        },
        "Instalment5": {
            "additionalProperties": false,
            "properties": {
                "Charges": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Charges related to the transaction."
                },
                "DetailedCharges": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/InstalmentAmountDetails1"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/InstalmentAmountDetails1"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Contains the charge details of an instalment plan."
                },
                "FirstAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Amount of the first payment."
                },
                "FirstPaymentDate": {
                    "$ref": "#/$defs/ISODate",
                    "description": "Date of the first payment."
                },
                "GracePeriod": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/GracePeriod1"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/GracePeriod1"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Contains grace period details."
                },
                "InstalmentPlan": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/InstalmentPlan1Code"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/InstalmentPlan1Code"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Type of instalment plan."
                },
                "InstalmentPeriod": {
                    "$ref": "#/$defs/Number",
                    "description": "Number of period units between consecutive payments."
                },
                "InterestRate": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/InterestRateDetails1"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/InterestRateDetails1"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Details of the interest rate."
                },
                "LastAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Amount of the last payment."
                },
                "PlanIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the instalment plan."
                },
                "PlanNotice": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ActionMessage11"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/ActionMessage11"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Notice related to the InstalmentPlan."
                },
                "PlanOwner": {
                    "$ref": "#/$defs/PlanOwner1Code",
                    "description": "Type of the Plan Owner."
                },
                "PeriodUnit": {
                    "$ref": "#/$defs/Frequency3Code",
                    "description": "Period unit between consecutive payments (for example day, month, year)."
                },
                "SubsequentAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Amount of subsequent payments but the first one."
                },
                "SequenceNumber": {
                    "$ref": "#/$defs/Number",
                    "description": "Indicates the instalment occurrence of the transaction (1 = 1st instalment, 2 = 2nd instalment, etc.)."
                },
                "TotalAmount": {
                    "$ref": "#/$defs/ActiveCurrencyAndAmount",
                    "description": "Cumulative amount of all the instalments."
                },
                "TotalNumberOfPayments": {
                    "$ref": "#/$defs/Number",
                    "description": "Total number of instalment payments."
                }
            },
            "type": "object",
            "description": "Data exclusively related to a card issuer financial loan of the payment transaction, or instalment."
        },
        "InstalmentAmountDetails1": {
            "additionalProperties": false,
            "properties": {
                "Amount": {
                    "$ref": "#/$defs/Amount5",
                    "description": "Detailed instalment amount."
                },
                "OtherType": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Grace period other unit type."
                },
                "Percentage": {
                    "$ref": "#/$defs/PercentageRate",
                    "description": "Rate expressed as a percentage, that is, in hundredths, example, 0.7 is 7/10 of a percent, and 7.0 is 7%."
                },
                "SubType": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Grace period sub type. "
                },
                "Type": {
                    "$ref": "#/$defs/InstalmentAmountDetailsType1Code",
                    "description": "Grace period unit type."
                }
            },
            "type": "object",
            "description": "Instalment amount details"
        },
        "InstalmentAmountDetailsType1Code": {
            "enum": [
                "TAXX",
                "RQST",
                "OTHP",
                "OTHN",
                "OTHC",
                "INSU",
                "FUNA",
                "FEES",
                "EXPN",
                "AFCO"
            ],
            "type": "string",
            "description": "Contains the details of the grace period applicable to the instalment. \nCode: INSU: \t Insurance: \tDefinition: Insurance amount \nCode: RQST: \t Requested: \tDefinition: Requested amount \nCode: TAXX: \t Tax: \tDefinition: Instalment amount tax \nCode: EXPN: \t Expense: \tDefinition: Expense Amount \nCode: OTHN: \t OtherNational: \tDefinition: Grace period unit type \nCode: OTHP: \t OtherPrivate: \tDefinition: Grace period unit type \nCode: OTHC: \t OtherCharges: \tDefinition: Other amounts \nCode: FUNA: \t Funded: \tDefinition: Funded amount \nCode: FEES: \t Fees: \tDefinition: Fees amount \nCode: AFCO: \t AnnualFinancingCost: \tDefinition: Total financing cost per annum. \nCode: INTR: \t Interest: \tDefinition: Interest amount. \nCode: PRNC: \t Principal: \tDefinition: Principal amount."
        },
        "InstalmentPeriod1Code": {
            "enum": [
                "MNTH",
                "ANNU"
            ],
            "type": "string",
            "description": "Instalment period. \nCode: MNTH: \t Monthly: \tDefinition: Monthly instalment period. \nCode: ANNU: \t Annual: \tDefinition: Annual instalment period."
        },
        "InstalmentPlan1Code": {
            "enum": [
                "EQPM",
                "NQPM",
                "DFRI"
            ],
            "type": "string",
            "description": "Type of instalment plan. \nCode: EQPM: \t EqualPayment: \tDefinition: The payment is split in several instalments of equal amounts. \nCode: NQPM: \t InequalPayment: \tDefinition: The payment is split in several instalments of different amounts. \nCode: DFRI: \t DeferredInstalment: \tDefinition: The first instalment is deferred."
        },
        "InterestRate1Code": {
            "enum": [
                "GSRT",
                "NTRT",
                "OTHN",
                "OTHP"
            ],
            "type": "string",
            "description": "Contains the list of interest rates. \nCode: GSRT: \t GrossRate: \tDefinition: Gross interest rate of the instalment \nCode: NTRT: \t NetRate: \tDefinition: Net interest rate of the instalment \nCode: OTHN: \t OtherNational: \tDefinition: Other interest rate of the instalment \nCode: OTHP: \t OtherPrivate: \tDefinition: Other interest rate of the instalment"
        },
        "InterestRateDetails1": {
            "additionalProperties": false,
            "properties": {
                "OtherType": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Other type of interest applied to the instalment, when Type is OtherNational or OtherPrivate."
                },
                "Period": {
                    "$ref": "#/$defs/InstalmentPeriod1Code",
                    "description": "Contains instalment period"
                },
                "Rate": {
                    "$ref": "#/$defs/BaseOneRate",
                    "description": "Rate expressed as a decimal, example, 0.7 is 7/10 and 70%."
                },
                "Type": {
                    "$ref": "#/$defs/InterestRate1Code",
                    "description": "Interest rate applicable to the instalment."
                }
            },
            "required": [
                "Period",
                "Rate"
            ],
            "type": "object",
            "description": "Details of the interest rate"
        },
        "IssuerAndSerialNumber2": {
            "additionalProperties": false,
            "properties": {
                "Issuer": {
                    "$ref": "#/$defs/CertificateIssuer1",
                    "description": "Certificate issuer name (see X.509)."
                },
                "SerialNumber": {
                    "$ref": "#/$defs/Max500Binary",
                    "description": "Certificate serial number (see X.509)."
                }
            },
            "required": [
                "Issuer",
                "SerialNumber"
            ],
            "type": "object",
            "description": "Certificate issuer name and serial number (see X.509)."
        },
        "KEK9": {
            "additionalProperties": false,
            "properties": {
                "KEKIdentification": {
                    "$ref": "#/$defs/KEKIdentifier7",
                    "description": "Identification of the key encryption key (KEK)."
                },
                "KeyEncryptionAlgorithm": {
                    "$ref": "#/$defs/AlgorithmIdentification32",
                    "description": "Algorithm to encrypt the key encryption key (KEK)."
                },
                "EncryptedKey": {
                    "$ref": "#/$defs/Max500Binary",
                    "description": "Encrypted key encryption key (KEK)."
                },
                "Version": {
                    "$ref": "#/$defs/Number",
                    "description": "Version of the data structure."
                }
            },
            "required": [
                "KEKIdentification",
                "KeyEncryptionAlgorithm"
            ],
            "type": "object",
            "description": "Key encryption key (KEK), using previously distributed symmetric key."
        },
        "KEKIdentifier7": {
            "additionalProperties": false,
            "properties": {
                "DerivationIdentification": {
                    "$ref": "#/$defs/Max500Binary",
                    "description": "Identification used for derivation of a unique key from a master key provided for the data protection."
                },
                "KeyIdentification": {
                    "$ref": "#/$defs/Max140Text",
                    "description": "Identification of the cryptographic key."
                },
                "KeyVersion": {
                    "$ref": "#/$defs/Max140Text",
                    "description": "Version of the cryptographic key."
                },
                "SequenceNumber": {
                    "$ref": "#/$defs/Number",
                    "description": "Number of usages of the cryptographic key."
                }
            },
            "required": [
                "KeyIdentification",
                "KeyVersion"
            ],
            "type": "object",
            "description": "Identification of a key encryption key (KEK), using previously distributed symmetric key."
        },
        "KeyTransport10": {
            "additionalProperties": false,
            "properties": {
                "KeyEncryptionAlgorithm": {
                    "$ref": "#/$defs/AlgorithmIdentification35",
                    "description": "Algorithm to encrypt the key encryption key (KEK)."
                },
                "EncryptedKey": {
                    "$ref": "#/$defs/Max5000Binary",
                    "description": "Encrypted key encryption key (KEK)."
                },
                "RecipientIdentification": {
                    "$ref": "#/$defs/Recipient13Choice",
                    "description": "Identification of a cryptographic asymmetric key for the recipient."
                },
                "Version": {
                    "$ref": "#/$defs/Number",
                    "description": "Version of the data structure."
                }
            },
            "required": [
                "KeyEncryptionAlgorithm",
                "EncryptedKey",
                "RecipientIdentification"
            ],
            "type": "object",
            "description": "Key encryption key (KEK), encrypted with a previously distributed asymmetric public key."
        },
        "KeyUsage1Code": {
            "enum": [
                "ENCR",
                "DCPT",
                "DENC",
                "DDEC",
                "TRNI",
                "TRNX",
                "MACG",
                "MACV",
                "SIGG",
                "SUGV",
                "PINE",
                "PIND",
                "PINV",
                "KEYG",
                "KEYI",
                "KEYX",
                "KEYD"
            ],
            "type": "string",
            "description": "Allowed usages of the key. \nCode: ENCR: \t Encryption: \tDefinition: Key may encrypt. \nCode: DCPT: \t Decryption: \tDefinition: Key may decrypt. \nCode: DENC: \t DataEncryption: \tDefinition: Key may encrypt data. \nCode: DDEC: \t DataDecryption: \tDefinition: Key may decrypt data. \nCode: TRNX: \t TranslateOutput: \tDefinition: Key may encrypt information after translation. \nCode: TRNI: \t TranslateInput: \tDefinition: Key may encrypt information before translation. \nCode: MACG: \t MessageAuthenticationCodeGeneration: \tDefinition: Key may generate message authentication codes (MAC). \nCode: MACV: \t MessageAuthenticationCodeVerification: \tDefinition: Key may verify message authentication codes (MAC). \nCode: SIGG: \t SignatureGeneration: \tDefinition: Key may generate digital signatures. \nCode: SUGV: \t SignatureVerification: \tDefinition: Key may verify digital signatures. \nCode: PINE: \t PINEncryption: \tDefinition: Key may encrypt personal identification numbers (PIN). \nCode: PIND: \t PINDecryption: \tDefinition: Key may decrypt personal identification numbers (PIN). \nCode: PINV: \t PINVerification: \tDefinition: Key may verify personal identification numbers (PIN). \nCode: KEYG: \t KeyGeneration: \tDefinition: Key may generate keys. \nCode: KEYI: \t KeyImport: \tDefinition: Key may import keys. \nCode: KEYX: \t KeyExport: \tDefinition: Key may export keys. \nCode: KEYD: \t KeyDerivation: \tDefinition: Key may derive keys."
        },
        "LanguageCode": {
            "type": "string",
            "description": "Specifies a language."
        },
        "LocationCategory3Code": {
            "enum": [
                "INDR",
                "IPMP",
                "MPOI",
                "MPMP",
                "MSLE",
                "SSLE",
                "VNDG"
            ],
            "type": "string",
            "description": "Indicates the type of integration of the POI terminal in the sale environment. \nCode: ABRD: \t Aboard: \tDefinition: Aboard is used when the sale is done in a vehicle (e.g a bus, train, ship, airplane,\r\ntaxi, etc). \nCode: HOME: \t Home: \tDefinition: Customer home. \nCode: INDR: \t Indoor: \tDefinition: Indoor terminal. \nCode: IPMP: \t InsidePump: \tDefinition: Terminal incorporated in the pump dispensing petrol. \nCode: MOTO: \t MailOrderTelephoneOrder: \tDefinition: Mail order or telephone order. \nCode: MPOI: \t MultiplePOITerminal: \tDefinition: Multiple terminals linked to a unique sale terminal. \nCode: MPMP: \t MultiplePump: \tDefinition: Outdoor terminal serving several petrol pumps. \nCode: MSLE: \t MultipleSaleTerminal: \tDefinition: Terminal serving multiple sale terminals. \nCode: NMDC: \t Nomadic: \tDefinition: Nomadic is used when the merchant is traveling to different locations (e.g fair or\r\nsport events, home delivery, food truck). \nCode: FIXD: \t PhysicalShop: \tDefinition: Fixed location, for example in a shop. \nCode: SSLE: \t SingleSaleTerminal: \tDefinition: Terminal linked to a unique sale terminal. \nCode: VNDG: \t VendingMachine: \tDefinition: Terminal integrated in a vending machine. \nCode: VIRT: \t VirtualShop: \tDefinition: Virtual Shop is used for any ecommerce solution."
        },
        "LocationCategory4Code": {
            "enum": [
                "ABRD",
                "NMDC",
                "FIXD",
                "VIRT"
            ],
            "type": "string",
            "description": "Indicates the type of integration of the POI terminal in the sale environment. \nCode: ABRD: \t Aboard: \tDefinition: Aboard is used when the sale is done in a vehicle (e.g a bus, train, ship, airplane,\r\ntaxi, etc). \nCode: HOME: \t Home: \tDefinition: Customer home. \nCode: INDR: \t Indoor: \tDefinition: Indoor terminal. \nCode: IPMP: \t InsidePump: \tDefinition: Terminal incorporated in the pump dispensing petrol. \nCode: MOTO: \t MailOrderTelephoneOrder: \tDefinition: Mail order or telephone order. \nCode: MPOI: \t MultiplePOITerminal: \tDefinition: Multiple terminals linked to a unique sale terminal. \nCode: MPMP: \t MultiplePump: \tDefinition: Outdoor terminal serving several petrol pumps. \nCode: MSLE: \t MultipleSaleTerminal: \tDefinition: Terminal serving multiple sale terminals. \nCode: NMDC: \t Nomadic: \tDefinition: Nomadic is used when the merchant is traveling to different locations (e.g fair or\r\nsport events, home delivery, food truck). \nCode: FIXD: \t PhysicalShop: \tDefinition: Fixed location, for example in a shop. \nCode: SSLE: \t SingleSaleTerminal: \tDefinition: Terminal linked to a unique sale terminal. \nCode: VNDG: \t VendingMachine: \tDefinition: Terminal integrated in a vending machine. \nCode: VIRT: \t VirtualShop: \tDefinition: Virtual Shop is used for any ecommerce solution."
        },
        "LoyaltyAccount3": {
            "additionalProperties": false,
            "properties": {
                "Balance": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Balance of a Loyalty Account."
                },
                "Brand": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Brand to which belong the account."
                },
                "Currency": {
                    "$ref": "#/$defs/ActiveCurrencyCode",
                    "description": "Currency of a Loyalty Account if any."
                },
                "IdentificationType": {
                    "$ref": "#/$defs/CardIdentificationType1Code",
                    "description": "Type of identification for this Loyalty Account."
                },
                "LoyaltyIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of Loyalty Account."
                },
                "EntryMode": {
                    "$ref": "#/$defs/CardDataReading8Code",
                    "description": "Standard or last entry mode to access the Loyalty account or card."
                },
                "OwnerName": {
                    "$ref": "#/$defs/Max45Text",
                    "description": "Owner name of an account."
                },
                "Provider": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Provider of the Loyalty Account."
                },
                "Unit": {
                    "$ref": "#/$defs/AmountUnit1Code",
                    "description": "Unit of a Loyalty Account (Point or Currency)."
                }
            },
            "required": [
                "LoyaltyIdentification"
            ],
            "type": "object",
            "description": "Loyalty Account description."
        },
        "LoyaltyAccountRequest3": {
            "additionalProperties": false,
            "properties": {
                "Account": {
                    "$ref": "#/$defs/LoyaltyAccount3",
                    "description": "Loyalty account information."
                },
                "CustomerOrder": {
                    "$ref": "#/$defs/CustomerOrder1",
                    "description": "To retrieve Card Acquisition Data."
                }
            },
            "type": "object",
            "description": "Data related to a requested Loyalty program or account."
        },
        "LoyaltyAmount1": {
            "additionalProperties": false,
            "properties": {
                "Amount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Amount value."
                },
                "Currency": {
                    "$ref": "#/$defs/ActiveCurrencyCode",
                    "description": "Currency of the amount is Unit is Monetary."
                },
                "Unit": {
                    "$ref": "#/$defs/AmountUnit1Code",
                    "description": "Unit type for the amount."
                }
            },
            "required": [
                "Amount"
            ],
            "type": "object",
            "description": "Loyalty amount to apply to an Loyalty account."
        },
        "LoyaltyHandling1Code": {
            "enum": [
                "ALLO",
                "DENY",
                "PRCS",
                "PROP",
                "REQU"
            ],
            "type": "string",
            "description": "Possible types of Loyalty processing. \nCode: DENY: \t Forbidden: \tDefinition: No loyalty card to read and loyalty transaction to process. \tAny attempt to enter a pure loyalty card is rejected. \nCode: PRCS: \t Processed: \tDefinition: The loyalty transaction is already processed, no loyalty card or loyalty transaction to process. \nCode: ALLO: \t Allowed: \tDefinition: The loyalty is accepted, but the POI has not to require or ask a loyalty card. The loyalty is involved by the payment card (e.g. an hybrid or linked card).  \nCode: PROP: \t Proposed: \tDefinition: The loyalty is accepted, and the POI has to ask a loyalty card. If the Customer does not enter a loyalty card, no loyalty transaction is realised. \nCode: REQU: \t Required: \tDefinition: The loyalty is required, and the POI refuses the processing \tof the message request if the cardholder does not enter a loyalty card."
        },
        "LoyaltyRequest6": {
            "additionalProperties": false,
            "properties": {
                "CustomerOrder": {
                    "$ref": "#/$defs/CustomerOrder1",
                    "description": "To retrieve Card Acquisition Data."
                },
                "Data": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/LoyaltyRequestData3"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/LoyaltyRequestData3"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Data related to a Loyalty program or account."
                },
                "Transaction": {
                    "$ref": "#/$defs/LoyaltyTransaction6",
                    "description": "Data related to the loyalty transaction."
                }
            },
            "required": [
                "Transaction"
            ],
            "type": "object",
            "description": "Data to request a loyalty service. A loyalty request contents : the loyalty transaction request and the loyalty data if any."
        },
        "LoyaltyRequestData3": {
            "additionalProperties": false,
            "properties": {
                "Account": {
                    "$ref": "#/$defs/LoyaltyAccount3",
                    "description": "Identification of a Loyalty account."
                },
                "Amount": {
                    "$ref": "#/$defs/LoyaltyAmount1",
                    "description": "Amount of a loyalty account."
                },
                "CustomerOrder": {
                    "$ref": "#/$defs/CustomerOrder1",
                    "description": "To retrieve Card Acquisition Data."
                }
            },
            "type": "object",
            "description": "Data linked to card loyalty during payment."
        },
        "LoyaltyTransaction6": {
            "additionalProperties": false,
            "properties": {
                "Currency": {
                    "$ref": "#/$defs/ActiveCurrencyCode",
                    "description": "Currency of the loyalty transaction."
                },
                "LoyaltyTransactionType": {
                    "$ref": "#/$defs/LoyaltyTransactionType1Code",
                    "description": "Data related to the loyalty transaction."
                },
                "OriginalPOITransaction": {
                    "$ref": "#/$defs/CardPaymentTransaction136",
                    "description": "Data of a previous POI payment transaction."
                },
                "SaleItem": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Product6"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Product6"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Item purchased with the transaction."
                },
                "SaleTransactionIdentification": {
                    "$ref": "#/$defs/TransactionIdentifier1",
                    "description": "Sale System identification of the transaction in an unambiguous way."
                },
                "TotalAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Amount of the payment transaction related to the Loyalty."
                }
            },
            "required": [
                "LoyaltyTransactionType"
            ],
            "type": "object",
            "description": "Data related to the loyalty transaction."
        },
        "LoyaltyTransactionType1Code": {
            "enum": [
                "AWRD",
                "AWRR",
                "REBR",
                "REBA",
                "REDE",
                "REDR"
            ],
            "type": "string",
            "description": "Type of loyalty transaction. \nCode: AWRD: \t Award: \tDefinition: Direct or payment related award on a loyalty account. Award alone, award associated to a payment (may be with an additional award alone), award because of \ta payment resulting on rebates. \nCode: AWRR: \t AwardRefund: \tDefinition: Refund of a loyalty award transaction. \nCode: REDE: \t Redemption: \tDefinition: Redemption on a loyalty account. \nCode: REDR: \t RedemptionRefund: \tDefinition: Refund of a loyalty redemption transaction. \nCode: REBA: \t Rebate: \tDefinition: Rebate on a total amount, sale item amount, or sale items. \nCode: REBR: \t RebateRefund: \tDefinition: Refund of a loyalty rebate transaction."
        },
        "MandateRelatedInformation13": {
            "additionalProperties": false,
            "properties": {
                "DateOfSignature": {
                    "$ref": "#/$defs/ISODate",
                    "description": "Date on which the direct debit mandate has been signed by the debtor."
                },
                "MandateIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Unique identification, as assigned by the creditor, to unambiguously identify the mandate."
                },
                "MandateImage": {
                    "$ref": "#/$defs/Max2MBBinary",
                    "description": "Image of scanned signed mandate."
                }
            },
            "required": [
                "MandateIdentification"
            ],
            "type": "object",
            "description": "Provides further details related to a direct debit mandate signed between the creditor and the debtor."
        },
        "Max10000Binary": {
            "maxLength": 10000,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a binary string with a maximum length of 10000 binary bytes."
        },
        "Max100KBinary": {
            "maxLength": 102400,
            "minLength": 1,
            "type": "string",
            "description": "Binary data of 100K maximum."
        },
        "Max1025Text": {
            "maxLength": 1025,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 1025 characters."
        },
        "Max104Text": {
            "maxLength": 104,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 104 characters."
        },
        "Max10KBinary": {
            "maxLength": 10240,
            "minLength": 1,
            "type": "string",
            "description": "Binary data of 10K maximum."
        },
        "Max10Text": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 10 characters."
        },
        "Max11NumericText": {
            "pattern": "^([0-9]{1,11})$",
            "type": "string",
            "description": "Specifies a numeric string with a maximum length of 11 digits."
        },
        "Max140Binary": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a binary string with a maximum length of 140 binary bytes."
        },
        "Max140Text": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 140 characters."
        },
        "Max15NumericText": {
            "pattern": "^([0-9]{1,15})$",
            "type": "string",
            "description": "Specifies a numeric string with a maximum length of 15 digits."
        },
        "Max16Text": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 16 characters."
        },
        "Max19NumericText": {
            "pattern": "^([0-9]{1,19})$",
            "type": "string",
            "description": "Specifies a numeric string with a maximum length of 19 digits."
        },
        "Max20000Text": {
            "maxLength": 20000,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 20, 000 characters."
        },
        "Max256Text": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 256 characters."
        },
        "Max2KBinary": {
            "maxLength": 2048,
            "minLength": 1,
            "type": "string",
            "description": "Binary data of 2K maximum."
        },
        "Max2MBBinary": {
            "maxLength": 2097152,
            "minLength": 1,
            "type": "string",
            "description": "Binary data of 2MB maximum."
        },
        "Max2NumericText": {
            "pattern": "^([0-9]{1,2})$",
            "type": "string",
            "description": "Specifies a numeric string with a maximum length of 2 digits."
        },
        "Max3000Binary": {
            "maxLength": 3000,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a binary string with a maximum length of 3000 binary bytes."
        },
        "Max30Text": {
            "maxLength": 30,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 30 characters."
        },
        "Max350Text": {
            "maxLength": 350,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 350 characters."
        },
        "Max35Binary": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a binary string with a maximum length of 35 binary bytes."
        },
        "Max35NumericText": {
            "pattern": "^([0-9]{1,35})$",
            "type": "string",
            "description": "Specifies a numeric string with a maximum length of 35 digits."
        },
        "Max35Text": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 35 characters."
        },
        "Max37Text": {
            "maxLength": 37,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 37 characters."
        },
        "Max3NumericText": {
            "pattern": "^([0-9]{1,3})$",
            "type": "string",
            "description": "Specifies a numeric string with a maximum length of 3 digits."
        },
        "Max3Text": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 3 characters."
        },
        "Max45Text": {
            "maxLength": 45,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 45 characters."
        },
        "Max5000Binary": {
            "maxLength": 5000,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a binary string with a maximum length of 5000 binary bytes."
        },
        "Max500Binary": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a binary string with a maximum length of 500 binary bytes."
        },
        "Max500Text": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 500 characters."
        },
        "Max5NumericText": {
            "pattern": "^([0-9]{1,5})$",
            "type": "string",
            "description": "Specifies a numeric string with a maximum length of 5 digits."
        },
        "Max6Text": {
            "maxLength": 6,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 6 characters."
        },
        "Max70Text": {
            "maxLength": 70,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 70characters."
        },
        "Max76Text": {
            "maxLength": 76,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 76 characters."
        },
        "Max8000Text": {
            "maxLength": 8000,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 8000 characters."
        },
        "Max8Text": {
            "maxLength": 8,
            "minLength": 1,
            "type": "string",
            "description": "Specifies a character string with a maximum length of 8 characters."
        },
        "MemoryCharacteristics1": {
            "additionalProperties": false,
            "properties": {
                "FreeSize": {
                    "$ref": "#/$defs/DecimalNumber",
                    "description": "Total size of the available memory."
                },
                "Identification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification or name of the memory."
                },
                "TotalSize": {
                    "$ref": "#/$defs/DecimalNumber",
                    "description": "Total size of the memory unit."
                },
                "Unit": {
                    "$ref": "#/$defs/MemoryUnit1Code",
                    "description": "Memory unit of the sizes."
                }
            },
            "required": [
                "FreeSize",
                "Identification",
                "TotalSize",
                "Unit"
            ],
            "type": "object",
            "description": "Characteristics of a hardware memory module."
        },
        "MemoryUnit1Code": {
            "enum": [
                "BYTE",
                "EXAB",
                "GIGA",
                "KILO",
                "MEGA",
                "PETA",
                "TERA"
            ],
            "type": "string",
            "description": "Unit of the memory size. \nCode: EXAB: \t ExaByte: \tDefinition: Exa byte. \nCode: PETA: \t PetaByte: \tDefinition: Peta byte. \nCode: TERA: \t TeraByte: \tDefinition: Tera byte. \nCode: GIGA: \t GigaByte: \tDefinition: Giga byte. \nCode: MEGA: \t MegaByte: \tDefinition: Mega byte. \nCode: KILO: \t KiloByte: \tDefinition: Kilo byte. \nCode: BYTE: \t Byte: \tDefinition: Byte."
        },
        "MerchantToken2": {
            "additionalProperties": false,
            "properties": {
                "Token": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Surrogate value of the PAN."
                },
                "TokenAssuranceData": {
                    "$ref": "#/$defs/Max500Binary",
                    "description": "Information about the identification and verification of the cardholder."
                },
                "TokenAssuranceLevel": {
                    "$ref": "#/$defs/Number",
                    "description": "Level of confidence resulting of the identification and authentication of the cardholder performed and the entity that performed it."
                },
                "TokenAssuranceMethod": {
                    "$ref": "#/$defs/Max2NumericText",
                    "description": "Value that allows a Token Service Provider to indicate the identification and verification performed representing the binding of the payment token to the underlying PAN and cardholder."
                },
                "TokenCharacteristic": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Max35Text"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Max35Text"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Additional payment token information."
                },
                "TokenInitiatedIndicator": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Original transaction was initiated by Token."
                },
                "TokenRequestor": {
                    "$ref": "#/$defs/PaymentTokenIdentifiers1",
                    "description": "Identifier of a token provider requestor."
                },
                "TokenExpiryDate": {
                    "$ref": "#/$defs/Max10Text",
                    "description": "Expiration date of the payment token that is generated by and maintained in the token vault."
                }
            },
            "type": "object",
            "description": "Merchant token information."
        },
        "Min2Max3AlphaText": {
            "pattern": "^([A-Za-z]{2,3})$",
            "type": "string",
            "description": "Specifies an alpha string with a minimum length of 2 characters and a maximum length of 3 characters."
        },
        "Min2Max3NumericText": {
            "pattern": "^([0-9]{2,3})$",
            "type": "string",
            "description": "Specifies a numeric string with a minimum length of 2 digits, and a maximum length of 3 digits."
        },
        "Min3Max4Text": {
            "maxLength": 4,
            "minLength": 3,
            "type": "string",
            "description": "Specifies a character string with a minimum length of 3 characters, and a maximum length of 4 characters."
        },
        "Min8Max28NumericText": {
            "pattern": "^([0-9]{8,28})$",
            "type": "string",
            "description": "Specifies a numeric string with a minimum length of 8 digits, and a maximum length of 28 digits."
        },
        "MobileData6": {
            "additionalProperties": false,
            "properties": {
                "Geolocation": {
                    "$ref": "#/$defs/Geolocation1",
                    "description": "Geographic location specified by geographic or UTM coordinates."
                },
                "MobileCountryCode": {
                    "$ref": "#/$defs/Min2Max3AlphaText",
                    "description": "Identifies the country of a mobile phone operator."
                },
                "MobileMaskedMSISDN": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Masked Mobile Subscriber Integrated Service Digital Network."
                },
                "MobileNetworkCode": {
                    "$ref": "#/$defs/Min2Max3NumericText",
                    "description": "Identifies the mobile phone operator inside a country."
                },
                "ProtectedMobileData": {
                    "$ref": "#/$defs/ContentInformationType40",
                    "description": "Sensitive information related to the mobile phone, protected by CMS."
                },
                "SensitiveMobileData": {
                    "$ref": "#/$defs/SensitiveMobileData1",
                    "description": "Sensitive information related to the mobile phone."
                }
            },
            "type": "object",
            "description": "Data related to the mobile of stakeholder."
        },
        "NameAndAddress6": {
            "additionalProperties": false,
            "properties": {
                "Address": {
                    "$ref": "#/$defs/PostalAddress2",
                    "description": "Information that locates and identifies a specific address, as defined by postal services."
                },
                "Name": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Name by which a party is known and which is usually used to identify that party."
                }
            },
            "required": [
                "Address",
                "Name"
            ],
            "type": "object",
            "description": "Name and address of an institution."
        },
        "NetworkParameters7": {
            "additionalProperties": false,
            "properties": {
                "AccessCode": {
                    "$ref": "#/$defs/Max35Binary",
                    "description": "Password authenticating the client."
                },
                "Address": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/NetworkParameters9"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/NetworkParameters9"
                            },
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "description": "Network addresses of the host."
                },
                "ClientCertificate": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Max10KBinary"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Max10KBinary"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "X.509 Certificate required to authenticate the client."
                },
                "SecurityProfile": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the set of security elements to access the host."
                },
                "ServerCertificate": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Max10KBinary"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Max10KBinary"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "X.509 Certificate required to authenticate the server."
                },
                "ServerCertificateIdentifier": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Max140Binary"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Max140Binary"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Identification of the X.509 Certificates required to authenticate the server, for instance a digest of the certificate."
                },
                "UserName": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "User name identifying the client."
                }
            },
            "required": [
                "Address"
            ],
            "type": "object",
            "description": "Parameters to communicate with a host."
        },
        "NetworkParameters9": {
            "additionalProperties": false,
            "properties": {
                "AddressValue": {
                    "$ref": "#/$defs/Max500Text",
                    "description": "Value of the address. The value of an internet protocol address contains the IP address or the DNS (Domain Name Server) address, followed by the character ': ' and the port number if the default port is not used. The value of a public telephone address contains the phone number with possible prefix and extensions."
                },
                "NetworkType": {
                    "$ref": "#/$defs/NetworkType1Code",
                    "description": "Type of communication network."
                }
            },
            "required": [
                "AddressValue",
                "NetworkType"
            ],
            "type": "object",
            "description": "Parameters to communicate with a host."
        },
        "NetworkType1Code": {
            "enum": [
                "IPNW",
                "PSTN"
            ],
            "type": "string",
            "description": "Type of communication network. \nCode: IPNW: \t InternetProtocol: \tDefinition: Protocol of an IP network. \nCode: PSTN: \t PublicTelephone: \tDefinition: Protocol of a Public Switched Telephone Network (PSTN). \nCode: HTTP: \t HTTP: \tDefinition: HTTP proxy. \nCode: SCK4: \t Sock4: \tDefinition: Sock4 proxy. \nCode: SCK5: \t Sock5: \tDefinition: Sock5 proxy."
        },
        "Number": {
            "type": "number",
            "description": "Number of objects represented as an integer."
        },
        "OnLineCapability1Code": {
            "enum": [
                "OFLN",
                "ONLN",
                "SMON"
            ],
            "type": "string",
            "description": "On-line and off-line capabilities of the POI (Point Of Interaction). \nCode: OFLN: \t OffLine: \tDefinition: Off-line only capable. \nCode: ONLN: \t OnLine: \tDefinition: On-line only capable. \nCode: SMON: \t SemiOffLine: \tDefinition: Off-line capable with possible on-line requests to the acquirer. \nCode: BOTH: \t BothOnLineAndOffLine: \tDefinition: Both online and offline"
        },
        "OnLinePIN11": {
            "additionalProperties": false,
            "properties": {
                "AdditionalInput": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Additional information required to verify the PIN (Personal Identification Number)."
                },
                "EncryptedPINBlock": {
                    "$ref": "#/$defs/ContentInformationType40",
                    "description": "Encrypted PIN (Personal Identification Number)."
                },
                "PINFormat": {
                    "$ref": "#/$defs/PINFormat3Code",
                    "description": "PIN (Personal Identification Number) format before encryption."
                }
            },
            "required": [
                "EncryptedPINBlock",
                "PINFormat"
            ],
            "type": "object",
            "description": "Encrypted personal identification number (PIN) and related information."
        },
        "OnLineReason2Code": {
            "enum": [
                "RNDM",
                "ICCF",
                "MERF",
                "TRMF",
                "ISSF",
                "FRLT",
                "EXFL",
                "TAMT",
                "CBIN",
                "UBIN",
                "CPAN",
                "FLOW",
                "CRCY",
                "IFPR"
            ],
            "type": "string",
            "description": "Reason to process an online authorisation. \nCode: RNDM: \t RandomSelection: \tDefinition: Transaction random selection to go online. \nCode: ICCF: \t ICCForced: \tDefinition: Payment application in the Integrated Circuit Card forces to go on-line. \nCode: MERF: \t MerchantForced: \tDefinition: On line forced by card acceptor. \nCode: TRMF: \t TerminalForced: \tDefinition: Terminal random selection to go online. \nCode: ISSF: \t IssuerForced: \tDefinition: On line forced by card issuer. \nCode: FRLT: \t FloorLimit: \tDefinition: Over floor limit. \nCode: EXFL: \t ExceptionFile: \tDefinition: Card appears on terminal exception file. \nCode: TAMT: \t TotalAmount: \tDefinition: Total amount of purchases per cardholder and per application above floor limit. \nCode: CBIN: \t ControlledBIN: \tDefinition: Bank Identification Number under control. \nCode: UBIN: \t UnknownBIN: \tDefinition: Unknown Bank Identification Number. \nCode: CPAN: \t ControlledPAN: \tDefinition: Primary account number (card number) under control. \nCode: FLOW: \t FlowControl: \tDefinition: Flow control. \nCode: CRCY: \t UnavailableCurrency: \tDefinition: Unknown currency code or foreign currency. \nCode: IFPR: \t IssuerForcedPINRequest: \tDefinition: Request Cardholder Authentication througth PIN insertion"
        },
        "Organisation26": {
            "additionalProperties": false,
            "properties": {
                "Address": {
                    "$ref": "#/$defs/Max140Text",
                    "description": "Location of the merchant."
                },
                "CommonName": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Name of the merchant."
                },
                "CountryCode": {
                    "$ref": "#/$defs/ISO3NumericCountryCode",
                    "description": "Country of the merchant."
                },
                "MerchantCategoryCode": {
                    "$ref": "#/$defs/Min3Max4Text",
                    "description": "Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction."
                },
                "RegisteredIdentifier": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identifier of the sponsored merchant assigned by the payment facilitator of their acquirer."
                }
            },
            "required": [
                "CommonName",
                "CountryCode",
                "MerchantCategoryCode",
                "RegisteredIdentifier"
            ],
            "type": "object",
            "description": "Merchant performing the transaction."
        },
        "Organisation41": {
            "additionalProperties": false,
            "properties": {
                "CommonName": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Name of the merchant as appearing on the receipt."
                },
                "Identification": {
                    "$ref": "#/$defs/GenericIdentification32",
                    "description": "Identification of the merchant."
                },
                "LocationAndContact": {
                    "$ref": "#/$defs/CommunicationAddress9",
                    "description": "Location and contact information of the merchant performing the transaction."
                },
                "LocationCategory": {
                    "$ref": "#/$defs/LocationCategory4Code",
                    "description": "Location category of the place where the merchant actually performed the transaction."
                },
                "SchemeData": {
                    "$ref": "#/$defs/Max140Text",
                    "description": "Additional merchant data required by a card scheme."
                }
            },
            "type": "object",
            "description": "Merchant performing the transaction."
        },
        "OriginalAmountDetails1": {
            "additionalProperties": false,
            "properties": {
                "ActualAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Actual amount to be converted."
                },
                "MaximumAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Maximum amount for conversion (in case of range of amounts)."
                },
                "MinimumAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Minimum amount for conversion (in case of range of amounts)."
                }
            },
            "type": "object",
            "description": "The OriginalAmountDetails contains all amount information in the acceptor currency code necessary to manage currency conversion in the cardholder currency code."
        },
        "OriginatorInformation1": {
            "additionalProperties": false,
            "properties": {
                "Certificate": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Max5000Binary"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Max5000Binary"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "It may contain originator certificates associated with several different key management algorithms."
                }
            },
            "type": "object",
            "description": "Provides information about the originator. It is present only if required by the key management algorithm."
        },
        "OutputBarcode2": {
            "additionalProperties": false,
            "properties": {
                "BarcodeType": {
                    "$ref": "#/$defs/BarcodeType1Code",
                    "description": "Type of Barcode coding."
                },
                "BarcodeValue": {
                    "$ref": "#/$defs/Max8000Text",
                    "description": "Value with a Barcode coding."
                },
                "QRCodeBinaryValue": {
                    "$ref": "#/$defs/Max3000Binary",
                    "description": "Use for binary and Kanji Quick Respone Code."
                },
                "QRCodeErrorCorrection": {
                    "$ref": "#/$defs/QRCodeErrorCorrection1Code",
                    "description": "Error Correction mode of Quick Response Code."
                },
                "QRCodeEncodingMode": {
                    "$ref": "#/$defs/QRCodeEncodingMode1Code",
                    "description": "Encoding Mode of Quick Response Code."
                },
                "QRCodeVersion": {
                    "$ref": "#/$defs/Max16Text",
                    "description": "Version of the Quick Response Code."
                }
            },
            "required": [
                "BarcodeType"
            ],
            "type": "object",
            "description": "Barcode content to display or print."
        },
        "OutputFormat1Code": {
            "enum": [
                "MREF",
                "TEXT",
                "HTML"
            ],
            "type": "string",
            "description": "Message format. \nCode: TEXT: \t SimpleText: \tDefinition: Text without format attributes. \nCode: MREF: \t MessageReference: \tDefinition: Predefined configured messages, identified by a reference. \nCode: HTML: \t XHTML: \tDefinition: XHTML document which includes a subset of the XHTML output tag. \nCode: SREF: \t ScreenReference: \tDefinition: Screen to display identified by a reference. \nCode: BARC: \t Barcode: \tDefinition: Barcode to output in several possible format. \nCode: MENT: \t MenuEntry: \tDefinition: A text to display as a menu before requesting an input. \nCode: FLNM: \t FileName: \tDefinition: File name and location identification for stored messages or data. \nCode: MMSI: \t MultiMediaMessaging: \tDefinition: Multi-media messaging service \nCode: OTHN: \t OtherNational: \tDefinition: Other type of output of message defined at national level. \nCode: OTHP: \t OtherPrivate: \tDefinition: Other type of output format defined at private level. \nCode: SMSI: \t ShortMessageService: \tDefinition: Short message service \nCode: URLI: \t UniformResourceLocator: \tDefinition: Uniform Resource Locator (URL) reference for the message. \nCode: PLIN: \t PrintLine: \tDefinition: A formatted print line. \nCode: JSON: \t JSON: \tDefinition: Java Syntax Object Notation format. \nCode: XMLF: \t XML: \tDefinition: eXtensible Markup Language format. \nCode: EDIF: \t EDIFACT: \tDefinition: Electronic data interchange for administration, commerce and transport. \nCode: CSVF: \t CSV: \tDefinition: Comma separated value format. \nCode: JPEG: \t JPEG: \tDefinition: Joint Photographic Experts Group format. \nCode: PDFF: \t PDF: \tDefinition: Portable Document Format. \nCode: PNGF: \t PNG: \tDefinition: Portable Network Graphics format. \nCode: SVGF: \t SVG: \tDefinition: Scalable vector graphic format."
        },
        "OutputFormat3Code": {
            "enum": [
                "BARC",
                "MENT",
                "MREF",
                "SREF",
                "TEXT",
                "HTML"
            ],
            "type": "string",
            "description": "Type of output format. \nCode: TEXT: \t SimpleText: \tDefinition: Text without format attributes. \nCode: MREF: \t MessageReference: \tDefinition: Predefined configured messages, identified by a reference. \nCode: HTML: \t XHTML: \tDefinition: XHTML document which includes a subset of the XHTML output tag. \nCode: SREF: \t ScreenReference: \tDefinition: Screen to display identified by a reference. \nCode: BARC: \t Barcode: \tDefinition: Barcode to output in several possible format. \nCode: MENT: \t MenuEntry: \tDefinition: A text to display as a menu before requesting an input. \nCode: FLNM: \t FileName: \tDefinition: File name and location identification for stored messages or data. \nCode: MMSI: \t MultiMediaMessaging: \tDefinition: Multi-media messaging service \nCode: OTHN: \t OtherNational: \tDefinition: Other type of output of message defined at national level. \nCode: OTHP: \t OtherPrivate: \tDefinition: Other type of output format defined at private level. \nCode: SMSI: \t ShortMessageService: \tDefinition: Short message service \nCode: URLI: \t UniformResourceLocator: \tDefinition: Uniform Resource Locator (URL) reference for the message. \nCode: PLIN: \t PrintLine: \tDefinition: A formatted print line. \nCode: JSON: \t JSON: \tDefinition: Java Syntax Object Notation format. \nCode: XMLF: \t XML: \tDefinition: eXtensible Markup Language format. \nCode: EDIF: \t EDIFACT: \tDefinition: Electronic data interchange for administration, commerce and transport. \nCode: CSVF: \t CSV: \tDefinition: Comma separated value format. \nCode: JPEG: \t JPEG: \tDefinition: Joint Photographic Experts Group format. \nCode: PDFF: \t PDF: \tDefinition: Portable Document Format. \nCode: PNGF: \t PNG: \tDefinition: Portable Network Graphics format. \nCode: SVGF: \t SVG: \tDefinition: Scalable vector graphic format."
        },
        "PINFormat3Code": {
            "enum": [
                "ISO0",
                "ISO1",
                "ISO2",
                "ISO3",
                "ISO4",
                "ISO5"
            ],
            "type": "string",
            "description": "PIN (Personal Identification Number) format used before encryption. \nCode: ISO0: \t ISO0: \tDefinition: PIN diversified with the card account number, conforming to the standard ISO 9564-2. \nCode: ISO1: \t ISO1: \tDefinition: PIN completed with random padding characters, conforming to the standard ISO 9564-2. \nCode: ISO2: \t ISO2: \tDefinition: PIN without diversification characters, conforming to the standard ISO 9564-2. \nCode: ISO3: \t ISO3: \tDefinition: PIN diversified with the card account number and random characters, conforming to the standard ISO 9564-2. \nCode: ISO4: \t ISO4: \tDefinition: PIN format used with AES encryption, conforming to the new ISO SC2 format. \nCode: ISO5: \t ISO5: \tDefinition: Alternative PIN format used with AES encryption, conforming to the new ISO SC2 format. \nCode: ANSI: \t ANSI0: \tDefinition: ANSI 0 PIN block format. \nCode: BNCM: \t Bancomat: \tDefinition: Italian Bancomat PIN block format. \nCode: BKSY: \t Banksys: \tDefinition: Banksys PIN block format. \nCode: DBLD: \t Diebold: \tDefinition: Diebold PIN block format. \nCode: DBLC: \t DieboldCO: \tDefinition: Diebold CO PIN block format. \nCode: ECI2: \t ECI2: \tDefinition: ECI2 PIN block format. \nCode: ECI3: \t ECI3: \tDefinition: ECI3 PIN block format. \nCode: EMVS: \t EMVRSA: \tDefinition: EMV ISO2 PIN block format encrypted with the EMV RSA cryptographic key for the PIN. \nCode: IBM3: \t IBM3624: \tDefinition: IBM 3624 PIN block format. \nCode: VIS2: \t VISA2: \tDefinition: VISA2 PIN block format. \nCode: VIS3: \t VISA3: \tDefinition: VISA3 PIN block format."
        },
        "POICommunicationType2Code": {
            "enum": [
                "BLTH",
                "ETHR",
                "GPRS",
                "GSMF",
                "PSTN",
                "RS23",
                "USBD",
                "USBH",
                "WIFI",
                "WT2G",
                "WT3G",
                "WT4G",
                "WT5G"
            ],
            "type": "string",
            "description": "Low level communication of the hardware or software component toward another component or an external entity. \nCode: USBH: \t USBHost: \tDefinition: Communication with a host from an USB port. \nCode: USBD: \t USBDevice: \tDefinition: Communication with a USB stick or any USB device. \nCode: ETHR: \t Ethernet: \tDefinition: Ethernet port to communicate. \nCode: WIFI: \t Wifi: \tDefinition: Wifi communication with another component. \nCode: PSTN: \t PSTN: \tDefinition: Communication with a host using Public Switching Telephone Network. \nCode: BLTH: \t Bluetooth: \tDefinition: Communication with a host using Bluetooth. \nCode: GSMF: \t GSM: \tDefinition: Communication with a host using GSM. \nCode: GPRS: \t GPRS: \tDefinition: Communication with a host using GPRS. \nCode: RS23: \t RS232: \tDefinition: Serial port to communicate. \nCode: WT2G: \t WirelessTechnology2G: \tDefinition: Includes all communication technologies which can be qualified as being part of the 2G technology (e.g EDGE or PDC). \nCode: WT3G: \t WirelessTechnology3G: \tDefinition: Includes all communication technologies which can be qualified as being part of the 3G technology. \nCode: WT4G: \t WirelessTechnology4G: \tDefinition: Includes all communication technologies which can be qualified as being part of the 4G technology. \nCode: WT5G: \t WirelessTechnology5G: \tDefinition: Includes all communication technologies which can be qualified as being part of the 5G technology."
        },
        "POIComponentAssessment1Code": {
            "enum": [
                "APPL",
                "CERT",
                "EVAL"
            ],
            "type": "string",
            "description": "Type of assessment of a POI component (Point of Interaction). \nCode: EVAL: \t Evaluation: \tDefinition: Evaluation by a lab or a tool. \nCode: CERT: \t Certification: \tDefinition: Certification number delivered by a certification body. \nCode: APPL: \t Approval: \tDefinition: Approval number delivered by an approval centre."
        },
        "POIComponentStatus1Code": {
            "enum": [
                "WAIT",
                "OUTD",
                "OPER",
                "DACT"
            ],
            "type": "string",
            "description": "Status of a component belonging to a POI Terminal (Point of Interaction). \nCode: WAIT: \t WaitingActivation: \tDefinition: Component not yet activated. \nCode: OPER: \t InOperation: \tDefinition: Component activated and in operation. \nCode: OUTD: \t OutOfOrder: \tDefinition: Component not working properly. \nCode: DACT: \t Deactivated: \tDefinition: Component has been deactivated."
        },
        "POIComponentType6Code": {
            "enum": [
                "AQPP",
                "APPR",
                "TLPR",
                "SCPR",
                "SERV",
                "TERM",
                "DVCE",
                "SECM",
                "APLI",
                "EMVK",
                "EMVO",
                "MDWR",
                "DRVR",
                "OPST",
                "MRPR",
                "CRTF",
                "TMSP",
                "SACP",
                "SAPR",
                "LOGF",
                "MDFL",
                "SOFT",
                "CONF",
                "RPFL"
            ],
            "type": "string",
            "description": "Type of component belonging to a POI (Point of Interaction) Terminal. \nCode: SOFT: \t Soft: \tDefinition: Payment or other software application. \nCode: EMVK: \t EMVKernel: \tDefinition: EMV application kernel (EMV is the chip card specifications initially defined by Eurocard, Mastercard and Visa). \nCode: EMVO: \t EMVLevel1: \tDefinition: EMV physical interface (EMV is the chip card specifications initially defined by Eurocard, Mastercard and Visa). \nCode: MRIT: \t MerchantInterface: \tDefinition: Merchant interface. \nCode: CHIT: \t CardholderInterface: \tDefinition: Cardholder Interface. \nCode: SECM: \t SecureModule: \tDefinition: Security module. \nCode: PEDV: \t PINEntryDevice: \tDefinition: Personal identification number (or PIN) entry device (PED). \nCode: AQPR: \t AcquirerParameters: \tDefinition: Acquirer specific configuration parameters for the point of interaction (POI) system. \nCode: MRPR: \t MerchantParameters: \tDefinition: Merchant configuration parameters for the point of interaction (POI). \nCode: VDPR: \t VendorParameters: \tDefinition: Point of interaction parameters defined by the manufacturer for instance the PIN verification capabilities. \nCode: AQPP: \t AcquirerProtocolParameters: \tDefinition: Parameters for acquirer interface of the point of interaction, including acquirer host configuration parameters. \nCode: APPR: \t ApplicationParameters: \tDefinition: Parameters of a payment application running on the point of interaction. \nCode: DVCE: \t Device: \tDefinition: Device sub-component of a component of the point of interaction. \nCode: DRVR: \t Driver: \tDefinition: Driver module of the point of interaction. \nCode: MDWR: \t Middleware: \tDefinition: Software module of the point of interaction. \nCode: OPST: \t OperatingSystem: \tDefinition: Software that manages hardware to provide common services to the applications. \nCode: APLI: \t PaymentApplication: \tDefinition: Payment application software. \nCode: SCPR: \t SecurityParameters: \tDefinition: Security parameters of the point of interaction. \nCode: SERV: \t Server: \tDefinition: Payment server of a point of interaction system. \nCode: TERM: \t Terminal: \tDefinition: Payment terminal point of interaction. \nCode: TLPR: \t TerminalParameters: \tDefinition: Manufacturer configuration parameters of the point of interaction. \nCode: CRTF: \t CertificateParameters: \tDefinition: Certificate provided by a terminal manager. \nCode: TMSP: \t TMSProtocolParameters: \tDefinition: Configuration parameters for the TMS protocol. \nCode: SAPR: \t SaleToPOIProtocolParameters: \tDefinition: Parameters related to the Sale to POI protocol. \nCode: SACP: \t SaleComponent: \tDefinition: Component of the Sale system. \nCode: LOGF: \t LogFile: \tDefinition: Any repository used for recording log traces. \nCode: MDFL: \t MediaFile: \tDefinition: Media file managed by an application of the POI. \nCode: CONF: \t ConfigurationFile: \tDefinition: Configuration file relevant for the POI. \nCode: RPFL: \t ReportFile: \tDefinition: Report file generated by the POI."
        },
        "PackageType5": {
            "additionalProperties": false,
            "properties": {
                "OffsetEnd": {
                    "$ref": "#/$defs/PositiveNumber",
                    "description": "Following place of the last following PackageBlock in the full software package identified through PackageIdentification."
                },
                "OffsetStart": {
                    "$ref": "#/$defs/PositiveNumber",
                    "description": "Place of the first following PackageBlock, beginning with 0, in the full software package identified through PackageIdentification."
                },
                "PackageBlock": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ExternallyDefinedData5"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/ExternallyDefinedData5"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Consecutive slices of the full software package identified through PackageIdentification starting with first slice at the place identified with OffsetStart and ending with the last slice at the previous place identified with OffsetEnd."
                },
                "PackageIdentification": {
                    "$ref": "#/$defs/GenericIdentification176",
                    "description": "Identification of the software packages of which the chunk belongs."
                },
                "PackageLength": {
                    "$ref": "#/$defs/PositiveNumber",
                    "description": "Full length of software package identified through PackageIdentification."
                }
            },
            "type": "object",
            "description": "Chunk of a software package."
        },
        "Parameter12": {
            "additionalProperties": false,
            "properties": {
                "BytePadding": {
                    "$ref": "#/$defs/BytePadding1Code",
                    "description": "Byte padding for a cypher block chaining mode encryption, if the padding is not implicit."
                },
                "InitialisationVector": {
                    "$ref": "#/$defs/Max500Binary",
                    "description": "Initialisation vector of a cipher block chaining (CBC) mode encryption."
                },
                "EncryptionFormat": {
                    "$ref": "#/$defs/EncryptionFormat2Code",
                    "description": "Format of data before encryption, if the format is not plaintext or implicit."
                }
            },
            "type": "object",
            "description": "Parameters associated to a cryptographic encryption algorithm."
        },
        "Parameter16": {
            "additionalProperties": false,
            "properties": {
                "DigestAlgorithm": {
                    "$ref": "#/$defs/Algorithm26Code",
                    "description": "Identification of the digest algorithm."
                },
                "MaskGeneratorAlgorithm": {
                    "$ref": "#/$defs/AlgorithmIdentification34",
                    "description": "Mask generator function cryptographic algorithm and parameters."
                },
                "OIDCurveName": {
                    "$ref": "#/$defs/Max140Text",
                    "description": "Name of the Elliptic Curve according to the OID notation."
                },
                "SaltLength": {
                    "$ref": "#/$defs/Number",
                    "description": "Length of the salt to include in the signature."
                },
                "TrailerField": {
                    "$ref": "#/$defs/Number",
                    "description": "Trailer field number."
                }
            },
            "type": "object",
            "description": "Parameters of the RSASSA-PSS digital signature algorithm (RSA signature algorithm with appendix: Probabilistic Signature Scheme)."
        },
        "Parameter17": {
            "additionalProperties": false,
            "properties": {
                "DigestAlgorithm": {
                    "$ref": "#/$defs/Algorithm26Code",
                    "description": "Identification of the digest algorithm."
                },
                "MaskGeneratorAlgorithm": {
                    "$ref": "#/$defs/AlgorithmIdentification34",
                    "description": "Mask generator function cryptographic algorithm and parameters."
                },
                "EncryptionFormat": {
                    "$ref": "#/$defs/EncryptionFormat2Code",
                    "description": "Format of data before encryption, if the format is not plaintext or implicit."
                }
            },
            "type": "object",
            "description": "Parameters of the asymmetric encryption algorithm."
        },
        "Parameter18": {
            "additionalProperties": false,
            "properties": {
                "DigestAlgorithm": {
                    "$ref": "#/$defs/Algorithm26Code",
                    "description": "Digest algorithm used in the mask generator function."
                }
            },
            "type": "object",
            "description": "Parameters associated to a mask generator cryptographic function."
        },
        "Parameter7": {
            "additionalProperties": false,
            "properties": {
                "BytePadding": {
                    "$ref": "#/$defs/BytePadding1Code",
                    "description": "Byte padding for a cypher block chaining mode encryption, if the padding is not implicit."
                },
                "InitialisationVector": {
                    "$ref": "#/$defs/Max500Binary",
                    "description": "Initialisation vector of a cipher block chaining (CBC) mode encryption."
                }
            },
            "type": "object",
            "description": "Parameters associated to the MAC algorithm."
        },
        "PartyIdentification178Choice": {
            "additionalProperties": false,
            "properties": {
                "AnyBIC": {
                    "$ref": "#/$defs/AnyBICDec2014Identifier",
                    "description": "Unique and unambiguous identifier for an organisation that is allocated by an institution, for example, Dun & Bradstreet Identification."
                },
                "NameAndAddress": {
                    "$ref": "#/$defs/NameAndAddress6",
                    "description": "Name by which a party is known and which is usually used to identify that party."
                },
                "ProprietaryIdentification": {
                    "$ref": "#/$defs/GenericIdentification36",
                    "description": "Unique and unambiguous identifier, as assigned to a financial institution using a proprietary identification scheme."
                }
            },
            "type": "object",
            "description": "Identification of a party."
        },
        "PartyType14Code": {
            "enum": [
                "OPOI",
                "MERC",
                "ACCP",
                "ITAG",
                "ACQR",
                "CISS",
                "DLIS",
                "ICCA"
            ],
            "type": "string",
            "description": "Identification of the type of entity involved in a transaction. \nCode: SALE: \t SaleSystem: \tDefinition: Party selling goods and services. \nCode: PCPT: \t POIComponent: \tDefinition: Party component of a POI system or POI terminal (Point of Interaction). \nCode: ISUR: \t Issuer: \tDefinition: Issuer is the entitled party. \nCode: HLDR: \t Holder: \tDefinition: Holder is the entitled party. \nCode: INVE: \t Investor: \tDefinition: Party, either an individual or organisation, whose assets are being invested. \nCode: EXEC: \t ExecutingFirm: \tDefinition: Party that identifies an executing / give-up broker. \nCode: BROK: \t BrokerOfCredit: \tDefinition: Party that receives the trade credit. \nCode: CORR: \t CorrespondentClearingFirm: \tDefinition: Party that is going to carry the position on their books at another clearinghouse (exchanges). \nCode: COFI: \t ContraFirm: \tDefinition: Party that is the counterparty in a trade. \nCode: COCL: \t ContraClearingFirm: \tDefinition: Party that is the clearing firm of the counterparty in a trade. \nCode: UNDE: \t UnderlyingContraFirm: \tDefinition: Party (broker or other firm), which is the contra side of the trade for the underlying security. \nCode: GIVE: \t GiveUpClearingFirm: \tDefinition: Party to which the trade is given up (carries the position that results from a trade). \nCode: ORDE: \t OrderOriginationFirm: \tDefinition: Party that originates an order. \nCode: SPON: \t SponsoringFirm: \tDefinition: Party (member of an exchange)that is sponsoring an entering firm to send orders directly to the exchange. \nCode: CLEA: \t Clearingfirm: \tDefinition: Party (broker) that settles security transactions from another broker for a fee = take up broker. \nCode: INTR: \t IntroducingFirm: \tDefinition: Party that can relay an order directly to the trading floor, or give clients direct access to the floor. The introducing firm delegates the work of the floor operation, trade execution and accounting. \nCode: ENTE: \t EnteringFirm: \tDefinition: Party that has recorded or reported an execution of a trade. When an entering firm that is not a party to a trade enters the trade into a trade recording system, any inquiries can be directed to the appropriate source. \nCode: CLIE: \t Client: \tDefinition: A client is identified in third party-transactions or for investor in intermediary transactions. \nCode: STEP: \t StepInBroker: \tDefinition: Broker to which the investment manager directs the execution of a portion of the trade. \nCode: AFFI: \t AffirmingParty: \tDefinition: Party (buyer or seller) that positively affirms the details of a previously agreed security trade confirmation. \nCode: ETC1: \t ETCServiceProvider1: \tDefinition: Party acting as the Electronic Trade Confirmation (ETC) service provider 1. \nCode: ETC2: \t ETCServiceProvider2: \tDefinition: Party acting as the Electronic Trade Confirmation (ETC) service provider 2. \nCode: RQBR: \t RequestedBroker: \tDefinition: In a directed order, broker with which the Receiver of the message is requested to execute the order. \nCode: TAXH: \t TaxAuthority: \tDefinition: Tax authority. \nCode: DLIS: \t DelegateIssuer: \tDefinition: Party to whom the card issuer delegates to authorise card payment transactions. \nCode: OPOI: \t OriginatingPOI: \tDefinition: Point Of Interaction initiating the card payment transaction. \nCode: CISS: \t CardIssuer: \tDefinition: Party that issues cards. \nCode: ACCP: \t Acceptor: \tDefinition: Card acceptor, party accepting the card and presenting transaction data to the acquirer. \nCode: MERC: \t Merchant: \tDefinition: Merchant providing goods and service in the card payment transaction. \nCode: ACQR: \t Acquirer: \tDefinition: Entity acquiring card transactions. \nCode: ITAG: \t IntermediaryAgent: \tDefinition: Party acting on behalf of other parties to process or forward data to other parties. \nCode: MTMG: \t MasterTerminalManager: \tDefinition: Responsible for the maintenance of a card payment acceptance terminal. \nCode: TMGT: \t TerminalManager: \tDefinition: Responsible for one or several maintenance functions of a card payment acceptance terminal. \nCode: ACQP: \t AcquirerProcessor: \tDefinition: Entity providing acquiring card payment processing services on behalf on an acquirer. \nCode: CISP: \t CardIssuerProcessor: \tDefinition: Entity providing issuing card payment processing services on behalf on an issuer. \nCode: CSCH: \t CardScheme: \tDefinition: Entity defining rules and procedures for card payment transactions acting as an intermediary between an acquirer and an issuer. \nCode: SCHP: \t CardSchemeProcessor: \tDefinition: Entity providing card payment processing services acting on behalf of a card scheme. \nCode: ATMG: \t ATMManager: \tDefinition: Entity managing the ATM. \nCode: HSTG: \t HostingEntity: \tDefinition: Entity hosting the ATM. \nCode: OATM: \t OriginatingATM: \tDefinition: ATM initiating the transaction. \nCode: OTRM: \t OriginatingTerminal: \tDefinition: Application on the terminal which has initiated the transaction. \nCode: ICCA: \t CardApplication: \tDefinition: Application in the smart card. \nCode: PSYS: \t POISystem: \tDefinition: Configuration to apply to the whole POI system. \nCode: PGRP: \t POIGroup: \tDefinition: Configuration to apply to a subset of the whole POI system. \nCode: PSNG: \t SinglePOI: \tDefinition: Configuration to apply to a single POI terminal. \nCode: BKAF: \t AccountFromBank: \tDefinition: The bank of the source account. \nCode: BKAT: \t AccountToBank: \tDefinition: The bank of the destination account. \nCode: AGNT: \t Agent: \tDefinition: Entity providing card payment processing services acting as an intermediary between an acquirer and an issuer. \nCode: CRDH: \t Cardholder: \tDefinition: Holder of a payment card. \nCode: CLRA: \t ClearingAgent: \tDefinition: Agent in charge of clearing payment or related transactions. \nCode: GVIU: \t GovernmentInvestigationUnit: \tDefinition: Government organisation investigation unit.  \nCode: OTHN: \t OtherNational: \tDefinition: Other card payment entity type defined at national level \nCode: OTHP: \t OtherPrivate: \tDefinition: Other card payment entity type defined at private level \nCode: PISP: \t PaymentInitiationServiceProvider: \tDefinition: Payment Initiation Service Provider (PISP) \nCode: PASP: \t PaymentServiceProvider: \tDefinition: Entity provding payments services. \nCode: POOI: \t PointOfInteraction: \tDefinition: Party in charge of controlling or supervising a card acceptance Point of Interaction \nCode: SETA: \t SettlementAgent: \tDefinition: Agent in charge of the settlement of a payment or related transaction. \nCode: WLPR: \t WalletProvider: \tDefinition: Provider of an electronic wallet"
        },
        "PartyType33Code": {
            "enum": [
                "OPOI",
                "MERC",
                "ACCP",
                "ITAG",
                "ACQR",
                "CISS",
                "DLIS",
                "MTMG",
                "TAXH",
                "TMGT"
            ],
            "type": "string",
            "description": "Identification of the type of entity involved in a transaction. \nCode: SALE: \t SaleSystem: \tDefinition: Party selling goods and services. \nCode: PCPT: \t POIComponent: \tDefinition: Party component of a POI system or POI terminal (Point of Interaction). \nCode: ISUR: \t Issuer: \tDefinition: Issuer is the entitled party. \nCode: HLDR: \t Holder: \tDefinition: Holder is the entitled party. \nCode: INVE: \t Investor: \tDefinition: Party, either an individual or organisation, whose assets are being invested. \nCode: EXEC: \t ExecutingFirm: \tDefinition: Party that identifies an executing / give-up broker. \nCode: BROK: \t BrokerOfCredit: \tDefinition: Party that receives the trade credit. \nCode: CORR: \t CorrespondentClearingFirm: \tDefinition: Party that is going to carry the position on their books at another clearinghouse (exchanges). \nCode: COFI: \t ContraFirm: \tDefinition: Party that is the counterparty in a trade. \nCode: COCL: \t ContraClearingFirm: \tDefinition: Party that is the clearing firm of the counterparty in a trade. \nCode: UNDE: \t UnderlyingContraFirm: \tDefinition: Party (broker or other firm), which is the contra side of the trade for the underlying security. \nCode: GIVE: \t GiveUpClearingFirm: \tDefinition: Party to which the trade is given up (carries the position that results from a trade). \nCode: ORDE: \t OrderOriginationFirm: \tDefinition: Party that originates an order. \nCode: SPON: \t SponsoringFirm: \tDefinition: Party (member of an exchange)that is sponsoring an entering firm to send orders directly to the exchange. \nCode: CLEA: \t Clearingfirm: \tDefinition: Party (broker) that settles security transactions from another broker for a fee = take up broker. \nCode: INTR: \t IntroducingFirm: \tDefinition: Party that can relay an order directly to the trading floor, or give clients direct access to the floor. The introducing firm delegates the work of the floor operation, trade execution and accounting. \nCode: ENTE: \t EnteringFirm: \tDefinition: Party that has recorded or reported an execution of a trade. When an entering firm that is not a party to a trade enters the trade into a trade recording system, any inquiries can be directed to the appropriate source. \nCode: CLIE: \t Client: \tDefinition: A client is identified in third party-transactions or for investor in intermediary transactions. \nCode: STEP: \t StepInBroker: \tDefinition: Broker to which the investment manager directs the execution of a portion of the trade. \nCode: AFFI: \t AffirmingParty: \tDefinition: Party (buyer or seller) that positively affirms the details of a previously agreed security trade confirmation. \nCode: ETC1: \t ETCServiceProvider1: \tDefinition: Party acting as the Electronic Trade Confirmation (ETC) service provider 1. \nCode: ETC2: \t ETCServiceProvider2: \tDefinition: Party acting as the Electronic Trade Confirmation (ETC) service provider 2. \nCode: RQBR: \t RequestedBroker: \tDefinition: In a directed order, broker with which the Receiver of the message is requested to execute the order. \nCode: TAXH: \t TaxAuthority: \tDefinition: Tax authority. \nCode: DLIS: \t DelegateIssuer: \tDefinition: Party to whom the card issuer delegates to authorise card payment transactions. \nCode: OPOI: \t OriginatingPOI: \tDefinition: Point Of Interaction initiating the card payment transaction. \nCode: CISS: \t CardIssuer: \tDefinition: Party that issues cards. \nCode: ACCP: \t Acceptor: \tDefinition: Card acceptor, party accepting the card and presenting transaction data to the acquirer. \nCode: MERC: \t Merchant: \tDefinition: Merchant providing goods and service in the card payment transaction. \nCode: ACQR: \t Acquirer: \tDefinition: Entity acquiring card transactions. \nCode: ITAG: \t IntermediaryAgent: \tDefinition: Party acting on behalf of other parties to process or forward data to other parties. \nCode: MTMG: \t MasterTerminalManager: \tDefinition: Responsible for the maintenance of a card payment acceptance terminal. \nCode: TMGT: \t TerminalManager: \tDefinition: Responsible for one or several maintenance functions of a card payment acceptance terminal. \nCode: ACQP: \t AcquirerProcessor: \tDefinition: Entity providing acquiring card payment processing services on behalf on an acquirer. \nCode: CISP: \t CardIssuerProcessor: \tDefinition: Entity providing issuing card payment processing services on behalf on an issuer. \nCode: CSCH: \t CardScheme: \tDefinition: Entity defining rules and procedures for card payment transactions acting as an intermediary between an acquirer and an issuer. \nCode: SCHP: \t CardSchemeProcessor: \tDefinition: Entity providing card payment processing services acting on behalf of a card scheme. \nCode: ATMG: \t ATMManager: \tDefinition: Entity managing the ATM. \nCode: HSTG: \t HostingEntity: \tDefinition: Entity hosting the ATM. \nCode: OATM: \t OriginatingATM: \tDefinition: ATM initiating the transaction. \nCode: OTRM: \t OriginatingTerminal: \tDefinition: Application on the terminal which has initiated the transaction. \nCode: ICCA: \t CardApplication: \tDefinition: Application in the smart card. \nCode: PSYS: \t POISystem: \tDefinition: Configuration to apply to the whole POI system. \nCode: PGRP: \t POIGroup: \tDefinition: Configuration to apply to a subset of the whole POI system. \nCode: PSNG: \t SinglePOI: \tDefinition: Configuration to apply to a single POI terminal. \nCode: BKAF: \t AccountFromBank: \tDefinition: The bank of the source account. \nCode: BKAT: \t AccountToBank: \tDefinition: The bank of the destination account. \nCode: AGNT: \t Agent: \tDefinition: Entity providing card payment processing services acting as an intermediary between an acquirer and an issuer. \nCode: CRDH: \t Cardholder: \tDefinition: Holder of a payment card. \nCode: CLRA: \t ClearingAgent: \tDefinition: Agent in charge of clearing payment or related transactions. \nCode: GVIU: \t GovernmentInvestigationUnit: \tDefinition: Government organisation investigation unit.  \nCode: OTHN: \t OtherNational: \tDefinition: Other card payment entity type defined at national level \nCode: OTHP: \t OtherPrivate: \tDefinition: Other card payment entity type defined at private level \nCode: PISP: \t PaymentInitiationServiceProvider: \tDefinition: Payment Initiation Service Provider (PISP) \nCode: PASP: \t PaymentServiceProvider: \tDefinition: Entity provding payments services. \nCode: POOI: \t PointOfInteraction: \tDefinition: Party in charge of controlling or supervising a card acceptance Point of Interaction \nCode: SETA: \t SettlementAgent: \tDefinition: Agent in charge of the settlement of a payment or related transaction. \nCode: WLPR: \t WalletProvider: \tDefinition: Provider of an electronic wallet"
        },
        "PartyType3Code": {
            "enum": [
                "OPOI",
                "MERC",
                "ACCP",
                "ITAG",
                "ACQR",
                "CISS",
                "DLIS"
            ],
            "type": "string",
            "description": "Identification of the type of entity involved in a transaction. \nCode: SALE: \t SaleSystem: \tDefinition: Party selling goods and services. \nCode: PCPT: \t POIComponent: \tDefinition: Party component of a POI system or POI terminal (Point of Interaction). \nCode: ISUR: \t Issuer: \tDefinition: Issuer is the entitled party. \nCode: HLDR: \t Holder: \tDefinition: Holder is the entitled party. \nCode: INVE: \t Investor: \tDefinition: Party, either an individual or organisation, whose assets are being invested. \nCode: EXEC: \t ExecutingFirm: \tDefinition: Party that identifies an executing / give-up broker. \nCode: BROK: \t BrokerOfCredit: \tDefinition: Party that receives the trade credit. \nCode: CORR: \t CorrespondentClearingFirm: \tDefinition: Party that is going to carry the position on their books at another clearinghouse (exchanges). \nCode: COFI: \t ContraFirm: \tDefinition: Party that is the counterparty in a trade. \nCode: COCL: \t ContraClearingFirm: \tDefinition: Party that is the clearing firm of the counterparty in a trade. \nCode: UNDE: \t UnderlyingContraFirm: \tDefinition: Party (broker or other firm), which is the contra side of the trade for the underlying security. \nCode: GIVE: \t GiveUpClearingFirm: \tDefinition: Party to which the trade is given up (carries the position that results from a trade). \nCode: ORDE: \t OrderOriginationFirm: \tDefinition: Party that originates an order. \nCode: SPON: \t SponsoringFirm: \tDefinition: Party (member of an exchange)that is sponsoring an entering firm to send orders directly to the exchange. \nCode: CLEA: \t Clearingfirm: \tDefinition: Party (broker) that settles security transactions from another broker for a fee = take up broker. \nCode: INTR: \t IntroducingFirm: \tDefinition: Party that can relay an order directly to the trading floor, or give clients direct access to the floor. The introducing firm delegates the work of the floor operation, trade execution and accounting. \nCode: ENTE: \t EnteringFirm: \tDefinition: Party that has recorded or reported an execution of a trade. When an entering firm that is not a party to a trade enters the trade into a trade recording system, any inquiries can be directed to the appropriate source. \nCode: CLIE: \t Client: \tDefinition: A client is identified in third party-transactions or for investor in intermediary transactions. \nCode: STEP: \t StepInBroker: \tDefinition: Broker to which the investment manager directs the execution of a portion of the trade. \nCode: AFFI: \t AffirmingParty: \tDefinition: Party (buyer or seller) that positively affirms the details of a previously agreed security trade confirmation. \nCode: ETC1: \t ETCServiceProvider1: \tDefinition: Party acting as the Electronic Trade Confirmation (ETC) service provider 1. \nCode: ETC2: \t ETCServiceProvider2: \tDefinition: Party acting as the Electronic Trade Confirmation (ETC) service provider 2. \nCode: RQBR: \t RequestedBroker: \tDefinition: In a directed order, broker with which the Receiver of the message is requested to execute the order. \nCode: TAXH: \t TaxAuthority: \tDefinition: Tax authority. \nCode: DLIS: \t DelegateIssuer: \tDefinition: Party to whom the card issuer delegates to authorise card payment transactions. \nCode: OPOI: \t OriginatingPOI: \tDefinition: Point Of Interaction initiating the card payment transaction. \nCode: CISS: \t CardIssuer: \tDefinition: Party that issues cards. \nCode: ACCP: \t Acceptor: \tDefinition: Card acceptor, party accepting the card and presenting transaction data to the acquirer. \nCode: MERC: \t Merchant: \tDefinition: Merchant providing goods and service in the card payment transaction. \nCode: ACQR: \t Acquirer: \tDefinition: Entity acquiring card transactions. \nCode: ITAG: \t IntermediaryAgent: \tDefinition: Party acting on behalf of other parties to process or forward data to other parties. \nCode: MTMG: \t MasterTerminalManager: \tDefinition: Responsible for the maintenance of a card payment acceptance terminal. \nCode: TMGT: \t TerminalManager: \tDefinition: Responsible for one or several maintenance functions of a card payment acceptance terminal. \nCode: ACQP: \t AcquirerProcessor: \tDefinition: Entity providing acquiring card payment processing services on behalf on an acquirer. \nCode: CISP: \t CardIssuerProcessor: \tDefinition: Entity providing issuing card payment processing services on behalf on an issuer. \nCode: CSCH: \t CardScheme: \tDefinition: Entity defining rules and procedures for card payment transactions acting as an intermediary between an acquirer and an issuer. \nCode: SCHP: \t CardSchemeProcessor: \tDefinition: Entity providing card payment processing services acting on behalf of a card scheme. \nCode: ATMG: \t ATMManager: \tDefinition: Entity managing the ATM. \nCode: HSTG: \t HostingEntity: \tDefinition: Entity hosting the ATM. \nCode: OATM: \t OriginatingATM: \tDefinition: ATM initiating the transaction. \nCode: OTRM: \t OriginatingTerminal: \tDefinition: Application on the terminal which has initiated the transaction. \nCode: ICCA: \t CardApplication: \tDefinition: Application in the smart card. \nCode: PSYS: \t POISystem: \tDefinition: Configuration to apply to the whole POI system. \nCode: PGRP: \t POIGroup: \tDefinition: Configuration to apply to a subset of the whole POI system. \nCode: PSNG: \t SinglePOI: \tDefinition: Configuration to apply to a single POI terminal. \nCode: BKAF: \t AccountFromBank: \tDefinition: The bank of the source account. \nCode: BKAT: \t AccountToBank: \tDefinition: The bank of the destination account. \nCode: AGNT: \t Agent: \tDefinition: Entity providing card payment processing services acting as an intermediary between an acquirer and an issuer. \nCode: CRDH: \t Cardholder: \tDefinition: Holder of a payment card. \nCode: CLRA: \t ClearingAgent: \tDefinition: Agent in charge of clearing payment or related transactions. \nCode: GVIU: \t GovernmentInvestigationUnit: \tDefinition: Government organisation investigation unit.  \nCode: OTHN: \t OtherNational: \tDefinition: Other card payment entity type defined at national level \nCode: OTHP: \t OtherPrivate: \tDefinition: Other card payment entity type defined at private level \nCode: PISP: \t PaymentInitiationServiceProvider: \tDefinition: Payment Initiation Service Provider (PISP) \nCode: PASP: \t PaymentServiceProvider: \tDefinition: Entity provding payments services. \nCode: POOI: \t PointOfInteraction: \tDefinition: Party in charge of controlling or supervising a card acceptance Point of Interaction \nCode: SETA: \t SettlementAgent: \tDefinition: Agent in charge of the settlement of a payment or related transaction. \nCode: WLPR: \t WalletProvider: \tDefinition: Provider of an electronic wallet"
        },
        "PartyType4Code": {
            "enum": [
                "MERC",
                "ACCP",
                "ITAG",
                "ACQR",
                "CISS",
                "TAXH"
            ],
            "type": "string",
            "description": "Entity assigning an identification (for example merchant, acceptor, acquirer, tax authority, etc.). \nCode: SALE: \t SaleSystem: \tDefinition: Party selling goods and services. \nCode: PCPT: \t POIComponent: \tDefinition: Party component of a POI system or POI terminal (Point of Interaction). \nCode: ISUR: \t Issuer: \tDefinition: Issuer is the entitled party. \nCode: HLDR: \t Holder: \tDefinition: Holder is the entitled party. \nCode: INVE: \t Investor: \tDefinition: Party, either an individual or organisation, whose assets are being invested. \nCode: EXEC: \t ExecutingFirm: \tDefinition: Party that identifies an executing / give-up broker. \nCode: BROK: \t BrokerOfCredit: \tDefinition: Party that receives the trade credit. \nCode: CORR: \t CorrespondentClearingFirm: \tDefinition: Party that is going to carry the position on their books at another clearinghouse (exchanges). \nCode: COFI: \t ContraFirm: \tDefinition: Party that is the counterparty in a trade. \nCode: COCL: \t ContraClearingFirm: \tDefinition: Party that is the clearing firm of the counterparty in a trade. \nCode: UNDE: \t UnderlyingContraFirm: \tDefinition: Party (broker or other firm), which is the contra side of the trade for the underlying security. \nCode: GIVE: \t GiveUpClearingFirm: \tDefinition: Party to which the trade is given up (carries the position that results from a trade). \nCode: ORDE: \t OrderOriginationFirm: \tDefinition: Party that originates an order. \nCode: SPON: \t SponsoringFirm: \tDefinition: Party (member of an exchange)that is sponsoring an entering firm to send orders directly to the exchange. \nCode: CLEA: \t Clearingfirm: \tDefinition: Party (broker) that settles security transactions from another broker for a fee = take up broker. \nCode: INTR: \t IntroducingFirm: \tDefinition: Party that can relay an order directly to the trading floor, or give clients direct access to the floor. The introducing firm delegates the work of the floor operation, trade execution and accounting. \nCode: ENTE: \t EnteringFirm: \tDefinition: Party that has recorded or reported an execution of a trade. When an entering firm that is not a party to a trade enters the trade into a trade recording system, any inquiries can be directed to the appropriate source. \nCode: CLIE: \t Client: \tDefinition: A client is identified in third party-transactions or for investor in intermediary transactions. \nCode: STEP: \t StepInBroker: \tDefinition: Broker to which the investment manager directs the execution of a portion of the trade. \nCode: AFFI: \t AffirmingParty: \tDefinition: Party (buyer or seller) that positively affirms the details of a previously agreed security trade confirmation. \nCode: ETC1: \t ETCServiceProvider1: \tDefinition: Party acting as the Electronic Trade Confirmation (ETC) service provider 1. \nCode: ETC2: \t ETCServiceProvider2: \tDefinition: Party acting as the Electronic Trade Confirmation (ETC) service provider 2. \nCode: RQBR: \t RequestedBroker: \tDefinition: In a directed order, broker with which the Receiver of the message is requested to execute the order. \nCode: TAXH: \t TaxAuthority: \tDefinition: Tax authority. \nCode: DLIS: \t DelegateIssuer: \tDefinition: Party to whom the card issuer delegates to authorise card payment transactions. \nCode: OPOI: \t OriginatingPOI: \tDefinition: Point Of Interaction initiating the card payment transaction. \nCode: CISS: \t CardIssuer: \tDefinition: Party that issues cards. \nCode: ACCP: \t Acceptor: \tDefinition: Card acceptor, party accepting the card and presenting transaction data to the acquirer. \nCode: MERC: \t Merchant: \tDefinition: Merchant providing goods and service in the card payment transaction. \nCode: ACQR: \t Acquirer: \tDefinition: Entity acquiring card transactions. \nCode: ITAG: \t IntermediaryAgent: \tDefinition: Party acting on behalf of other parties to process or forward data to other parties. \nCode: MTMG: \t MasterTerminalManager: \tDefinition: Responsible for the maintenance of a card payment acceptance terminal. \nCode: TMGT: \t TerminalManager: \tDefinition: Responsible for one or several maintenance functions of a card payment acceptance terminal. \nCode: ACQP: \t AcquirerProcessor: \tDefinition: Entity providing acquiring card payment processing services on behalf on an acquirer. \nCode: CISP: \t CardIssuerProcessor: \tDefinition: Entity providing issuing card payment processing services on behalf on an issuer. \nCode: CSCH: \t CardScheme: \tDefinition: Entity defining rules and procedures for card payment transactions acting as an intermediary between an acquirer and an issuer. \nCode: SCHP: \t CardSchemeProcessor: \tDefinition: Entity providing card payment processing services acting on behalf of a card scheme. \nCode: ATMG: \t ATMManager: \tDefinition: Entity managing the ATM. \nCode: HSTG: \t HostingEntity: \tDefinition: Entity hosting the ATM. \nCode: OATM: \t OriginatingATM: \tDefinition: ATM initiating the transaction. \nCode: OTRM: \t OriginatingTerminal: \tDefinition: Application on the terminal which has initiated the transaction. \nCode: ICCA: \t CardApplication: \tDefinition: Application in the smart card. \nCode: PSYS: \t POISystem: \tDefinition: Configuration to apply to the whole POI system. \nCode: PGRP: \t POIGroup: \tDefinition: Configuration to apply to a subset of the whole POI system. \nCode: PSNG: \t SinglePOI: \tDefinition: Configuration to apply to a single POI terminal. \nCode: BKAF: \t AccountFromBank: \tDefinition: The bank of the source account. \nCode: BKAT: \t AccountToBank: \tDefinition: The bank of the destination account. \nCode: AGNT: \t Agent: \tDefinition: Entity providing card payment processing services acting as an intermediary between an acquirer and an issuer. \nCode: CRDH: \t Cardholder: \tDefinition: Holder of a payment card. \nCode: CLRA: \t ClearingAgent: \tDefinition: Agent in charge of clearing payment or related transactions. \nCode: GVIU: \t GovernmentInvestigationUnit: \tDefinition: Government organisation investigation unit.  \nCode: OTHN: \t OtherNational: \tDefinition: Other card payment entity type defined at national level \nCode: OTHP: \t OtherPrivate: \tDefinition: Other card payment entity type defined at private level \nCode: PISP: \t PaymentInitiationServiceProvider: \tDefinition: Payment Initiation Service Provider (PISP) \nCode: PASP: \t PaymentServiceProvider: \tDefinition: Entity provding payments services. \nCode: POOI: \t PointOfInteraction: \tDefinition: Party in charge of controlling or supervising a card acceptance Point of Interaction \nCode: SETA: \t SettlementAgent: \tDefinition: Agent in charge of the settlement of a payment or related transaction. \nCode: WLPR: \t WalletProvider: \tDefinition: Provider of an electronic wallet"
        },
        "PartyType7Code": {
            "enum": [
                "ACQR",
                "ITAG",
                "PCPT",
                "TMGT",
                "SALE"
            ],
            "type": "string",
            "description": "Party that communicate with a POI component (Point of Interaction), using a communication device. \nCode: SALE: \t SaleSystem: \tDefinition: Party selling goods and services. \nCode: PCPT: \t POIComponent: \tDefinition: Party component of a POI system or POI terminal (Point of Interaction). \nCode: ISUR: \t Issuer: \tDefinition: Issuer is the entitled party. \nCode: HLDR: \t Holder: \tDefinition: Holder is the entitled party. \nCode: INVE: \t Investor: \tDefinition: Party, either an individual or organisation, whose assets are being invested. \nCode: EXEC: \t ExecutingFirm: \tDefinition: Party that identifies an executing / give-up broker. \nCode: BROK: \t BrokerOfCredit: \tDefinition: Party that receives the trade credit. \nCode: CORR: \t CorrespondentClearingFirm: \tDefinition: Party that is going to carry the position on their books at another clearinghouse (exchanges). \nCode: COFI: \t ContraFirm: \tDefinition: Party that is the counterparty in a trade. \nCode: COCL: \t ContraClearingFirm: \tDefinition: Party that is the clearing firm of the counterparty in a trade. \nCode: UNDE: \t UnderlyingContraFirm: \tDefinition: Party (broker or other firm), which is the contra side of the trade for the underlying security. \nCode: GIVE: \t GiveUpClearingFirm: \tDefinition: Party to which the trade is given up (carries the position that results from a trade). \nCode: ORDE: \t OrderOriginationFirm: \tDefinition: Party that originates an order. \nCode: SPON: \t SponsoringFirm: \tDefinition: Party (member of an exchange)that is sponsoring an entering firm to send orders directly to the exchange. \nCode: CLEA: \t Clearingfirm: \tDefinition: Party (broker) that settles security transactions from another broker for a fee = take up broker. \nCode: INTR: \t IntroducingFirm: \tDefinition: Party that can relay an order directly to the trading floor, or give clients direct access to the floor. The introducing firm delegates the work of the floor operation, trade execution and accounting. \nCode: ENTE: \t EnteringFirm: \tDefinition: Party that has recorded or reported an execution of a trade. When an entering firm that is not a party to a trade enters the trade into a trade recording system, any inquiries can be directed to the appropriate source. \nCode: CLIE: \t Client: \tDefinition: A client is identified in third party-transactions or for investor in intermediary transactions. \nCode: STEP: \t StepInBroker: \tDefinition: Broker to which the investment manager directs the execution of a portion of the trade. \nCode: AFFI: \t AffirmingParty: \tDefinition: Party (buyer or seller) that positively affirms the details of a previously agreed security trade confirmation. \nCode: ETC1: \t ETCServiceProvider1: \tDefinition: Party acting as the Electronic Trade Confirmation (ETC) service provider 1. \nCode: ETC2: \t ETCServiceProvider2: \tDefinition: Party acting as the Electronic Trade Confirmation (ETC) service provider 2. \nCode: RQBR: \t RequestedBroker: \tDefinition: In a directed order, broker with which the Receiver of the message is requested to execute the order. \nCode: TAXH: \t TaxAuthority: \tDefinition: Tax authority. \nCode: DLIS: \t DelegateIssuer: \tDefinition: Party to whom the card issuer delegates to authorise card payment transactions. \nCode: OPOI: \t OriginatingPOI: \tDefinition: Point Of Interaction initiating the card payment transaction. \nCode: CISS: \t CardIssuer: \tDefinition: Party that issues cards. \nCode: ACCP: \t Acceptor: \tDefinition: Card acceptor, party accepting the card and presenting transaction data to the acquirer. \nCode: MERC: \t Merchant: \tDefinition: Merchant providing goods and service in the card payment transaction. \nCode: ACQR: \t Acquirer: \tDefinition: Entity acquiring card transactions. \nCode: ITAG: \t IntermediaryAgent: \tDefinition: Party acting on behalf of other parties to process or forward data to other parties. \nCode: MTMG: \t MasterTerminalManager: \tDefinition: Responsible for the maintenance of a card payment acceptance terminal. \nCode: TMGT: \t TerminalManager: \tDefinition: Responsible for one or several maintenance functions of a card payment acceptance terminal. \nCode: ACQP: \t AcquirerProcessor: \tDefinition: Entity providing acquiring card payment processing services on behalf on an acquirer. \nCode: CISP: \t CardIssuerProcessor: \tDefinition: Entity providing issuing card payment processing services on behalf on an issuer. \nCode: CSCH: \t CardScheme: \tDefinition: Entity defining rules and procedures for card payment transactions acting as an intermediary between an acquirer and an issuer. \nCode: SCHP: \t CardSchemeProcessor: \tDefinition: Entity providing card payment processing services acting on behalf of a card scheme. \nCode: ATMG: \t ATMManager: \tDefinition: Entity managing the ATM. \nCode: HSTG: \t HostingEntity: \tDefinition: Entity hosting the ATM. \nCode: OATM: \t OriginatingATM: \tDefinition: ATM initiating the transaction. \nCode: OTRM: \t OriginatingTerminal: \tDefinition: Application on the terminal which has initiated the transaction. \nCode: ICCA: \t CardApplication: \tDefinition: Application in the smart card. \nCode: PSYS: \t POISystem: \tDefinition: Configuration to apply to the whole POI system. \nCode: PGRP: \t POIGroup: \tDefinition: Configuration to apply to a subset of the whole POI system. \nCode: PSNG: \t SinglePOI: \tDefinition: Configuration to apply to a single POI terminal. \nCode: BKAF: \t AccountFromBank: \tDefinition: The bank of the source account. \nCode: BKAT: \t AccountToBank: \tDefinition: The bank of the destination account. \nCode: AGNT: \t Agent: \tDefinition: Entity providing card payment processing services acting as an intermediary between an acquirer and an issuer. \nCode: CRDH: \t Cardholder: \tDefinition: Holder of a payment card. \nCode: CLRA: \t ClearingAgent: \tDefinition: Agent in charge of clearing payment or related transactions. \nCode: GVIU: \t GovernmentInvestigationUnit: \tDefinition: Government organisation investigation unit.  \nCode: OTHN: \t OtherNational: \tDefinition: Other card payment entity type defined at national level \nCode: OTHP: \t OtherPrivate: \tDefinition: Other card payment entity type defined at private level \nCode: PISP: \t PaymentInitiationServiceProvider: \tDefinition: Payment Initiation Service Provider (PISP) \nCode: PASP: \t PaymentServiceProvider: \tDefinition: Entity provding payments services. \nCode: POOI: \t PointOfInteraction: \tDefinition: Party in charge of controlling or supervising a card acceptance Point of Interaction \nCode: SETA: \t SettlementAgent: \tDefinition: Agent in charge of the settlement of a payment or related transaction. \nCode: WLPR: \t WalletProvider: \tDefinition: Provider of an electronic wallet"
        },
        "PaymentAccountRequest1": {
            "additionalProperties": false,
            "properties": {
                "AccountReference": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Reference of an account (all types)."
                },
                "AccountType": {
                    "$ref": "#/$defs/CardAccountType3Code",
                    "description": "Type of cardholder account used for the transaction. By Default the code Default is taken into account."
                },
                "CustomerOrder": {
                    "$ref": "#/$defs/CustomerOrder1",
                    "description": "To retrieve Card Acquisition Data."
                }
            },
            "type": "object",
            "description": "Data related to the account pointed by the payment card."
        },
        "PaymentCard35": {
            "additionalProperties": false,
            "properties": {
                "AdditionalCardData": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Additional card issuer specific data."
                },
                "AllowedProduct": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Max70Text"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Max70Text"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Product that can be purchased with the card."
                },
                "CardBrand": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Brand name of the card."
                },
                "CardCurrencyCode": {
                    "$ref": "#/$defs/Exact3AlphaNumericText",
                    "description": "Currency code of the card issuer (ISO 4217 numeric code)."
                },
                "CardCountryCode": {
                    "$ref": "#/$defs/Max3Text",
                    "description": "Country code assigned to the card by the card issuer."
                },
                "CardProductProfile": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Defines a category of cards related to the acceptance processing rules defined by the acquirer."
                },
                "CardProductSubType": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Additional information to identify CardProduct."
                },
                "CardProductType": {
                    "$ref": "#/$defs/CardProductType1Code",
                    "description": "Type of card product."
                },
                "InternationalCard": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "True if the card may be used abroad."
                },
                "IssuerBIN": {
                    "$ref": "#/$defs/Max15NumericText",
                    "description": "Bank identifier number of the issuer for routing purpose."
                },
                "MaskedPAN": {
                    "$ref": "#/$defs/Max30Text",
                    "description": "Masked PAN to be printed on payment receipts or displayed to the cardholder. Masked digits may be absent or replaced by another character as '*'."
                },
                "PlainCardData": {
                    "$ref": "#/$defs/PlainCardData22",
                    "description": "Sensitive data associated with the card performing the transaction."
                },
                "PaymentAccountReference": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Unique reference to the card, used by both merchants and acquirers to link tokenized and non-tokenized transactions associated to the same underlying card."
                },
                "ProtectedCardData": {
                    "$ref": "#/$defs/ContentInformationType40",
                    "description": "Replacement of the message element PlainCardData by a digital envelope using a cryptographic key."
                },
                "PrivateCardData": {
                    "$ref": "#/$defs/Max100KBinary",
                    "description": "Replacement of the message element PlainCardData by a private envelope."
                },
                "ServiceOption": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Options to the service provided by the card."
                }
            },
            "type": "object",
            "description": "Payment card performing the transaction."
        },
        "PaymentContext29": {
            "additionalProperties": false,
            "properties": {
                "AttendanceContext": {
                    "$ref": "#/$defs/AttendanceContext1Code",
                    "description": "Human attendance at the POI (Point Of Interaction) location during the transaction."
                },
                "AttendantLanguage": {
                    "$ref": "#/$defs/LanguageCode",
                    "description": "Language used to display messages to the attendant.\r\nReference ISO 639-1 (alpha-2) et ISO 639-2 (alpha-3)."
                },
                "AttendantMessageCapable": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Indicates whether a message can be sent or not on an attendant display (attendant display present or not)."
                },
                "BusinessArea": {
                    "$ref": "#/$defs/BusinessArea2Code",
                    "description": "Defines the business context of this transaction that could imply specific scheme rules."
                },
                "CardDataEntryMode": {
                    "$ref": "#/$defs/CardDataReading8Code",
                    "description": "Entry mode of the card data."
                },
                "CardPresent": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Indicates whether the transaction has been initiated by a card physically present or not."
                },
                "CardholderPresent": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Indicates whether the transaction has been initiated in presence of the cardholder or not."
                },
                "FallbackIndicator": {
                    "$ref": "#/$defs/CardFallback1Code",
                    "description": "Indicator of a card entry mode fallback."
                },
                "OnLineContext": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "On-line or off-line context of the transaction."
                },
                "SupportedOption": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SupportedPaymentOption2Code"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/SupportedPaymentOption2Code"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Payment options the card acceptor can support."
                },
                "TransactionChannel": {
                    "$ref": "#/$defs/TransactionChannel5Code",
                    "description": "Identifies the type of the communication channels used by the cardholder to the acceptor system."
                },
                "TransactionEnvironment": {
                    "$ref": "#/$defs/TransactionEnvironment1Code",
                    "description": "Indicates the environment of the transaction."
                }
            },
            "type": "object",
            "description": "Payment context in which the transaction is performed."
        },
        "PaymentRequest6": {
            "additionalProperties": false,
            "properties": {
                "LoyaltyData": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/LoyaltyRequestData3"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/LoyaltyRequestData3"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Data linked to card loyalty during payment."
                },
                "PaymentTransaction": {
                    "$ref": "#/$defs/CardPaymentTransaction136",
                    "description": "Data associated with the Transaction."
                }
            },
            "type": "object",
            "description": "Data required to request a Payment."
        },
        "PaymentTokenIdentifiers1": {
            "additionalProperties": false,
            "properties": {
                "ProviderIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identifier of the token provider."
                },
                "RequestorIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identifier of the token requestor."
                }
            },
            "required": [
                "ProviderIdentification",
                "RequestorIdentification"
            ],
            "type": "object",
            "description": "Identifier of a token provider requestor."
        },
        "PercentageRate": {
            "type": "number",
            "description": "Rate expressed as a percentage, that is, in hundredths, for example, 0.7 is 7/10 of a percent, and 7.0 is 7%."
        },
        "PersonIdentification15": {
            "additionalProperties": false,
            "properties": {
                "AlienRegistrationNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Number assigned by a government agency to identify foreign nationals."
                },
                "CustomerNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Number assigned by an agent to identify its customer."
                },
                "Department": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the department."
                },
                "DriverIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the driver in the fleet of vehicle."
                },
                "DriverLicenseLocation": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Country, state or province, issuer of the driver license."
                },
                "DriverLicenseNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Number assigned by a license authority to a driver's license."
                },
                "DriverLicenseName": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Name or title of the driver license."
                },
                "DateAndPlaceOfBirth": {
                    "$ref": "#/$defs/DateAndPlaceOfBirth1",
                    "description": "Date and place of birth of a person."
                },
                "EmailAddress": {
                    "$ref": "#/$defs/Max256Text",
                    "description": "Address for electronic mail (e-mail)."
                },
                "IdentityCardNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Number assigned by a national authority to an identity card."
                },
                "JobNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the job."
                },
                "EmployeeIdentificationNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Number assigned to an employee by a employer."
                },
                "EmployerIdentificationNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Number assigned to an employer by a registration authority."
                },
                "Other": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/GenericIdentification4"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/GenericIdentification4"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Unique identification of a person, as assigned by an institution, using an identification scheme."
                },
                "PassportNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Number assigned by a passport authority to a passport."
                },
                "SocialSecurityNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Number assigned by a social security agency."
                },
                "TaxIdentificationNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Number assigned by a tax authority to an entity."
                }
            },
            "type": "object",
            "description": "Set of unique and unambiguous ways to identify a person."
        },
        "PhoneNumber": {
            "pattern": "^(\\+[0-9]{1,3}\\-[\\(-\\)\\+\\-0-9]{1,30})$",
            "type": "string",
            "description": "The collection of information which identifies a specific phone or FAX number as defined by telecom services.\nIt consists of a \"+\" followed by the country code (from 1 to 3 characters) then a \"-\" and finally, any combination of numbers, \"(\", \")\", \"+\" and \"-\" (up to 30 characters)."
        },
        "PhysicalInterfaceParameter1": {
            "additionalProperties": false,
            "properties": {
                "AccessCode": {
                    "$ref": "#/$defs/Max35Binary",
                    "description": "Optional access code to provide to use this interface."
                },
                "AdditionalParameters": {
                    "$ref": "#/$defs/Max2KBinary",
                    "description": "Any other parameters relevant for this interface."
                },
                "InterfaceName": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the interface."
                },
                "InterfaceType": {
                    "$ref": "#/$defs/POICommunicationType2Code",
                    "description": "Identification of the physical link layer."
                },
                "SecurityProfile": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the optional security profile to use with this interface."
                },
                "UserName": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Optional user name to provide to use this interface."
                }
            },
            "required": [
                "InterfaceName"
            ],
            "type": "object",
            "description": "Configuration parameters for physical interface."
        },
        "PlainCardData17": {
            "additionalProperties": false,
            "properties": {
                "AdditionalCardData": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Max35Text"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Max35Text"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Additional card issuer specific data."
                },
                "EntryMode": {
                    "$ref": "#/$defs/CardDataReading5Code",
                    "description": "Entry mode of the card."
                },
                "PAN": {
                    "$ref": "#/$defs/Min8Max28NumericText",
                    "description": "Primary Account Number (PAN) of the card."
                },
                "Track1": {
                    "$ref": "#/$defs/Max76Text",
                    "description": "ISO track 1 issued from the magnetic stripe card or from the ICC if the magnetic stripe was not read. The format is conform to ISO 7813, removing beginning and ending sentinels and longitudinal redundancy check characters."
                },
                "Track2": {
                    "$ref": "#/$defs/Max37Text",
                    "description": "ISO track 2 issued from the magnetic stripe card or from the ICC if the magnetic stripe was not read. The content is conform to ISO 7813, removing beginning and ending sentinels and longitudinal redundancy check characters."
                },
                "Track3": {
                    "$ref": "#/$defs/Max104Text",
                    "description": "ISO track 3 issued from the magnetic stripe card or from the ICC if the magnetic stripe was not read. The content is conform to ISO 4909, removing beginning and ending sentinels and longitudinal redundancy check characters."
                }
            },
            "type": "object",
            "description": "Sensitive data associated with a payment card."
        },
        "PlainCardData22": {
            "additionalProperties": false,
            "properties": {
                "CardSequenceNumber": {
                    "$ref": "#/$defs/Min2Max3NumericText",
                    "description": "Identify a card or a payment token inside a set of cards with the same PAN or token."
                },
                "CardholderName": {
                    "$ref": "#/$defs/Max45Text",
                    "description": "Name of the cardholder stored on the card."
                },
                "EffectiveDate": {
                    "$ref": "#/$defs/Max10Text",
                    "description": "Date from which the card can be used, expressed either in the YYYY-MM format, or in the YYYY-MM-DD format."
                },
                "PAN": {
                    "$ref": "#/$defs/Min8Max28NumericText",
                    "description": "Primary Account Number (PAN) of the card, or surrogate of the PAN by a payment token."
                },
                "ServiceCode": {
                    "$ref": "#/$defs/Exact3NumericText",
                    "description": "Services attached to the card, as defined in ISO 7813."
                },
                "Track1": {
                    "$ref": "#/$defs/Max76Text",
                    "description": "ISO track 1 issued from the magnetic stripe card or from the ICC if the magnetic stripe was not read. The format is conform to ISO 7813, removing beginning and ending sentinels and longitudinal redundancy check characters."
                },
                "Track2": {
                    "$ref": "#/$defs/Max37Text",
                    "description": "ISO track 2 issued from the magnetic stripe card or from the ICC if the magnetic stripe was not read. The content is conform to ISO 7813, removing beginning and ending sentinels and longitudinal redundancy check characters."
                },
                "Track3": {
                    "$ref": "#/$defs/Max104Text",
                    "description": "ISO track 3 issued from the magnetic stripe card or from the ICC if the magnetic stripe was not read. The content is conform to ISO 4909, removing beginning and ending sentinels and longitudinal redundancy check characters."
                },
                "ExpiryDate": {
                    "$ref": "#/$defs/Max10Text",
                    "description": "Expiry date of the card or the payment token expressed either in the YYYY-MM format, or in the YYYY-MM-DD format."
                }
            },
            "required": [
                "PAN"
            ],
            "type": "object",
            "description": "Sensible data associated with the payment card performing the transaction."
        },
        "PlanOwner1Code": {
            "enum": [
                "ACCP",
                "ACQR",
                "ISSR",
                "OTHN",
                "OTHP"
            ],
            "type": "string",
            "description": "Contains list of plan owners \nCode: ACQR: \t Acquirer: \tDefinition: Plan owner is an acquirer. \nCode: ACCP: \t Acceptor: \tDefinition: Plan owner is an acceptor. \nCode: ISSR: \t Issuer: \tDefinition: Plan owner is an issuer. \nCode: OTHN: \t OtherNational: \tDefinition: plan owner type is other national. \nCode: OTHP: \t OtherPrivate: \tDefinition: plan owner type is other private."
        },
        "PlusOrMinusIndicator": {
            "type": "boolean",
            "description": "Indicates a positive or negative value."
        },
        "PointOfInteraction14": {
            "additionalProperties": false,
            "properties": {
                "Component": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/PointOfInteractionComponent15"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/PointOfInteractionComponent15"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Data related to a component of the POI (Point Of Interaction) performing the transaction."
                },
                "Capabilities": {
                    "$ref": "#/$defs/PointOfInteractionCapabilities9",
                    "description": "Capabilities of the POI (Point Of Interaction) performing the transaction."
                },
                "GroupIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identifier assigned by the merchant identifying a set of POI (Point Of Interaction) terminals performing some categories of transactions."
                },
                "Identification": {
                    "$ref": "#/$defs/GenericIdentification177",
                    "description": "Identification of the POI (Point Of Interaction) for the acquirer or its agent."
                },
                "SystemName": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Common name assigned by the acquirer to the POI (Point Of Interaction) system."
                },
                "TerminalIntegration": {
                    "$ref": "#/$defs/LocationCategory3Code",
                    "description": "Indicates the type of integration of the POI terminal in the sale environment."
                },
                "TimeZone": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Time zone name as defined by IANA (Internet Assigned Numbers Authority) in the time zone data base. America/Chicago or Europe/Paris are examples of time zone names."
                }
            },
            "required": [
                "Identification"
            ],
            "type": "object",
            "description": "Point of interaction (POI) performing the transaction."
        },
        "PointOfInteractionCapabilities9": {
            "additionalProperties": false,
            "properties": {
                "ApprovalCodeLength": {
                    "$ref": "#/$defs/PositiveNumber",
                    "description": "Maximum number of characters of the approval code the POI is able to manage."
                },
                "CardCaptureCapable": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "True if the POI is able to capture card."
                },
                "CardReadingCapabilities": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CardDataReading8Code"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/CardDataReading8Code"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Card reading capabilities of the POI (Point Of Interaction) performing the transaction."
                },
                "CardholderVerificationCapabilities": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CardholderVerificationCapability4Code"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/CardholderVerificationCapability4Code"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Cardholder verification capabilities of the POI (Point Of Interaction) performing the transaction."
                },
                "MessageCapabilities": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DisplayCapabilities4"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/DisplayCapabilities4"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Capabilities of the terminal to display or print message to the cardholder and the merchant."
                },
                "MaxScriptLength": {
                    "$ref": "#/$defs/PositiveNumber",
                    "description": "Maximum data length in bytes that a card issuer can return to the ICC at the terminal."
                },
                "OnLineCapabilities": {
                    "$ref": "#/$defs/OnLineCapability1Code",
                    "description": "On-line and off-line capabilities of the POI (Point Of Interaction)."
                },
                "PINLengthCapabilities": {
                    "$ref": "#/$defs/PositiveNumber",
                    "description": "Maximum number of digits the POI is able to accept when the cardholder enters its PIN."
                }
            },
            "type": "object",
            "description": "Capabilities of the POI (Point Of Interaction) performing the transaction."
        },
        "PointOfInteractionComponent15": {
            "additionalProperties": false,
            "properties": {
                "Assessment": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/PointOfInteractionComponentAssessment1"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/PointOfInteractionComponentAssessment1"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Assessments for the component of the point of interaction."
                },
                "Characteristics": {
                    "$ref": "#/$defs/PointOfInteractionComponentCharacteristics10",
                    "description": "Characteristics of a POI (Point Of Interaction) component."
                },
                "Identification": {
                    "$ref": "#/$defs/PointOfInteractionComponentIdentification2",
                    "description": "Identification of the POI (Point Of Interaction) component."
                },
                "Package": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/PackageType5"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/PackageType5"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Chunk of a software package."
                },
                "StandardCompliance": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/GenericIdentification48"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/GenericIdentification48"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Identification of the standard for which the component complies with."
                },
                "Status": {
                    "$ref": "#/$defs/PointOfInteractionComponentStatus3",
                    "description": "Status of the POI (Point Of Interaction) component."
                },
                "SubTypeInformation": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Additional information regarding the type of the component."
                },
                "Type": {
                    "$ref": "#/$defs/POIComponentType6Code",
                    "description": "Type of component belonging to a POI (Point Of Interaction) Terminal."
                }
            },
            "required": [
                "Identification",
                "Type"
            ],
            "type": "object",
            "description": "Data related to a component of the POI (Point Of Interaction) performing the transaction."
        },
        "PointOfInteractionComponentAssessment1": {
            "additionalProperties": false,
            "properties": {
                "Assigner": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Max35Text"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Max35Text"
                            },
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "description": "Body which has delivered the assessment."
                },
                "DeliveryDate": {
                    "$ref": "#/$defs/ISODateTime",
                    "description": "Date when the assessment has been delivered."
                },
                "Number": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Unique assessment number for the component."
                },
                "Type": {
                    "$ref": "#/$defs/POIComponentAssessment1Code",
                    "description": "Type of assessment of the component."
                },
                "ExpirationDate": {
                    "$ref": "#/$defs/ISODateTime",
                    "description": "Date when the assessment will expire."
                }
            },
            "required": [
                "Assigner",
                "Number",
                "Type"
            ],
            "type": "object",
            "description": "Assessments for the component of the point of interaction."
        },
        "PointOfInteractionComponentCharacteristics10": {
            "additionalProperties": false,
            "properties": {
                "Communication": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CommunicationCharacteristics5"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/CommunicationCharacteristics5"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Low level communication of the hardware or software component toward another component or an external entity."
                },
                "Memory": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/MemoryCharacteristics1"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/MemoryCharacteristics1"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Memory characteristics of the component."
                },
                "SubscriberIdentityModules": {
                    "$ref": "#/$defs/Number",
                    "description": "Number of subscriber identity modules (SIM)."
                },
                "SecurityAccessModules": {
                    "$ref": "#/$defs/Number",
                    "description": "Number of security access modules (SAM)."
                },
                "SecurityElement": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CryptographicKey18"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/CryptographicKey18"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Security characteristics of the component."
                }
            },
            "type": "object",
            "description": "Physical and logical characteristics of a POI component (Point of Interaction)."
        },
        "PointOfInteractionComponentIdentification2": {
            "additionalProperties": false,
            "properties": {
                "Identification": {
                    "$ref": "#/$defs/Max256Text",
                    "description": "Identification of the POI component assigned by its provider."
                },
                "ItemNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Hierarchical identification of a hardware component inside all the hardware component of the POI. It is composed of all item numbers of the upper level components, separated by the '.' character, ended by the item number of the current component."
                },
                "ProviderIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identifies the provider of the software, hardware or parameters of the POI component."
                },
                "SerialNumber": {
                    "$ref": "#/$defs/Max256Text",
                    "description": "Serial number identifying an occurrence of an hardware component."
                }
            },
            "type": "object",
            "description": "Identification of a POI (Point of Interaction) component."
        },
        "PointOfInteractionComponentStatus3": {
            "additionalProperties": false,
            "properties": {
                "Status": {
                    "$ref": "#/$defs/POIComponentStatus1Code",
                    "description": "Current status of the component."
                },
                "VersionNumber": {
                    "$ref": "#/$defs/Max256Text",
                    "description": "Current version of the component that might include the release number."
                },
                "ExpiryDate": {
                    "$ref": "#/$defs/ISODate",
                    "description": "Expiration date of the component."
                }
            },
            "type": "object",
            "description": "Status of a POI component (Point of Interaction)."
        },
        "PositiveNumber": {
            "minimum": 1,
            "type": "number",
            "description": "Number of objects represented as a positive integer."
        },
        "PostalAddress2": {
            "additionalProperties": false,
            "properties": {
                "Country": {
                    "$ref": "#/$defs/CountryCode",
                    "description": "Nation with its own government."
                },
                "CountrySubDivision": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identifies a subdivision of a country for example, state, region, county."
                },
                "PostCodeIdentification": {
                    "$ref": "#/$defs/Max16Text",
                    "description": "Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail."
                },
                "StreetName": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Name of a street or thoroughfare."
                },
                "TownName": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Name of a built-up area, with defined boundaries, and a local government."
                }
            },
            "required": [
                "Country",
                "PostCodeIdentification",
                "TownName"
            ],
            "type": "object",
            "description": "Address of a party expressed in a formal structure, usually according to the country's postal services specifications."
        },
        "PostalAddress22": {
            "additionalProperties": false,
            "properties": {
                "AddressLine": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Max70Text"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Max70Text"
                            },
                            "maxItems": 2,
                            "type": "array"
                        }
                    ],
                    "description": "Information that locates and identifies a specific address, as defined by postal services, presented in free format text."
                },
                "AddressType": {
                    "$ref": "#/$defs/AddressType2Code",
                    "description": "Identifies the nature of the postal address."
                },
                "BuildingNumber": {
                    "$ref": "#/$defs/Max16Text",
                    "description": "Number that identifies the position of a building on a street."
                },
                "CountryCode": {
                    "$ref": "#/$defs/Min2Max3AlphaText",
                    "description": "Nation with its own government."
                },
                "CountrySubDivision": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Max35Text"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Max35Text"
                            },
                            "maxItems": 2,
                            "type": "array"
                        }
                    ],
                    "description": "Identifies a subdivision of a country such as state, region, county."
                },
                "Department": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Identification of a division of a large organisation or building."
                },
                "PostCode": {
                    "$ref": "#/$defs/Max16Text",
                    "description": "Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail."
                },
                "StreetName": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Name of a street or thoroughfare."
                },
                "SubDepartment": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Identification of a sub-division of a large organisation or building."
                },
                "TownName": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Name of a built-up area, with defined boundaries, and a local government."
                }
            },
            "type": "object",
            "description": "Information that locates and identifies a specific address, as defined by postal services."
        },
        "Product6": {
            "additionalProperties": false,
            "properties": {
                "AdditionalProductCode": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Additional product code related to the product."
                },
                "AdditionalProductDescription": {
                    "$ref": "#/$defs/Max256Text",
                    "description": "Additional information related to the line item."
                },
                "DeliveryLocation": {
                    "$ref": "#/$defs/Max10Text",
                    "description": "Location of the delivery of the item, for instance pump number or parking bay."
                },
                "DeliveryService": {
                    "$ref": "#/$defs/AttendanceContext2Code",
                    "description": "Identify the method of delivery or distribution of the item."
                },
                "ItemIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the item inside the purchase transaction."
                },
                "ProductAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Monetary value of purchased product."
                },
                "ProductAmountSign": {
                    "$ref": "#/$defs/PlusOrMinusIndicator",
                    "description": "Sign of the product amount."
                },
                "ProductCode": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Product code of the item."
                },
                "ProductDescription": {
                    "$ref": "#/$defs/Max140Text",
                    "description": "Description of the product or item."
                },
                "ProductQuantity": {
                    "$ref": "#/$defs/DecimalNumber",
                    "description": "Product quantity."
                },
                "SaleChannel": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Commercial or distribution channel associated to the line item."
                },
                "TaxType": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Information on tax paid on the product."
                },
                "UnitOfMeasure": {
                    "$ref": "#/$defs/UnitOfMeasure6Code",
                    "description": "Unit of measure of the item purchased."
                },
                "UnitPrice": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Price per unit of product."
                },
                "UnitPriceSign": {
                    "$ref": "#/$defs/PlusOrMinusIndicator",
                    "description": "Sign of the unit price."
                },
                "ValueAddedTax": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Value added tax amount of the item included in the product amount."
                }
            },
            "required": [
                "ProductAmount",
                "ProductCode"
            ],
            "type": "object",
            "description": "Purchased item."
        },
        "QRCodeEncodingMode1Code": {
            "enum": [
                "ALFA",
                "BINA",
                "KANJ",
                "NUME"
            ],
            "type": "string",
            "description": "Encoding Mode of Quick Response Code. \nCode: NUME: \t Numeric: \tDefinition: Numeric value provided in Barcode field. \nCode: ALFA: \t Alphanumeric: \tDefinition: Alphanumeric value provided in Barcode field. \nCode: BINA: \t Binary: \tDefinition: Binary value provided in Quick Response Code Binary Value. \nCode: KANJ: \t Kanji: \tDefinition: Kanji value provided in Quick Response Code Binary Value."
        },
        "QRCodeErrorCorrection1Code": {
            "enum": [
                "M015",
                "Q025",
                "H030",
                "L007"
            ],
            "type": "string",
            "description": "Error Correction mode of Quick Response Code. \nCode: L007: \t ErrorCorrection7Percent: \tDefinition: Reed-Solomon error correction  7% \nCode: M015: \t ErrorCorrection15Percent: \tDefinition: Reed-Solomon error correction 15% \nCode: Q025: \t ErrorCorrection25Percent: \tDefinition: Reed-Solomon error correction 25% \nCode: H030: \t ErrorCorrection30Percent: \tDefinition: Reed-Solomon error correction 30%"
        },
        "Recipient13Choice": {
            "additionalProperties": false,
            "properties": {
                "IssuerAndSerialNumber": {
                    "$ref": "#/$defs/IssuerAndSerialNumber2",
                    "description": "Certificate issuer name and serial number (see ITU X.509)."
                },
                "SubjectKeyIdentifier": {
                    "$ref": "#/$defs/Max140Binary",
                    "description": "Specifies the recipient's certificate by a key identifier."
                }
            },
            "type": "object",
            "description": "Identification of a cryptographic asymmetric key."
        },
        "Recipient15Choice": {
            "additionalProperties": false,
            "properties": {
                "KEK": {
                    "$ref": "#/$defs/KEK9",
                    "description": "Key encryption key using previously distributed symmetric key."
                },
                "KeyIdentifier": {
                    "$ref": "#/$defs/KEKIdentifier7",
                    "description": "Identification of a protection key without a session key, shared and previously exchanged between the initiator and the recipient."
                },
                "KeyTransport": {
                    "$ref": "#/$defs/KeyTransport10",
                    "description": "Encryption key using previously distributed asymmetric public key."
                }
            },
            "type": "object",
            "description": "Transport key or key encryption key (KEK) for the recipient."
        },
        "RecurringTransaction6": {
            "additionalProperties": false,
            "properties": {
                "GracePeriod": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/GracePeriod1"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/GracePeriod1"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Contains grace period details."
                },
                "PlanIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the recurring plan."
                },
                "PlanNotice": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ActionMessage11"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/ActionMessage11"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Notice related to the RecurringPlan."
                },
                "PeriodUnit": {
                    "$ref": "#/$defs/Frequency3Code",
                    "description": "Period unit between consecutive payments (for example day, month, year)."
                },
                "SequenceNumber": {
                    "$ref": "#/$defs/Number",
                    "description": "Indicates the recurring occurrence of the transaction (1 = 1st recurring, 2 = 2nd recurring, etc.)."
                }
            },
            "type": "object",
            "description": "Element related to recurring transaction."
        },
        "RelativeDistinguishedName1": {
            "additionalProperties": false,
            "properties": {
                "AttributeType": {
                    "$ref": "#/$defs/AttributeType1Code",
                    "description": "Type of attribute of a distinguished name (see X.500)."
                },
                "AttributeValue": {
                    "$ref": "#/$defs/Max140Text",
                    "description": "Value of the attribute of a distinguished name (see X.500)."
                }
            },
            "required": [
                "AttributeType",
                "AttributeValue"
            ],
            "type": "object",
            "description": "Relative distinguished name defined by X.500 and X.509."
        },
        "Response9Code": {
            "enum": [
                "APPR",
                "DECL",
                "PART",
                "SUSP",
                "TECH"
            ],
            "type": "string",
            "description": "Result of the performed service. \nCode: DECL: \t Declined: \tDefinition: Service is declined. \nCode: APPR: \t Approved: \tDefinition: Service has been successfuly provided. \nCode: PART: \t PartialApproved: \tDefinition: Service has been partialy provided. \nCode: TECH: \t TechnicalError: \tDefinition: Service cannot be provided for technical reason (eg timeout contacting the Issuer, security problem). \nCode: FRTH: \t FurtherAction: \tDefinition: Further action required to complete the transaction, for instance a referral. \nCode: UNPR: \t NotProcessed: \tDefinition: Advice message could not be processed. \nCode: PRCS: \t Processed: \tDefinition: Advice message is processed. \nCode: FAIL: \t Failure: \tDefinition: Processing of the request fails for various reasons. Some further processing according to the type of requested service, the context of the process, and some additional precision about the failure notified in the ErrorCondition data element. \nCode: SUCC: \t Success: \tDefinition: Processing OK. Information related to the result of the processing is contained in other parts of the response message. \nCode: DFRD: \t Deferred: \tDefinition: Procesing of the service is deferred. \nCode: INPS: \t InProgress: \tDefinition: Request is still in progress. \nCode: NRTD: \t NoReasonToDecline: \tDefinition: Validate the data that couold be verified. \nCode: OTHN: \t OtherNational: \tDefinition: Other type of processing result defined at national level. \nCode: OTHP: \t OtherPrivate: \tDefinition: Other type of processing result defined at private level. \nCode: OTRD: \t OtherResult: \tDefinition: Other type of result. \nCode: PPRC: \t PartiallyProcessed: \tDefinition: Processing of the service has been partially performed. \nCode: REJT: \t Rejected: \tDefinition: Service was rejected. \nCode: UNRV: \t UnderReview: \tDefinition: Service is under review. \nCode: SUSP: \t Suspended: \tDefinition: Transaction has been received but hasn't been processed. \nCode: WARN: \t Warning: \tDefinition: An additional Response Code, mainly a functional one, should be considered to identify the outcome of the request."
        },
        "ResponseType10": {
            "additionalProperties": false,
            "properties": {
                "AdditionalResponseInformation": {
                    "$ref": "#/$defs/Max140Text",
                    "description": "Additional information on the response for further examination."
                },
                "Response": {
                    "$ref": "#/$defs/Response9Code",
                    "description": "Result of the transaction."
                },
                "ResponseReason": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Detailed result of the transaction."
                }
            },
            "required": [
                "Response"
            ],
            "type": "object",
            "description": "Response of a requested service."
        },
        "RetailerMessage1Code": {
            "enum": [
                "SSAB",
                "SAAQ",
                "SAAP",
                "SDDR",
                "SDDP",
                "SSEN",
                "SSMQ",
                "SSMR",
                "SSRJ",
                "SARQ",
                "SARP",
                "SFRP",
                "SFRQ",
                "SFSQ",
                "SFSP",
                "SASQ",
                "SASP"
            ],
            "type": "string",
            "description": "Identifies the type of process related to the message. \nCode: SFSQ: \t SaleFinancialServiceRequest: \tDefinition: Request a financial service like payment, reversal, loyalty, Balance Inquiry, etc. \nCode: SFSP: \t SaleFinancialServiceResponse: \tDefinition: Response to a financial service request. \nCode: SFRQ: \t SaleFinancialReconciliationRequest: \tDefinition: Request a reconciliation (different types) between Sale System and POI System. \nCode: SFRP: \t SaleFinancialReconciliationResponse: \tDefinition: Response to a Reconciliation Request. \nCode: SASQ: \t SessionManagementRequest: \tDefinition: Request the management of a session: login, logout and diagnosis services. Initiated by the Sale system. \nCode: SASP: \t SessionManagementResponse: \tDefinition: Response to a session management request to initiate/terminate a session. \nCode: SAAQ: \t AdminRequest: \tDefinition: To select and start customised administrative services provided by the POI, using a \"menu\" for an interactive or software interface, initiated by the Sale system. \nCode: SAAP: \t AdminResponse: \tDefinition: Response to the Admin request. \nCode: SARQ: \t ReportRequest: \tDefinition: To request, by the Sale System, a report on a list of transactions on the POI system, or the status of a transaction. \nCode: SARP: \t ReportResponse: \tDefinition: Response to a Report request. \nCode: SSAB: \t Abort: \tDefinition: Abort the current process or the last request. \nCode: SSEN: \t EventNotification: \tDefinition: Notify the other party of an event that occurs on its side. \nCode: SSRJ: \t Rejection: \tDefinition: Reject a previous received message, for technical or functional reasons. \nCode: SSMQ: \t MessageStatusRequest: \tDefinition: Request the status of a previous message for which the Sale system has no response. \nCode: SSMR: \t MessageStatusResponse: \tDefinition: Response to a Message Status request. \nCode: SDDR: \t DeviceRequest: \tDefinition: Request one or several functions of the device, from user Interface or payment peripherals on the POI system or on the Sale system. Functions can be Display, Input, Print, play sound, Card reader capabilities or Transmit a message. \nCode: SDDP: \t DeviceResponse: \tDefinition: Response to a Device request."
        },
        "RetailerSaleEnvironment2": {
            "additionalProperties": false,
            "properties": {
                "Currency": {
                    "$ref": "#/$defs/ActiveCurrencyCode",
                    "description": "Default currency associated with the sale system."
                },
                "DebitPreferredFlag": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Flag if preferred type of payment is a debit transaction."
                },
                "LoyaltyHandling": {
                    "$ref": "#/$defs/LoyaltyHandling1Code",
                    "description": "Way of Loyalty handling."
                },
                "MaximumCashBackAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Maximum amount which could be requested for cash-back."
                },
                "MinimumAmountToDeliver": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Minimum amount the Sale System is allowed to deliver for this payment."
                },
                "MinimumSplitAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Minimum amount to split a sale transaction."
                },
                "SaleCapabilities": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SaleCapabilities1Code"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/SaleCapabilities1Code"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Capabilities of the Sale system."
                }
            },
            "type": "object",
            "description": "Environment of Retailer for this message."
        },
        "RetailerService2Code": {
            "enum": [
                "FSPQ",
                "FSRQ",
                "FSIQ",
                "FSBQ",
                "FSLQ",
                "FSVQ",
                "FSEQ",
                "FSAQ",
                "FSCQ"
            ],
            "type": "string",
            "description": "List of specific services for ServiceRequest \nCode: FSPQ: \t FinancialPaymentRequest: \tDefinition: The Sale System requests to the POI System to perform a payment(Purchase/Refund/PWCB/MOTO Payment/...). \nCode: FSRQ: \t FinancialReversalRequest: \tDefinition: The Sale System requests to the POI System to perform a reversal partial or complete to cancel a former payment service. \nCode: FSIQ: \t FinancialBalanceInquiryRequest: \tDefinition: The Sale System requests to the POI System to perform balance inquiry on the main account. \nCode: FSBQ: \t FinancialBatchRequest: \tDefinition: The Batch message pair is used to request or get the result of transactions (payment, loyalty and reversal) performed without connection to the Sale system (Payment delivery). \nCode: FSLQ: \t FinancialLoyaltyRequest: \tDefinition: The Sale System requests to the POI System a loyalty service like loading or redeem. \nCode: FSVQ: \t FinancialStoredValueRequest: \tDefinition: The Sale System requests to the POI System to manage a stored value card or account (eg. Load, Payment, Reimbursement). \nCode: FSEQ: \t FinancialEnableServiceRequest: \tDefinition: The Sale System requests to the POI System to enable a service on its side. \nCode: FSAQ: \t FinancialCardAcquisitionRequest: \tDefinition: The Sale System requests to the POI System to handle a card data acquisition on the card reader. \nCode: FSCQ: \t FinancialReconciliationRequest: \tDefinition: The Sale System request to the POI System different kinds of transaction reconciliation.  \nCode: FSPP: \t FinancialPaymentResponse: \tDefinition: The POI System sends a response to a payment request (Purchase/refund/PWCB/MOTO Payment/...). \nCode: FSRP: \t FinancialReversalResponse: \tDefinition: The POI System sends a response to a reversal request. \nCode: FSIP: \t FinancialBalanceInquiryResponse: \tDefinition: The POI System sends a response to a Balance Inquiry request. \nCode: FSBP: \t FinancialBatchResponse: \tDefinition: The POI System sends a response to a batch processing request. \nCode: FSLP: \t FinancialLoyaltyResponse: \tDefinition: The POI System sends a response to a loyalty processing request. \nCode: FSVP: \t FinancialStoredValueResponse: \tDefinition: The POI System sends a response to a stored value card or account request. \nCode: FSEP: \t FinancialEnableServiceResponse: \tDefinition: The POI System sends a response after enabling or not some service. \nCode: FSAP: \t FinancialCardAcquisitionResponse: \tDefinition: The POI System sends a response to a card data acquisition request. \nCode: FSCP: \t FinancialReconciliationResponse: \tDefinition: The POI System sends a response to a reconciliation request. \nCode: ADAQ: \t AdministrativeAdminRequest: \tDefinition: An administrative request, to select and start customised administrative services provided by the POI, using a \"menu\" for an interactive or software interface, initiated by the Sale system. \nCode: SMIQ: \t AdministrativeSessionManagementLoginRequest: \tDefinition: The Sale System requests a login to the POI System. \nCode: SMOQ: \t AdministrativeSessionManagementLogoutRequest: \tDefinition: The Sale System requests a logout to the POI System. \nCode: SMDQ: \t AdministrativeSessionManagementDiagnosisRequest: \tDefinition: The Sale System requests a session diagnosis to the POI System. \nCode: RPTQ: \t AdministrativeReportTransactionRequest: \tDefinition: The Sale System requests to the POI System a report on a list of transactions. \nCode: RPAQ: \t AdministrativeReportGetTotalsRequest: \tDefinition: The Sale System requests to the POI System a report on the totals figures of the POI system. \nCode: ADAP: \t AdministrativeAdminResponse: \tDefinition: The POI System responds to an administrative request. \nCode: SMIP: \t AdministrativeSessionManagementLoginResponse: \tDefinition: The POI System responds to a login request. \nCode: SMOP: \t AdministrativeSessionManagementLogoutResponse: \tDefinition: The POI System responds to a logout request. \nCode: SMDP: \t AdministrativeSessionManagementDiagnosisResponse: \tDefinition: The POI System responds to a diagnosis request. \nCode: RPTP: \t AdministrativeReportTransactionResponse: \tDefinition: The POI System responds to a transaction report request. \nCode: RPAP: \t AdministrativeReportGetTotalsResponse: \tDefinition: The POI System responds to a totals figures request. \nCode: SSAB: \t SystemAbort: \tDefinition: Abort a former request or message by the sale system. \nCode: SSEN: \t SystemEventNotification: \tDefinition: Send an Event notification to the other party. \nCode: SSRR: \t SystemMessageRejection: \tDefinition: Send a rejection for a previous message. \nCode: SSSQ: \t SystemMessageStatusRequest: \tDefinition: The Sale System requests to the POI System the status of a previous transaction. \nCode: SSSP: \t SystemMessageStatusResponse: \tDefinition: The POI System responds to a message status request. \nCode: DINQ: \t DeviceInputRequest: \tDefinition: One system requests to the other System to get data input.  \nCode: DDYQ: \t DeviceDisplayRequest: \tDefinition: One System requests the other to display a message for cashier or customer. \nCode: DPRQ: \t DevicePrintRequest: \tDefinition: One system requests to the other System to print data. \nCode: DSOQ: \t DevicePlaySoundRequest: \tDefinition: One system requests to the Other System to play a sound. \nCode: DSIQ: \t DeviceSecureInputRequest: \tDefinition: One system requests to the Other System to securely get data input (e.g. for PIN). \nCode: DCIQ: \t DeviceInitialisationCardReaderRequest: \tDefinition: Service to send parameters to use when card reader initializes a new communication with the card. \nCode: DCAQ: \t DeviceSendApplicationProtocolDataUnitCardReaderRequest: \tDefinition: A service to send commands to a card. \nCode: DCPQ: \t DevicePowerOffCardReaderRequest: \tDefinition: The Sale system requests to the POI System to power off the card reader. \nCode: DCOQ: \t DeviceTransmissionMessageRequest: \tDefinition: The Sale system requests to the POI System to transmit a message (for instance to a mobile server). \nCode: DINO: \t DeviceInputNotification: \tDefinition: One system sends a notification to the POI System to update a input request. \nCode: DDYP: \t DeviceDisplayResponse: \tDefinition: One system responds to the other system for a display request. \nCode: DINP: \t DeviceInputResponse: \tDefinition: One system responds to the other System for a input request. \nCode: DPRP: \t DevicePrintResponse: \tDefinition: One system responds to the other System for a print request. \nCode: DSOP: \t DevicePlaySoundResponse: \tDefinition: One system responds to the other System for a play sound request. \nCode: DSIP: \t DeviceSecureInputResponse: \tDefinition: One system responds to the other System for secure data input. \nCode: DCIP: \t DeviceInitialisationCardReaderResponse: \tDefinition: The POI system responds to the Sale System for a card reader initialisation. \nCode: DCAP: \t DeviceSendApplicationProtocolDataUnitCardReaderResponse: \tDefinition: The POI system responds to the Sale System for a card reader Application Protocol Data Unit sending. \nCode: DCPP: \t DevicePowerOffCardRequestResponse: \tDefinition: The POI system responds to the Sale System for a card reader power off. \nCode: DCOP: \t DeviceTransmissionMessageResponse: \tDefinition: The POI system responds to the Sale System after a message transmission."
        },
        "ReversalReason1Code": {
            "enum": [
                "CUSC",
                "MALF",
                "MERC",
                "UNAB"
            ],
            "type": "string",
            "description": "Reason of the payment or loyalty reversal. \nCode: CUSC: \t CustomerCancellation: \tDefinition: Customer cancels the transaction. \nCode: MERC: \t MerchantCancellation: \tDefinition: Merchant or Cashier cancels the transaction. \nCode: MALF: \t Malfuntion: \tDefinition: Reversal after a suspection of malfunction of the POI system. \nCode: UNAB: \t UnableToComplete: \tDefinition: POI System unable to complete transaction."
        },
        "ReversalRequest6": {
            "additionalProperties": false,
            "properties": {
                "CustomerOrder": {
                    "$ref": "#/$defs/CustomerOrder1",
                    "description": "Specific Customer Order linked with the reversal."
                },
                "LoyaltyData": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/LoyaltyRequestData3"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/LoyaltyRequestData3"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Data linked to card loyalty during payment."
                },
                "ReversedAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Amount to reverse (total or partial)."
                },
                "ReversalReason": {
                    "$ref": "#/$defs/ReversalReason1Code",
                    "description": "Reason for this reversal."
                },
                "ReversalTransaction": {
                    "$ref": "#/$defs/CardPaymentTransaction136",
                    "description": "Transaction to reverse."
                }
            },
            "required": [
                "ReversalReason"
            ],
            "type": "object",
            "description": "Data to request a reversal."
        },
        "SaleCapabilities1Code": {
            "enum": [
                "CHDI",
                "CHER",
                "CHIN",
                "CHST",
                "CUDI",
                "CUAS",
                "CUER",
                "CUIN",
                "POIR",
                "PRDC",
                "PRRP",
                "PRVC"
            ],
            "type": "string",
            "description": "Hardware capabilities of the Sale Terminal. \nCode: CHST: \t CashierStatus: \tDefinition: To display to the Cashier a new state on which the POI is entering. \tFor instance, during a payment, the POI could display to the Cashier that POI request an authorisation to the host acquirer. \nCode: CHER: \t CashierError: \tDefinition: To display to the Cashier information related to an error situation occurring on the POI. \nCode: CHDI: \t CashierDisplay: \tDefinition: Standard Cashier display interface (to ask question, or to show information).  \nCode: POIR: \t POIReplication: \tDefinition: Information displayed on the Cardholder POI interface, replicated on the Cashier interface. \nCode: CHIN: \t CashierInput: \tDefinition: Any kind of keyboard allowing all or part of the commands \tof the Input message request from the Sale System to the POI System (InputCommand data element). The output device attached to this input device is the CashierDisplay device. \nCode: CUAS: \t CustomerAssistance: \tDefinition: Input of the Cardholder POI interface which can be entered by the Cashier to assist the Customer. \nCode: CUDI: \t CustomerDisplay: \tDefinition: Standard Customer display interface used by the POI System to ask question, or to show information to the Customer inside a Service dialogue. \nCode: CUER: \t CustomerError: \tDefinition: To display to the Customer information is related to an error situation occurring on the Sale Terminal during a Sale transaction. \nCode: CUIN: \t CustomerInput: \tDefinition: Any kind of keyboard allowing all or part of the commands \tof the Input message request from the Sale System to the POI System (InputCommand data element). \nCode: PRRP: \t PrinterReceipt: \tDefinition: Printer for the Payment receipt. \nCode: PRDC: \t PrinterDocument: \tDefinition: When the POI System wants to print specific document (check, dynamic currency conversion ...). \nCode: PRVC: \t PrinterVoucher: \tDefinition: Coupons, voucher or special ticket generated by the POI and to be printed. "
        },
        "SaleContext4": {
            "additionalProperties": false,
            "properties": {
                "AdditionalSaleData": {
                    "$ref": "#/$defs/Max70Text",
                    "description": "Additional information associated with the sale transaction."
                },
                "AllowedEntryMode": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CardDataReading8Code"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/CardDataReading8Code"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Type of card data reading."
                },
                "CashierIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the cashier who carried out the transaction."
                },
                "CashierLanguage": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/LanguageCode"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/LanguageCode"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Languages used by the cashier."
                },
                "CustomerOrderRequestFlag": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Flag indicating that list of CustomerOrders should be returned in response."
                },
                "DeliveryNoteNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification allocated by the sale system and given to the customer."
                },
                "ForceOnlineFlag": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Indicates if the Cashier requires POI forces online access to the Acquirer."
                },
                "InvoiceNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the invoice."
                },
                "PurchaseOrderNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the purchase order."
                },
                "ReuseCardDataFlag": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Indicates if the card data has to be taken from a previous transaction."
                },
                "RemainingAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Remaining amount to complete the sale transaction, if a partial payment has been completed for the sale transaction."
                },
                "SaleIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the sale terminal (electronic cash register or point of sale terminal) or the sale system."
                },
                "SaleReconciliationIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identifier of the reconciliation between the Sale system and the POI system."
                },
                "SaleReferenceNumber": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identify a sale transaction assigned by the sale system."
                },
                "SaleTokenScope": {
                    "$ref": "#/$defs/SaleTokenScope1Code",
                    "description": "Scope of the token that identifies the payment mean of the customer."
                },
                "ShiftNumber": {
                    "$ref": "#/$defs/Max2NumericText",
                    "description": "Identifies the shift of the cashier."
                },
                "SplitPayment": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "True if the payment transaction is a partial payment of the sale transaction."
                },
                "SponsoredMerchant": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Organisation26"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Organisation26"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Merchant using the payment services of a payment facilitator, acting as a card acceptor."
                }
            },
            "type": "object",
            "description": "Sale context in which the transaction is performed."
        },
        "SaleToPOIServiceRequestV06": {
            "additionalProperties": false,
            "properties": {
                "Header": {
                    "$ref": "#/$defs/Header41"
                },
                "SecurityTrailer": {
                    "$ref": "#/$defs/ContentInformationType38"
                },
                "ServiceRequest": {
                    "$ref": "#/$defs/ServiceRequest7"
                }
            },
            "required": [
                "Header",
                "ServiceRequest"
            ],
            "type": "object",
            "description": "This SaleToPOIServiceRequest message is sent by a sale system to trig a financial service on POI system."
        },
        "SaleTokenScope1Code": {
            "enum": [
                "MULT",
                "SNGL"
            ],
            "type": "string",
            "description": "Scope of the token that identifies the payment mean of the customer. \nCode: SNGL: \t SingleUse: \tDefinition: The token is generated to recognise  a customer during the lifetime of a transaction. \nCode: MULT: \t MultipleUse: \tDefinition: The token is generated to recognise a customer for a longer period."
        },
        "SensitiveMobileData1": {
            "additionalProperties": false,
            "properties": {
                "IMEI": {
                    "$ref": "#/$defs/Max35NumericText",
                    "description": "International Mobile Equipment Identity is a number usually unique to identify a mobile phone."
                },
                "IMSI": {
                    "$ref": "#/$defs/Max35NumericText",
                    "description": "International Mobile Subscriber Identity is a unique number associated with the mobile phone user, containing the Mobile Country Code (MCC), the Mobile Network Code (MNC), and the Mobile Identification Number (MSIN)."
                },
                "MSISDN": {
                    "$ref": "#/$defs/Max35NumericText",
                    "description": "identifies the mobile - Mobile Subscriber Integrated Service Digital Network (The SIM identifier)."
                }
            },
            "required": [
                "MSISDN"
            ],
            "type": "object",
            "description": "Sensitive information related to the mobile phone."
        },
        "ServiceRequest7": {
            "additionalProperties": false,
            "properties": {
                "BalanceInquiryRequest": {
                    "$ref": "#/$defs/BalanceInquiryRequest7",
                    "description": "Content of a Balance Inquiry Request."
                },
                "BatchRequest": {
                    "$ref": "#/$defs/BatchRequest6",
                    "description": "Content of the Batch Request."
                },
                "CardAcquisitionRequest": {
                    "$ref": "#/$defs/CardAcquisitionRequest3",
                    "description": "Content of the Card Acquisition Request."
                },
                "Context": {
                    "$ref": "#/$defs/CardPaymentContext30",
                    "description": "Context in which the transaction is performed (payment and sale)."
                },
                "Environment": {
                    "$ref": "#/$defs/CardPaymentEnvironment80",
                    "description": "Environment of the transaction."
                },
                "LoyaltyRequest": {
                    "$ref": "#/$defs/LoyaltyRequest6",
                    "description": "Content of the Loyalty Request."
                },
                "EnableServiceRequest": {
                    "$ref": "#/$defs/EnableServiceRequest6",
                    "description": "Content of the Enable Service Request."
                },
                "PaymentRequest": {
                    "$ref": "#/$defs/PaymentRequest6",
                    "description": "Content of the payment request."
                },
                "ReversalRequest": {
                    "$ref": "#/$defs/ReversalRequest6",
                    "description": "Content of the reversal request."
                },
                "SupplementaryData": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SupplementaryData1"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/SupplementaryData1"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Additional information incorporated as an extension to the message."
                },
                "StoredValueRequest": {
                    "$ref": "#/$defs/StoredValueRequest7",
                    "description": "Content of a Stored Value Request."
                },
                "ServiceContent": {
                    "$ref": "#/$defs/RetailerService2Code",
                    "description": "Define the type of service requested."
                }
            },
            "required": [
                "Context",
                "Environment",
                "ServiceContent"
            ],
            "type": "object",
            "description": "Defines the service to be called."
        },
        "SignedData9": {
            "additionalProperties": false,
            "properties": {
                "Certificate": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Max5000Binary"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Max5000Binary"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Chain of X.509 certificates."
                },
                "DigestAlgorithm": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AlgorithmIdentification36"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/AlgorithmIdentification36"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Identification of digest algorithm applied before signature."
                },
                "EncapsulatedContent": {
                    "$ref": "#/$defs/EncapsulatedContent3",
                    "description": "Data to sign."
                },
                "Signer": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Signer8"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Signer8"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Digital signature and identification of a signer."
                },
                "Version": {
                    "$ref": "#/$defs/Number",
                    "description": "Version of the data structure."
                }
            },
            "type": "object",
            "description": "Digital signatures of data from one or several signers."
        },
        "Signer8": {
            "additionalProperties": false,
            "properties": {
                "DigestAlgorithm": {
                    "$ref": "#/$defs/AlgorithmIdentification36",
                    "description": "Identification of a digest algorithm to apply before signature."
                },
                "SignedAttributes": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/GenericInformation1"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/GenericInformation1"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Collection of attributes that are signed."
                },
                "SignerIdentification": {
                    "$ref": "#/$defs/Recipient13Choice",
                    "description": "Identification of the entity who has signed the data."
                },
                "Signature": {
                    "$ref": "#/$defs/Max3000Binary",
                    "description": "Digital signature."
                },
                "SignatureAlgorithm": {
                    "$ref": "#/$defs/AlgorithmIdentification33",
                    "description": "Cryptographic digital signature algorithm."
                },
                "Version": {
                    "$ref": "#/$defs/Number",
                    "description": "Version of the Cryptographic Message Syntax (CMS) data structure."
                }
            },
            "required": [
                "DigestAlgorithm",
                "Signature",
                "SignatureAlgorithm"
            ],
            "type": "object",
            "description": "Entity who has signed the data and its digital signature."
        },
        "SimpleIdentificationInformation4": {
            "additionalProperties": false,
            "properties": {
                "Identification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Name or number assigned by an entity to enable recognition of that entity, for example, account identifier."
                }
            },
            "required": [
                "Identification"
            ],
            "type": "object",
            "description": "Information related to an identification, for example, party identification or account identification."
        },
        "StoredValueAccount2": {
            "additionalProperties": false,
            "properties": {
                "AccountType": {
                    "$ref": "#/$defs/StoredValueAccountType1Code",
                    "description": "Type of stored value account."
                },
                "Balance": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Current balance of the Stored Value account."
                },
                "Brand": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Brand to which belong the account."
                },
                "Currency": {
                    "$ref": "#/$defs/ActiveCurrencyCode",
                    "description": "Currency of the Stored Value account."
                },
                "Identification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of Stored Value Account."
                },
                "IdentificationType": {
                    "$ref": "#/$defs/CardIdentificationType1Code",
                    "description": "Type of identification for this Stored Value Account."
                },
                "EntryMode": {
                    "$ref": "#/$defs/CardDataReading8Code",
                    "description": "Standard or last entry mode to access the Stored Value account or card."
                },
                "OwnerName": {
                    "$ref": "#/$defs/Max45Text",
                    "description": "Owner name of an account."
                },
                "Provider": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Provider of the Stored Value Account."
                },
                "ExpiryDate": {
                    "$ref": "#/$defs/Max10Text",
                    "description": "Expiry date of the account of card."
                }
            },
            "type": "object",
            "description": "Identification of the stored value account or the stored value card (Prepaid card)."
        },
        "StoredValueAccountType1Code": {
            "enum": [
                "BNKA",
                "CWVC",
                "CPYA",
                "ELMY",
                "GIFT",
                "GCER",
                "MLVC",
                "OLVC",
                "MERC",
                "OTHR",
                "PHON",
                "CARD",
                "TRVL"
            ],
            "type": "string",
            "description": "Type of stored value account. \nCode: GIFT: \t GiftCard: \tDefinition: Payment mean issued by retailers or banks as a substitute to a non-monetary gift. Usually, this Stored Value item is used only once. \nCode: PHON: \t PhoneCard: \tDefinition: Stored value instrument used to pay telephone services (e.g. card or identifier). \nCode: OTHR: \t OtherPrepaidAccount: \tDefinition: Other non listed stored value instrument. \nCode: GCER: \t GiftCertificate: \tDefinition: Certificate to be given to a customer. Usually one shot voucher. \nCode: CARD: \t SmartCardTag: \tDefinition: Stored value account hold on the chip of a smart card.  \nCode: OLVC: \t OnlineVoucher: \tDefinition: Voucher that can be used online once or in several times. \nCode: CWVC: \t CarwashVoucher: \tDefinition: Car wash specific account. \nCode: MLVC: \t MealVoucher: \tDefinition: Meal and check voucher for restaurants. \nCode: MERC: \t MerchantAccount: \tDefinition: Prepaid account open with a merchant or big retailers. \nCode: TRVL: \t Travel: \tDefinition: Travel prepaid account. \nCode: ELMY: \t ElectronicMoneyAccount: \tDefinition: Account supporting e-money issued by an electronic money issuer. \nCode: BNKA: \t BankPrepaidAccount: \tDefinition: Prepaid account managed by a financial institution for low income customers. \nCode: CPYA: \t CompanyPrepaidAccount: \tDefinition: Specific prepaid account for companies or professionals expenses."
        },
        "StoredValueData7": {
            "additionalProperties": false,
            "properties": {
                "AccountIdentification": {
                    "$ref": "#/$defs/StoredValueAccount2",
                    "description": "Identification of the stored value account or the stored value card."
                },
                "Currency": {
                    "$ref": "#/$defs/ActiveCurrencyCode",
                    "description": "Currency of the monetary amount."
                },
                "EANUPC": {
                    "$ref": "#/$defs/Max35NumericText",
                    "description": "Standard European Article Number Universal Product Code of item purchased with the transaction."
                },
                "HostTransactionIdentification": {
                    "$ref": "#/$defs/TransactionIdentifier1",
                    "description": "Identification of the transaction by the host in charge of the stored value transaction."
                },
                "ItemAmount": {
                    "$ref": "#/$defs/ImpliedCurrencyAndAmount",
                    "description": "Total amount of the item line."
                },
                "OriginalPOITransaction": {
                    "$ref": "#/$defs/CardPaymentTransaction136",
                    "description": "Identification of a previous POI transaction."
                },
                "ProductCode": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Product code of item purchased with the transaction."
                },
                "Provider": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the provider of the stored value account load/reload."
                },
                "TransactionType": {
                    "$ref": "#/$defs/StoredValueTransactionType3Code",
                    "description": "Identification of operation to proceed on the stored value account or the stored value card."
                }
            },
            "required": [
                "TransactionType"
            ],
            "type": "object",
            "description": "Data related to the stored value card."
        },
        "StoredValueRequest7": {
            "additionalProperties": false,
            "properties": {
                "Data": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StoredValueData7"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/StoredValueData7"
                            },
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "description": "Data related to the stored value card."
                },
                "SaleTransactionIdentification": {
                    "$ref": "#/$defs/TransactionIdentifier1",
                    "description": "Sale System identification of the transaction in an unambiguous way."
                }
            },
            "required": [
                "Data"
            ],
            "type": "object",
            "description": "Data to request a stored value service (prepaid card or account)."
        },
        "StoredValueTransactionType3Code": {
            "enum": [
                "ACTV",
                "DUPL",
                "LOAD",
                "RESV",
                "REVS",
                "ULOA",
                "CLOS",
                "DCTV",
                "OPEN",
                "BALC"
            ],
            "type": "string",
            "description": "Identification of operation to proceed on the stored value account or the stored value card. \nCode: RESV: \t Reserve: \tDefinition: Reserve the account (e.g. get an activation code). \nCode: ACTV: \t Activate: \tDefinition: Activate the account or the card. \nCode: LOAD: \t Load: \tDefinition: Load the account or the card with money. \nCode: ULOA: \t Unload: \tDefinition: Unload the account. \nCode: REVS: \t Reverse: \tDefinition: Reverse an activation or loading. \nCode: DUPL: \t Duplicate: \tDefinition: Duplicate the code or number provided by the loading or activation. \nCode: DCTV: \t Deactivate: \tDefinition: Deactivate the account or the card. \nCode: OPEN: \t OpenAccount: \tDefinition: Open the account. \nCode: CLOS: \t CloseAccount: \tDefinition: Close the account. \nCode: BALC: \t Balance: \tDefinition: Balance enquiry."
        },
        "SupplementaryData1": {
            "additionalProperties": false,
            "properties": {
                "Envelope": {
                    "$ref": "#/$defs/SupplementaryDataEnvelope1",
                    "description": "Technical element wrapping the supplementary data."
                },
                "PlaceAndName": {
                    "$ref": "#/$defs/Max350Text",
                    "description": "Unambiguous reference to the location where the supplementary data must be inserted in the message instance.\r\nIn the case of XML, this is expressed by a valid XPath."
                }
            },
            "required": [
                "Envelope"
            ],
            "type": "object",
            "description": "Additional information that can not be captured in the structured fields and/or any other specific block."
        },
        "SupplementaryDataEnvelope1": {
            "additionalProperties": false,
            "patternProperties": {
                "^\\w+$": {}
            },
            "type": "object",
            "description": "Technical component that contains the validated supplementary data information. This technical envelope allows to segregate the supplementary data information from any other information."
        },
        "SupportedPaymentOption2Code": {
            "enum": [
                "PART",
                "MSRV",
                "INSI",
                "PINQ"
            ],
            "type": "string",
            "description": "Specifies the options supported for a payment transaction. \nCode: PART: \t PartialApproval: \tDefinition: The entity supports a partial approval of the payment transaction. \nCode: MSRV: \t PaymentApprovalOnly: \tDefinition: The entity supports the approval of the payment service along with the decline of additional requested services (as cash-back). \nCode: INSI: \t IssuerInstalment: \tDefinition: The sender support IssuerInstalment proposals to the Cardholder. \nCode: PINQ: \t PINRequest: \tDefinition: The sender is able to support Single Tap transaction."
        },
        "Token1": {
            "additionalProperties": false,
            "properties": {
                "PaymentToken": {
                    "$ref": "#/$defs/Max19NumericText",
                    "description": "Surrogate value of the PAN."
                },
                "TokenAssuranceData": {
                    "$ref": "#/$defs/Max140Text",
                    "description": "Supporting information for the Token Assurance Method."
                },
                "TokenAssuranceMethod": {
                    "$ref": "#/$defs/Max2NumericText",
                    "description": "Value that allows a Token Service Provider to indicate the identification and verification performed representing the binding of the payment token to the underlying PAN and cardholder."
                },
                "TokenInitiatedIndicator": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "Original transaction was initiated by Token."
                },
                "TokenRequestorIdentification": {
                    "$ref": "#/$defs/Max11NumericText",
                    "description": "Identification of a party requesting a token."
                },
                "TokenExpiryDate": {
                    "$ref": "#/$defs/Exact4NumericText",
                    "description": "Expiry date of the payment token.\r\nISO 8583 bit 14."
                }
            },
            "type": "object",
            "description": "Unencrypted sensitive data of a token."
        },
        "Traceability8": {
            "additionalProperties": false,
            "properties": {
                "ProtocolName": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Name of the outgoing protocol used by the node."
                },
                "ProtocolVersion": {
                    "$ref": "#/$defs/Max6Text",
                    "description": "Version of the protocol."
                },
                "RelayIdentification": {
                    "$ref": "#/$defs/GenericIdentification177",
                    "description": "Identification of a partner of a message exchange."
                },
                "TraceDateTimeIn": {
                    "$ref": "#/$defs/ISODateTime",
                    "description": "Date and time of incoming data exchange for relaying or processing."
                },
                "TraceDateTimeOut": {
                    "$ref": "#/$defs/ISODateTime",
                    "description": "Date and time of the outgoing exchange for relaying or processing."
                }
            },
            "required": [
                "RelayIdentification",
                "TraceDateTimeIn",
                "TraceDateTimeOut"
            ],
            "type": "object",
            "description": "Identification of partners involved in exchange from the merchant to the issuer, with the relative timestamp of their exchanges."
        },
        "TrackData2": {
            "additionalProperties": false,
            "properties": {
                "TrackFormat": {
                    "$ref": "#/$defs/TrackFormat1Code",
                    "description": "Card or check track format."
                },
                "TrackNumber": {
                    "$ref": "#/$defs/Number",
                    "description": "Track number of the card."
                },
                "TrackValue": {
                    "$ref": "#/$defs/Max140Text",
                    "description": "Card track content or equivalent."
                }
            },
            "required": [
                "TrackValue"
            ],
            "type": "object",
            "description": "Magnetic track or equivalent payment card data."
        },
        "TrackFormat1Code": {
            "enum": [
                "AAMV",
                "CMC7",
                "E13B",
                "ISOF",
                "JIS1",
                "JIS2"
            ],
            "type": "string",
            "description": "Use to identify format of a track on a card or other documents like checks. \nCode: ISOF: \t ISOFormat: \tDefinition: ISO card track format - ISO 7813 - ISO 4909. \nCode: JIS1: \t JISIFormat: \tDefinition: Japanese track format I. \nCode: JIS2: \t JISIIFormat: \tDefinition: Japanese track format II. \nCode: AAMV: \t AAMVAFormat: \tDefinition: American driver license. \nCode: CMC7: \t CMC7CheckFormat: \tDefinition: Magnetic Ink Character Recognition, using the CMC-7 font - ISO 1004 Line at the bottom of a check containing the bank account and the check number. \nCode: E13B: \t E13BCheckFormat: \tDefinition: Magnetic Ink Character Recognition, using the E-13B font) Line at the bottom of a check containing the bank account and the check number."
        },
        "TransactionAction1Code": {
            "enum": [
                "STAR",
                "STOP"
            ],
            "type": "string",
            "description": "Action to realise on a transaction. \nCode: STAR: \t StartTransaction: \tDefinition: Start a transaction by a swipe ahead mechanism, with the services which are enabled. \nCode: STOP: \t Stop: \tDefinition: Keep quite after a swipe ahead mechanism."
        },
        "TransactionChannel5Code": {
            "enum": [
                "MAIL",
                "TLPH",
                "ECOM",
                "TVPY",
                "SECM",
                "MOBL",
                "MPOS"
            ],
            "type": "string",
            "description": "Identifies the type of the communication channels used by the cardholder to the acceptor system. \nCode: MAIL: \t MailOrder: \tDefinition: Mail order. \nCode: TLPH: \t TelephoneOrder: \tDefinition: Telephone order. \nCode: ECOM: \t ElectronicCommerce: \tDefinition: Electronic commerce. \nCode: TVPY: \t TelevisionPayment: \tDefinition: Payment on television. \nCode: BRAN: \t OfficeOrBranch: \tDefinition: Office or branch. \nCode: HOBA: \t HomeBanking: \tDefinition: Home banking. \nCode: FIAD: \t FinancialAdvisor: \tDefinition: Financial advisor. \nCode: MOBL: \t MobilePayment: \tDefinition: Payment performed through a cardholder mobile device. \nCode: SECM: \t SecuredElectronicCommerce: \tDefinition: Electronic commerce with cardholder authentication. \nCode: MPOS: \t MobilePOS: \tDefinition: Payment performed through a merchant mobile device."
        },
        "TransactionEnvironment1Code": {
            "enum": [
                "MERC",
                "PRIV",
                "PUBL"
            ],
            "type": "string",
            "description": "Indicates the environment of the transaction. \nCode: MERC: \t Merchant: \tDefinition: Merchant environment. \nCode: PRIV: \t Private: \tDefinition: Private environment. \nCode: PUBL: \t Public: \tDefinition: Public environment. \nCode: BRCH: \t Branch: \tDefinition: Bank environment. \nCode: OTHR: \t Other: \tDefinition: Other environments, for instance a mall or an airport."
        },
        "TransactionIdentifier1": {
            "additionalProperties": false,
            "properties": {
                "TransactionDateTime": {
                    "$ref": "#/$defs/ISODateTime",
                    "description": "Local date and time of the transaction assigned by the POI (Point Of Interaction)."
                },
                "TransactionReference": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification of the transaction that has to be unique for a time period."
                }
            },
            "required": [
                "TransactionDateTime",
                "TransactionReference"
            ],
            "type": "object",
            "description": "Identification of the transaction in an unambiguous way."
        },
        "TransactionToPerform6Choice": {
            "additionalProperties": false,
            "properties": {
                "LoyaltyRequest": {
                    "$ref": "#/$defs/LoyaltyRequest6",
                    "description": "Content of the Loyalty Request message."
                },
                "PaymentRequest": {
                    "$ref": "#/$defs/PaymentRequest6",
                    "description": "Content of the Payment Request message."
                },
                "ReversalRequest": {
                    "$ref": "#/$defs/ReversalRequest6",
                    "description": "Content of the Reversal Request message."
                }
            },
            "type": "object",
            "description": "Content of the batch request message."
        },
        "TransactionVerificationResult4": {
            "additionalProperties": false,
            "properties": {
                "AdditionalResult": {
                    "$ref": "#/$defs/Max500Text",
                    "description": "Additional result of the verification."
                },
                "Method": {
                    "$ref": "#/$defs/AuthenticationMethod6Code",
                    "description": "Method of verification that has been performed."
                },
                "Result": {
                    "$ref": "#/$defs/Verification1Code",
                    "description": "Result of the verification."
                },
                "VerificationEntity": {
                    "$ref": "#/$defs/AuthenticationEntity2Code",
                    "description": "Entity or device that has performed the verification."
                }
            },
            "required": [
                "Method"
            ],
            "type": "object",
            "description": "Result of performed verifications for the transaction."
        },
        "TrueFalseIndicator": {
            "type": "boolean",
            "description": "A flag indicating a True or False value."
        },
        "TypeOfAmount8Code": {
            "enum": [
                "ACTL",
                "ESTM",
                "MAXI",
                "DFLT",
                "RPLT",
                "INCR",
                "DECR",
                "RESD"
            ],
            "type": "string",
            "description": "Qualifies the amount associated with the transaction. \nCode: CSHB: \t Cashback: \tDefinition: Cash-back amount. \nCode: GRTY: \t Gratuity: \tDefinition: Gratuity amount. \nCode: FEES: \t Fees: \tDefinition: Fees. \nCode: RBTS: \t Rebates: \tDefinition: Global rebate of the transaction. This amount is counted as a negative amount. \nCode: VATX: \t ValueAddedTax: \tDefinition: Value added tax amount. \nCode: ACTL: \t Actual: \tDefinition: Actual amount. \nCode: RPLT: \t Replacement: \tDefinition: Replacement amount. \nCode: MAXI: \t Maximum: \tDefinition: Maximum amount (the final amount must be less or equal). \nCode: DFLT: \t Default: \tDefinition: Default amount. \nCode: ESTM: \t Estimated: \tDefinition: Estimated amount (the final amount could be above or below). \nCode: ORIG: \t Original: \tDefinition: Original amount authorised during the real-time authorisation process. \nCode: SRCH: \t Surcharge: \tDefinition: Extra fee for a purchase or a withdrawal. \nCode: SRVF: \t ServiceFee: \tDefinition: Service fee. \nCode: INTC: \t InterchangeFee: \tDefinition: Interchange fee. \nCode: DCNT: \t Discount: \tDefinition: Discount, rebate or voucher, related to loyalty programs. This amount is counted as a negative amount. \nCode: ATMF: \t ATMCommissionFee: \tDefinition: Commission that the issuer will charge to the cardholder, which should be shown and accepted by the cardholder before the money is disbursed. \nCode: AMTH: \t AuthorisedAmount: \tDefinition: Transaction amount that has been authorised. \nCode: CRDB: \t CardRemainingBalance: \tDefinition: Remaining allowed amount for this type of transaction with this card, after the transaction, until the end of the card limit period. \nCode: AMTX: \t MaximumAllowedAmount: \tDefinition: Maximum amount allowed for the transaction in the transaction amount currency if the transaction amount of the request was declined. \nCode: AMTN: \t MinimumAllowedAmount: \tDefinition: Minimum amount allowed in the TransactionAmount currency if the transaction amount of the request was declined. \nCode: AMTQ: \t RequestedAmount: \tDefinition: Transaction amount that has been requested to be authorised. \nCode: FEEI: \t IssuerFees: \tDefinition: Fees amount from the card issuer. \nCode: COMI: \t IssuerCommission: \tDefinition: Commission from the card issuer. \nCode: FEEH: \t InterchangeFees: \tDefinition: Interchange fees. \nCode: FEEP: \t ProcessingFees: \tDefinition: Processing fees. \nCode: FEEC: \t CurrencyConversionFees: \tDefinition: Currency conversion fees. \nCode: FEEA: \t InternationalServiceAssessmentFees: \tDefinition: International service assessment fees. \nCode: COMM: \t Commission: \tDefinition: Commission, for example for DCC (Dynamic Currency Conversion) transactions. \nCode: DONN: \t Donation: \tDefinition: Donation amount. \nCode: TAXT: \t Tax: \tDefinition: Taxes applicable to the transaction. \nCode: INCR: \t Incremental: \tDefinition: Incremental amount for reservation. \nCode: DECR: \t Decremental: \tDefinition: Decremental amount for reservation. \nCode: RESD: \t Reserved: \tDefinition: Reserved or updated reserved amount for reservation. \nCode: CONF: \t ConfirmedAmount: \tDefinition: Actual amount that has been paid to the ultimate beneficiary, after all charges etc... have been deducted. \nCode: INST: \t InstructedAmount: \tDefinition: Amount of money to be moved between the debtor (ordering customer) and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\r\nUsage: This amount has to be transported unchanged through the transaction chain. \nCode: ATAF: \t ATMAccessFee: \tDefinition: Fee for giving access to an ATM. \nCode: CHBF: \t CardholderBillingFee: \tDefinition: Fee related to a cardholder billing. \nCode: CLFE: \t ClearingFee: \tDefinition: Fee related to a clearing transaction. \nCode: CRTF: \t CreditTransactionFee: \tDefinition: Fee related to a credit transaction. \nCode: CUAT: \t Cumulative: \tDefinition: Contains the total amount of all authorisations related to the same cardholder purchase activities. Example: total of all incremental or splitted shipment authorisations for the same purchase. \nCode: DBTF: \t DebitTransactionFee: \tDefinition: Fee related to a debit transaction. \nCode: EXTR: \t Extra: \tDefinition: Extra charges (for example,  minibar, etc.) \nCode: FXFE: \t ForeignExchangeFee: \tDefinition: Fee related to a foreign exchange transaction. \nCode: FDTF: \t FundsTransfer: \tDefinition: Fee related to a funds transfer transaction \nCode: IPFE: \t InstantPaymentFee: \tDefinition: Fee related to an instant payment. \nCode: ITFE: \t InstantTransferFee: \tDefinition: Fee related to an instant transfer transaction. \nCode: ISCF: \t IssuerCardholderFee: \tDefinition: Fee applied by the card issuer to the cardholder. \nCode: LTAM: \t Limit: \tDefinition: Limit of amounts for the transaction. \nCode: OTHN: \t OtherNational: \tDefinition: Other type of amount defined at national level. \nCode: OTHP: \t OtherPrivate: \tDefinition: Other type of amount defined at private level. \nCode: REFE: \t ReconciliationFee: \tDefinition: Fee related to a reconciliation transaction. \nCode: STFE: \t SettlementFee: \tDefinition: Fee related to a settlement transaction. \nCode: TXFE: \t TransactionFee: \tDefinition: Fee related to a transaction. \nCode: ANTA: \t Anticipated: \tDefinition: Amount anticipated for the transaction \nCode: BAGG: \t Baggage: \tDefinition: Baggage related fees \nCode: CHTC: \t ChargedToCard: \tDefinition: Amount that has been charged to card account \nCode: CPFE: \t ClearingPriorityFee: \tDefinition: Fee related to a clearing transaction for a given priority. \nCode: DNTL: \t Dental: \tDefinition: Amount qualified for dental prescriptions \nCode: DPST: \t Deposit: \tDefinition: Deposit amount. \nCode: FUFE: \t FundsTransferFee: \tDefinition: Fee related to a funds transfer. \nCode: OQME: \t OtherQualifiedMedical: \tDefinition: Amount qualified for other medical expenses \nCode: PRES: \t Prescription: \tDefinition: Amount for medical prescription \nCode: PRXY: \t Proxy: \tDefinition: Substitute for an amount to be authorised. \nCode: RQCH: \t RequestedCashback: \tDefinition: Requested cashback amount \nCode: SPFE: \t SettlementPriorityFee: \tDefinition: Fee related to a settlement transaction for a given priority. \nCode: THTC: \t TotalHealthcare: \tDefinition: Total healthcare amount \nCode: TRNS: \t Transit: \tDefinition: Amount in transit \nCode: VISN: \t Vision: \tDefinition: Amount qualified for medical vision expenses \nCode: CONN: \t Connect: \tDefinition: Telephone connection-related charge \nCode: DATA: \t Data: \tDefinition: Data communication related charges \nCode: EXTK: \t ExchangeTicket: \tDefinition: Fee for exchanging a ticket (modifying an itinerary) \nCode: EXTF: \t ExchangeTicketFee: \tDefinition: Fee for exchanging a ticket (modifying an itinerary) \nCode: FARE: \t Fare: \tDefinition: Amount of fare \nCode: FDBV: \t FoodBeverage: \tDefinition: Amount of food and beverages \nCode: INSU: \t Insurance: \tDefinition: Insurance charges  \nCode: LNDS: \t LongDistance: \tDefinition: Charges related to a long distance call.  \nCode: MISC: \t Miscellaneous: \tDefinition: Miscellaneous charges not elsewhere defined \nCode: PHNE: \t Phone: \tDefinition: Phone charges \nCode: PRPY: \t Prepayment: \tDefinition: Amount of prepayment \nCode: TOTL: \t Total: \tDefinition: Total amount of charges \nCode: USGE: \t Usage: \tDefinition: Telephone usage-related charge \nCode: PDCC: \t PreDCC: \tDefinition: Local amount before DCC (Dynamic Currency Conversion) was applied. \nCode: UPGD: \t Upgrade: \tDefinition: Amount for an upgrade. \nCode: CLUB: \t ClubFee: \tDefinition: Amount for club fee. \nCode: CARG: \t Cargo: \tDefinition: Cargo Amount. \nCode: DUTY: \t DutyFree: \tDefinition: Duty free amount \nCode: TKDL: \t TicketDelivery: \tDefinition: Ticket delivery amount. \nCode: PETC: \t PetCarrier: \tDefinition: Pet carrier. \nCode: TOUR: \t TourOrder: \tDefinition: Tour order amount. \nCode: MNIF: \t MinimumInterchangeFee: \tDefinition: Minimum interchange fee applicable. \nCode: MXIF: \t MaximumInterchangeFee: \tDefinition: Maximum applicable interchange fee. \nCode: CSIF: \t CashBackInterchangeFee: \tDefinition: Interchange fee applicable to cash back amount."
        },
        "UPICIdentifier": {
            "pattern": "^([0-9]{8,17})$",
            "type": "string",
            "description": "Universal Payment Identification Code (UPIC). Identifier used by the New York Clearing House to mask confidential data, such as bank accounts and bank routing numbers. UPIC numbers remain with business customers, regardless of banking relationship changes."
        },
        "UnitOfMeasure6Code": {
            "enum": [
                "PIEC",
                "TONS",
                "FOOT",
                "GBGA",
                "USGA",
                "GRAM",
                "INCH",
                "KILO",
                "PUND",
                "METR",
                "CMET",
                "MMET",
                "LITR",
                "CELI",
                "MILI",
                "GBOU",
                "USOU",
                "GBQA",
                "USQA",
                "GBPI",
                "USPI",
                "MILE",
                "KMET",
                "YARD",
                "SQKI",
                "HECT",
                "ARES",
                "SMET",
                "SCMT",
                "SMIL",
                "SQMI",
                "SQYA",
                "SQFO",
                "SQIN",
                "ACRE",
                "KWHO",
                "DGEU",
                "GGEU"
            ],
            "type": "string",
            "description": "Unit of measure of the item purchased. \nCode: KILO: \t Kilogram: \tDefinition: Basic unit of mass in the SI system, 1000 grams. \nCode: PIEC: \t Piece: \tDefinition: Standard length of cloth, wallpaper, as an item for sale or amount of a substance. \nCode: TONS: \t Ton: \tDefinition: Measure of weight, in Britain 2240lb (long ton)and in the US 2000lb (short ton). \nCode: METR: \t Metre: \tDefinition: Unit of length in the metric system, equal to 39.37 inches. \nCode: INCH: \t Inch: \tDefinition: Measure of length equal to 2.54 cm. \nCode: YARD: \t Yard: \tDefinition: Unit of length equal to 3 feet or 0.9144 metre. \nCode: GBGA: \t GBGallon: \tDefinition: Unit of volume that is equal to 8 pints. \nCode: GRAM: \t Gram: \tDefinition: Unit of measure that is equal to a 1, 000th of a kilo. \nCode: CMET: \t Centimetre: \tDefinition: Unit of measure that is equal to one hundredth of a metre. \nCode: SMET: \t SquareMetre: \tDefinition: Measure of a surface, one metre by one metre. \nCode: FOOT: \t Foot: \tDefinition: Unit of length equal to 1/3 yard. \nCode: MILE: \t Mile: \tDefinition: Unit of length equal to 1, 760 yards. \nCode: SQIN: \t SquareInch: \tDefinition: Measure of a surface, one inch by one inch. \nCode: SQFO: \t SquareFoot: \tDefinition: Measure of a surface, one foot by one foot. \nCode: SQMI: \t SquareMile: \tDefinition: Measure of a surface, one mile by one mile. \nCode: GBOU: \t GBOunce: \tDefinition: Unit of weight equal to a sixteenth of a pound. \nCode: USOU: \t USOunce: \tDefinition: Unit of weight equal to a sixteenth of a pound. \nCode: GBPI: \t GBPint: \tDefinition: Unit of volume that is equal to 568 cubic centimetres. \nCode: USPI: \t USPint: \tDefinition: Unit of volume that is equal to 473 cubic centimetres. \nCode: GBQA: \t GBQuart: \tDefinition: Unit of volume that is equal to 2 pints. \nCode: USQA: \t USQuart: \tDefinition: Unit of volume that is equal to 2 pints. \nCode: USGA: \t USGallon: \tDefinition: Unit of volume that is equal to 8 pints. \nCode: MMET: \t Millimetre: \tDefinition: Unit of measure that is a thousandth of one metre. \nCode: KMET: \t Kilometre: \tDefinition: Unit of measure that is equal to 1, 000 meters. \nCode: SQYA: \t SquareYard: \tDefinition: Measure of a surface, one yard by one yard. \nCode: ACRE: \t Acre: \tDefinition: Unit of measure equal to 4, 840 square yards. \nCode: ARES: \t Are: \tDefinition: Unit of measure equal to a 100 square meters. \nCode: SMIL: \t SquareMillimetre: \tDefinition: Measure of a surface, one millimetre by one millimetre. \nCode: SCMT: \t SquareCentimetre: \tDefinition: Measure of a surface, one centimetre by one centimetre. \nCode: HECT: \t Hectare: \tDefinition: Unit of measure that is equal to 10, 000 square meters. \nCode: SQKI: \t SquareKilometre: \tDefinition: Measure of a surface, one kilometre by one kilometre. \nCode: MILI: \t MilliLitre: \tDefinition: Unit of volume that is equal to one thousandth of a litre. \nCode: CELI: \t Centilitre: \tDefinition: Unit of volume that is equal to one hundredth of a litre. \nCode: LITR: \t Litre: \tDefinition: Unit of volume that is equal to a thousand cubic centimetres. \nCode: PUND: \t Pound: \tDefinition: Unit of weight equal to 0.454 kilograms. \nCode: ALOW: \t Allowances: \tDefinition: Amount of money deducted from a price or an amount due. \nCode: ACCY: \t AmountOfCurrency: \tDefinition: Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217. \nCode: BARL: \t Barrels: \tDefinition: Unit of volume that is equal to 42 US gallons. \nCode: BCUF: \t BillionCubicFeet: \tDefinition: Unit of measure for large volumes of natural gas equivalent to 28316846 cubic meters. \nCode: BDFT: \t BoardFeet: \tDefinition: Measure of length equal to 144 cubic inches. \nCode: BUSL: \t Bushels: \tDefinition: Unit of weight that is equal to 8 gallons. Mostly used for agricultural products with a specification of weight defined for each commodity differently. \nCode: CEER: \t CertifiedEmissionsReduction: \tDefinition: Unit of emissions type (or carbon credits) issued by the Clean Development Mechanism (CDM) Executive Board for emission reductions achieved by CDM projects and verified by a DOE (Designated Operational Entity) under the rules of the Kyoto Protocol. \nCode: CLRT: \t ClimateReserveTonnes: \tDefinition: Unit of offset credits used by the Climate Action Reserve. One Climate Reserve Tonne is equal to one metric ton of Greenhouse Gas (GHG) reduced/sequestered. \nCode: CBME: \t CubicMeters: \tDefinition: Unit of volume that is equal to one meter in length, breadth and height or also equal to 1000 liters. \nCode: DAYS: \t Days: \tDefinition: Unit of time that is equal to 24 hours. \nCode: DMET: \t DryMetricTons: \tDefinition: Unit of weight that is equal to the same mass value as a metric ton excluding moisture. \nCode: ENVC: \t EnvironmentalCredit: \tDefinition: Unit of measure for ownership of credit (or allowance) of carbon dioxide emission (in metric ton). \nCode: ENVO: \t EnvironmentalOffset: \tDefinition: Unit of measure for reduction of carbon dioxide emission (in metric ton) that may result in Environmental Credit. \nCode: HUWG: \t Hundredweight: \tDefinition: Unit of weight or mass of various values in the Imperial Unit System also known as quintal, cental or centum. \nCode: KWDC: \t KilowattDayCapacity: \tDefinition: Unit of measure of the capacity of production of electric power equal to 1000 watt in one day. \nCode: KWHO: \t KilowattHours: \tDefinition: Unit of measure that is equal to the power consumption of one kilowatt during one hour. \nCode: KWHC: \t KilowattHoursCapacity: \tDefinition: Unit of measure of the capacity of production of electric power equal to 1000 watt in one hour. \nCode: KMOC: \t KilowattMinuteCapacity: \tDefinition: Unit of measure of the capacity of production of electric power equal to 1000 watt in one minute. \nCode: KWMC: \t KilowattMonthCapacity: \tDefinition: Unit of measure of the capacity of production of electric power equal to 1000 watt in one month. \nCode: KWYC: \t KilowattYearCapacity: \tDefinition: Unit of measure of the capacity of production of electric power equal to 1000 watt in one year. \nCode: MWDC: \t MegawattDayCapacity: \tDefinition: Unit of measure of the capacity of production of electric power equal to 1000000 watt in one day. \nCode: MWHO: \t MegawattHours: \tDefinition: Unit of measure that is equal to the power consumption of one megawatt during one hour. \nCode: MWHC: \t MegawattHoursCapacity: \tDefinition: Unit of measure of the capacity of production of electric power equal to 1000000 watt in one hour. \nCode: MWMC: \t MegawattMinuteCapacity: \tDefinition: Unit of measure of the capacity of production of electric power equal to 1000000 watt in one minute. \nCode: MMOC: \t MegawattMonthCapacity: \tDefinition: Unit of measure of the capacity of production of electric power equal to 1000000 watt in one month. \nCode: MWYC: \t MegawattYearCapacity: \tDefinition: Unit of measure of the capacity of production of electric power equal to 1000000 watt in one year. \nCode: TONE: \t MetricTons: \tDefinition: Unit of mass equal to 1000 kilograms; equivalent to approximately 2,204.6 pounds, 1.102 short tons (US) or 0.984 long tons (imperial). \nCode: MIBA: \t MillionBarrels: \tDefinition: Unit of volume that is equal to 1 million barrels equivalent to 42.000.000 US gallons. \nCode: MBTU: \t OneMillionBTU: \tDefinition: Unit of measure of heat equal to one million British thermal unit (BTU). \nCode: OZTR: \t TroyOunces: \tDefinition: Unit of weight equal to 31.1034768 grams. Used in precious metals. \nCode: UCWT: \t USHundredweight: \tDefinition: Unit of weight or mass of various values in the US Customary System also known as quintal, cental or centum. Equal to 100 lbs. \nCode: IPNT: \t IndexPoint: \tDefinition: Decimal number used to calculate an amount or a price. \nCode: PWRD: \t PrincipalWithRelationToDebtInstrument: \tDefinition: Amount of money borrowed, or part of that amount which remains unpaid (excluding interest). \nCode: DGEU: \t DieselGallonEquivalent: \tDefinition: Amount of fuel alternative equal to one gallon of diesel. \nCode: GGEU: \t GasolineGallonEquivalent: \tDefinition: Amount of fuel alternative equal to one gallon of gasoline. \nCode: TOCD: \t TonsOfCarbonDioxide: \tDefinition: Tons of carbon dioxide. \nCode: SHAS: \t Shares: \tDefinition: Financial instrument that gives the owner right to dividends paid by a company and the most junior claim on the companies assets in the event of a bankruptcy. \nCode: THMS: \t Therms: \tDefinition: Unit of heat, often used a unit of measure for natural gas in the UK. \nCode: FUTU: \t Future: \tDefinition: Exchange traded contract that defines an agreement to buy specific quantities of a commodity or financial instrument at an agreed time in the future. \nCode: GWHO: \t GigawattHours: \tDefinition: Unit of measure that is equal to the power consumption of one Gigawatt during one hour. \nCode: BRTU: \t BritishThermalUnit: \tDefinition: Unit of measure of heat required to raise the temperature of one pound of water by one degree Fahrenheit. \nCode: LOTS: \t Lot: \tDefinition: Indication of the unit of measurement. \nCode: BAGG: \t Bag: \tDefinition: Code for a bag. \nCode: BALE: \t Bale: \tDefinition: Code for a bale. \nCode: BOTL: \t Bottle: \tDefinition: Code for a bottle. \nCode: BOXX: \t Box: \tDefinition: Code for a box. \nCode: CRTN: \t Carton: \tDefinition: Code for a carton. \nCode: CNTR: \t Container: \tDefinition: Code for a container. \nCode: CRAT: \t Crate: \tDefinition: Code for a crate. \nCode: CBIN: \t CubicInch: \tDefinition: Measure of a volume, one inch by one inch by one inch. \nCode: CBML: \t CubicMillimetre: \tDefinition: Unit of volume that is equal to one thousandth of a litre. \nCode: GBFO: \t GBFuildOunce: \tDefinition: Unit of volume equal to 2, 841 306 centilitre. \nCode: GBTN: \t GBTon: \tDefinition: Measure of weight, in Britain 2240 lb (long ton). \nCode: USBA: \t USBarrel: \tDefinition: Unit of volume equal to 158, 9873 litre. \nCode: USFO: \t USFluidOunce: \tDefinition: Unit of volume equal to 2, 957353 centilitre. \nCode: USTN: \t USTon: \tDefinition: Measure of weight, in the US 2000 lb (short ton). \nCode: CDDA: \t CoolingDegreeDay: \tDefinition: Cooling degree day \nCode: HDDA: \t HeatingDegreeDay: \tDefinition: Heating degree day \nCode: CPDA: \t CriticalPrecipitationDay: \tDefinition: Critical precipitation day"
        },
        "UserInterface4Code": {
            "enum": [
                "CDSP",
                "CRCP",
                "MDSP",
                "MRCP",
                "CRDO"
            ],
            "type": "string",
            "description": "Destination of the message. \nCode: CDSP: \t CardholderDisplay: \tDefinition: Cardholder display or interface. \nCode: CRCP: \t CardholderReceipt: \tDefinition: Cardholder receipt. \nCode: MDSP: \t MerchantDisplay: \tDefinition: Merchant display or interface. \nCode: MRCP: \t MerchantReceipt: \tDefinition: Merchant receipt. \nCode: ACQU: \t Acquirer: \tDefinition: Acquirer. \nCode: ISSR: \t Issuer: \tDefinition: Issuer. \nCode: AGNT: \t Agent: \tDefinition: Agent. \nCode: CRDO: \t OtherCardholderInterface: \tDefinition: Other interface of the cardholder, for instance e-mail or smartphone message. \nCode: CHAP: \t CardholderApplication: \tDefinition: Information dedicated to a software application related to a device belonging to the cardholder. \nCode: CLRA: \t ClearingAgentApplication: \tDefinition: Data dedicated to an application maintained by a clearing agent. \nCode: CLRL: \t ClearingAgentLog: \tDefinition: Data dedicated to a log maintained by the clearing agent. \nCode: DSPU: \t Dispute: \tDefinition: Interface used in case of disputes or chargebacks. \nCode: FILE: \t File: \tDefinition: File used to store the message. \nCode: LOGF: \t Log: \tDefinition: Information dedicated to a log file. \nCode: MRAP: \t MerchantApplication: \tDefinition: Information dedicated to a software application related to a device belonging to the merchant. \nCode: OTAI: \t OtherAcquirerInterface: \tDefinition: Other type of acquirer interface. \nCode: OCAI: \t OtherClearingAgentInterface: \tDefinition: Data dedicated to another interface maintained by the clearing agent. \nCode: OTII: \t OtherIssuerInterface: \tDefinition: Other type of issuer interface. \nCode: MRIN: \t OtherMerchantInterface: \tDefinition: Other interface of the merchant for instance e-mail or smartphone message. \nCode: OTHN: \t OtherNational: \tDefinition: Other type of interface defined at national level. \nCode: OTHP: \t OtherPrivate: \tDefinition: Other type of interface defined at private level. \nCode: OSAI: \t OtherSettlementAgentInterface: \tDefinition: Other settlement agent interface. \nCode: STLI: \t SettlementAgent: \tDefinition: Settlement agent interface. \nCode: TUCR: \t TopUpCredit: \tDefinition: Credit information related to a top-up account."
        },
        "Vehicle1": {
            "additionalProperties": false,
            "properties": {
                "AdditionalVehicleData": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Vehicle2"
                        },
                        {
                            "items": {
                                "$ref": "#/$defs/Vehicle2"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Additional information related to the vehicle."
                },
                "DriverOrVehicleCard": {
                    "$ref": "#/$defs/PlainCardData17",
                    "description": "Second card presented for the payment transaction."
                },
                "Hubometer": {
                    "$ref": "#/$defs/DecimalNumber",
                    "description": "Hubometer reading value indicating the distance travelled by the trailer."
                },
                "MaintenanceIdentification": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Identification assigned to the vehicle related to maintenance."
                },
                "Odometer": {
                    "$ref": "#/$defs/DecimalNumber",
                    "description": "Odometer reading value indicating the distance travelled by the vehicle."
                },
                "ReferHours": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Number of hours the refer unit has been in operation."
                },
                "ReplacementCar": {
                    "$ref": "#/$defs/TrueFalseIndicator",
                    "description": "True if the car is a replacement car."
                },
                "TrailerHours": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Number of hours the trailer has been in operation."
                },
                "TrailerNumber": {
                    "$ref": "#/$defs/Max35NumericText",
                    "description": "Number assigned to the vehicle trailer for identification."
                },
                "UnitNumber": {
                    "$ref": "#/$defs/Max35NumericText",
                    "description": "Identification of the vehicle in the fleet."
                },
                "VehicleNumber": {
                    "$ref": "#/$defs/Max35NumericText",
                    "description": "Number assigned to the vehicle for identification."
                },
                "VehicleTag": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Registration tag of the vehicle."
                },
                "VehicleTagEntryMode": {
                    "$ref": "#/$defs/CardDataReading5Code",
                    "description": "Entry mode of the registration tag."
                }
            },
            "type": "object",
            "description": "Information related to a vehicle used during a transaction."
        },
        "Vehicle2": {
            "additionalProperties": false,
            "properties": {
                "Data": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Information related to the vehicle."
                },
                "EntryMode": {
                    "$ref": "#/$defs/CardDataReading5Code",
                    "description": "Entry mode of the information."
                },
                "Type": {
                    "$ref": "#/$defs/Max35Text",
                    "description": "Type of information related to the vehicle."
                }
            },
            "required": [
                "Data"
            ],
            "type": "object",
            "description": "Additional information related to a vehicle."
        },
        "Verification1Code": {
            "enum": [
                "FAIL",
                "MISS",
                "NOVF",
                "PART",
                "SUCC",
                "ERRR"
            ],
            "type": "string",
            "description": "Result of the verification. \nCode: ERRR: \t TechnicalError: \tDefinition: Device or entity to perform the verification was unavailable. \nCode: SUCC: \t Successful: \tDefinition: Verification was successful. \nCode: PART: \t PartialMatch: \tDefinition: Verification was partially successful. \nCode: NOVF: \t NotPerformed: \tDefinition: Verification has not been performed. \nCode: MISS: \t Missing: \tDefinition: Information required to perform the verification was missing. \nCode: FAIL: \t Failed: \tDefinition: Verification failed. \nCode: FUTA: \t FurtherAction: \tDefinition: Further action required. \nCode: OTHN: \t OtherNational: \tDefinition: Other result of verification defined at national level. \nCode: OTHP: \t OtherPrivate: \tDefinition: Other result of verification defined at private level. \nCode: NOSP: \t NotSupported: \tDefinition: Not support the verification type"
        }
    },
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "additionalProperties": false,
    "description": "JSON schema for casp.001.001.06",
    "properties": {
        "Document": {
            "$ref": "#/$defs/SaleToPOIServiceRequestV06",
			"@name": "SaleToPOIServiceRequestV06",
			"@businessArea": "casp",
			"@messageFunctionality": "001",
			"@flavour": "001",
			"@version": "06"
        }
    },
    "type": "object"
}