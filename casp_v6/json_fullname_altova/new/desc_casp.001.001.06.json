{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"description": "JSON Schema generated by XMLSpy v2024 (x64) (http://www.altova.com)",
	"type": "object",
	"properties": {
		"@xmlns:iso20022": {
			"default": "urn:iso:std:iso:20022:tech:xsd:casp.001.001.06"
		},
		"Document": {
			"$ref": "#/$defs/SaleToPOIServiceRequestV06"
		}
	},
	"additionalProperties": false,
	"$defs": {
		"Acquirer10": {
			"description": "Acquirer involved in the card payment.\n",
			"type": "object",
			"properties": {
				"Identification": {
					"description": "Identification of an entity.\n",
					"$ref": "#/$defs/GenericIdentification177"
				},
				"ParametersVersion": {
					"description": "Specifies a character string with a maximum length of 256 characters.\n",
					"$ref": "#/$defs/Max256Text"
				}
			},
			"additionalProperties": false
		},
		"ActionMessage11": {
			"description": "Information to display, print or store.\n",
			"type": "object",
			"properties": {
				"Format": {
					"description": "Type of output format.\n- BARC: Barcode  : Barcode to output in several possible format.\n- MENT: MenuEntry  : A text to display as a menu before requesting an input.\n- MREF: MessageReference  : Predefined configured messages, identified by a reference.\n- SREF: ScreenReference  : Screen to display identified by a reference.\n- TEXT: SimpleText  : Text without format attributes.\n- HTML: XHTML  : XHTML document which includes a subset of the XHTML output tag.\n",
					"$ref": "#/$defs/OutputFormat3Code"
				},
				"InformationQualifier": {
					"description": "Qualification of the information to sent to an output logical device, to display or print to the Cashier or the Customer.\n- CUSA: CustomerAssistance  : Input of the Cardholder POI interface which can be entered by the Cashier to assist the Customer.\n- DISP: Display  : Standard display interface.\n- DOCT: Document  : When the POI System wants to print specific document (check, dynamic currency conversion ...). Used by the Sale System when the printer is not located on the Sale System.\n- ERRO: Error  : The information is related to an error situation occurring on the message sender.\n- INPT: Input  : Answer to a question or information to be entered by the Cashier or the Customer, at the request of the POI Terminal or the Sale Terminal.\n- POIR: POIReplication  : Information displayed on the Cardholder POI interface, replicated on the Cashier interface.\n- RCPT: Receipt  : Where you print the Payment receipt that could be located on the Sale System or in some cases a restricted Sale ticket on the POI Terminal.\n- SOND: Sound  : Standard sound interface.\n- STAT: Status  : The information is a new state on which the message sender is entering. For instance, during a payment, the POI could display to the Cashier that POI request an authorisation to the host acquirer.\n- VCHR: Voucher  : Coupons, voucher or special ticket generated by the POI or the Sale System and to be printed.\n",
					"$ref": "#/$defs/InformationQualify1Code"
				},
				"MinimumDisplayTime": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				},
				"MessageContent": {
					"description": "Specifies a character string with a maximum length of 20, 000 characters.\n",
					"$ref": "#/$defs/Max20000Text"
				},
				"MessageContentSignature": {
					"description": "General cryptographic message syntax (CMS) containing data. protected by a MAC or a digital signature.\n",
					"$ref": "#/$defs/ContentInformationType38"
				},
				"MessageDestination": {
					"description": "Destination of the message.\n- CDSP: CardholderDisplay  : Cardholder display or interface.\n- CRCP: CardholderReceipt  : Cardholder receipt.\n- MDSP: MerchantDisplay  : Merchant display or interface.\n- MRCP: MerchantReceipt  : Merchant receipt.\n- CRDO: OtherCardholderInterface  : Other interface of the cardholder, for instance e-mail or smartphone message.\n",
					"$ref": "#/$defs/UserInterface4Code"
				},
				"OutputBarcode": {
					"description": "Barcode content to display or print.\n",
					"$ref": "#/$defs/OutputBarcode2"
				},
				"ResponseRequiredFlag": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				}
			},
			"required": [
				"MessageDestination"
			],
			"additionalProperties": false
		},
		"ActiveCurrencyAndAmount": {
			"description": "A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.\n",
			"type": [
				"boolean",
				"object",
				"string",
				"number"
			],
			"properties": {
				"$": {
					"$ref": "#/$defs/ActiveCurrencyAndAmount_SimpleType"
				},
				"@Ccy": {
					"description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".\n",
					"$ref": "#/$defs/ActiveCurrencyCode"
				}
			},
			"required": [
				"@Ccy"
			],
			"additionalProperties": false,
			"example": "6545.56"
		},
		"ActiveCurrencyAndAmount_SimpleType": {
			"type": "number",
			"minimum": 0
		},
		"ActiveCurrencyCode": {
			"description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".\n",
			"type": "string",
			"pattern": "^([A-Z]{3,3})$",
			"example": "EUR"
		},
		"AddressType2Code": {
			"description": "Specifies the type of address.\n- ADDR: Postal  : Address is the complete postal address.\n- PBOX: POBox  : Address is a postal office (PO) box.\n- HOME: Residential  : Address is the home address.\n- BIZZ: Business  : Address is the business address.\n- MLTO: MailTo  : Address is the address to which mail is sent.\n- DLVY: DeliveryTo  : Address is the address to which delivery is to take place.\n",
			"type": "string",
			"enum": [
				"ADDR",
				"PBOX",
				"HOME",
				"BIZZ",
				"MLTO",
				"DLVY"
			],
			"example": "ADDR"
		},
		"AddressVerification1": {
			"description": "Numeric characters of the cardholder's address for verification.\n",
			"type": "object",
			"properties": {
				"AddressDigits": {
					"description": "Specifies a numeric string with a maximum length of 5 digits.\n",
					"$ref": "#/$defs/Max5NumericText"
				},
				"PostalCodeDigits": {
					"description": "Specifies a numeric string with a maximum length of 5 digits.\n",
					"$ref": "#/$defs/Max5NumericText"
				}
			},
			"additionalProperties": false
		},
		"AggregationTransaction3": {
			"description": "Payment transaction with an aggregated amount.\n",
			"type": "object",
			"properties": {
				"FirstPaymentDateTime": {
					"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
					"$ref": "#/$defs/ISODateTime"
				},
				"IndividualPayment": {
					"description": "Individual payment that has been aggregated.",
					"anyOf": [
						{
							"$ref": "#/$defs/DetailedAmount21"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/DetailedAmount21"
							}
						}
					]
				},
				"LastPaymentDateTime": {
					"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
					"$ref": "#/$defs/ISODateTime"
				},
				"NumberOfPayments": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				}
			},
			"additionalProperties": false
		},
		"Algorithm26Code": {
			"description": "Identification of a digest algorithm.\n- HS25: SHA256  : Message digest algorithm SHA-256 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha256).\n- HS38: SHA384  : Message digest algorithm SHA-384 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha384).\n- HS51: SHA512  : Message digest algorithm SHA-512 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha512).\n- HS01: SHA1  : The DEPRECATED Message digest algorithm SHA-1 as defined in FIPS 180-1 - (ASN.1 Object Identifier: id-sha1).\n- SH31: SHA3-224  : Message digest algorithm SHA3-224 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-224).\n- SH32: SHA3-256  : Message digest algorithm SHA3-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-256).\n- SH33: SHA3-384  : Message digest algorithm SHA3-384 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-384).\n- SH35: SHA3-512  : Message digest algorithm SHA3-512 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-512).\n- SHK1: SHAKE128  : Message digest algorithm SHAKE-128 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake128).\n- SHK2: SHAKE256  : Message digest algorithm SHAKE-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake256).\n- SMS3: SM3  : ShangMi 3 hash function as defined by ISO/IEC 10118-3:2018.\n",
			"type": "string",
			"enum": [
				"HS25",
				"HS38",
				"HS51",
				"HS01",
				"SH31",
				"SH32",
				"SH33",
				"SH35",
				"SHK1",
				"SHK2",
				"SMS3"
			],
			"example": "HS25"
		},
		"Algorithm27Code": {
			"description": "Cryptographic algorithms for the MAC (Message Authentication Code).\n- MACC: RetailCBCMAC  : Retail CBC (Chaining Block Cypher) MAC (Message Authentication Code) (cf. ISO 9807, ANSI X9.19) - (ASN.1 Object Identifier: id-retail-cbc-mac).\n- MCCS: RetailSHA256MAC  : Retail-CBC-MAC with SHA-256 (Secure HAsh standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-256).\n- CMA1: SHA256CMACwithAES128  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message.\n- MCC1: RetailSHA1MAC  : The DEPRECATED Retail-CBC-MAC with SHA-1 (Secure Hash standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-1).\n- CMA9: SHA384CMACwithAES192  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-384 digest of the message.\n- CMA5: SHA512CMACwithAES256  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-512 digest of the message.\n- CMA2: SHA256CMACWithAES256  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message.\n- CM31: SHA3-256CMACWithAES128  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-256 digest of the message.\n- CM32: SHA3-384CMACWithAES192  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-384 digest of the message.\n- CM33: SHA3-512CMACWithAES256  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-512 digest of the message.\n- MCS3: SHA3-256-3DESMAC  : 3DES CBC-MAC with SHA3-256 (SecureHAsh standard) and ISO/IEC9797-1 method 2 padding.\n- CCA1: CMACAES128  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- CCA2: CMACAES192  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- CCA3: CMACAES256  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- S34C: SM3SM4CBC  : ShangMi 4 enciphering method used in CBC mode coupled with ShangMi 3 hash function.\n- S34R: SM3SM4CTR  : ShangMi 4 enciphering method used in CTR mode coupled with ShangMi 3 hash function.\n",
			"type": "string",
			"enum": [
				"MACC",
				"MCCS",
				"CMA1",
				"MCC1",
				"CMA9",
				"CMA5",
				"CMA2",
				"CM31",
				"CM32",
				"CM33",
				"MCS3",
				"CCA1",
				"CCA2",
				"CCA3",
				"S34C",
				"S34R"
			],
			"example": "MACC"
		},
		"Algorithm28Code": {
			"description": "Cryptographic algorithms for the protection of transported keys.\n- EA2C: AES128CBC  : AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- E3DC: DES112CBC  : Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with double length key (112 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc).\n- DKP9: DUKPT2009  : DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2009 Annex A.\n- UKPT: UKPT  : UKPT (Unique Key Per Transaction) or Master Session Key key encryption - (ASN.1 Object Identifier: id-ukpt-wrap).\n- UKA2: UKPTwithAES192  : UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- EA9C: AES192CBC  : AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard).\n- EA5C: AES256CBC  : AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard).\n- DA12: AESDUKPT128ECB  : AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A, With key length of 128 bits.\n- DA19: AESDUKPT192ECB  : AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 192 bits.\n- DA25: AESDUKPT256ECB  : AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 256 bits.\n- N108: Nist800-108KeyDerivation  : Key Derivation according to the Special Publication from the NIST entitled 800-108.\n- EA5R: AES256CTR  : AES (Advanced Encryption Standard) CTR (Counter) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- EA9R: AES192CTR  : AES (Advanced Encryption Standard) CTR (Counter) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- EA2R: AES128CTR  : AES (Advanced Encryption Standard) CTR (Counter) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- E3DR: DES112CTR  : Triple DES (Data Encryption Standard) CTR (Counter) encryption with double length key (112 Bit) as defined in FIPS SP 800-38a.\n- E36C: DES168CBC  : Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with triple length key (168 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc).\n- E36R: DES168CTR  : Triple DES (Data Encryption Standard) CTR (Counter) encryption with triple length key (168 Bit) as defined in FIPS SP 800-38a.\n- SD5C: SDE056CBC  : The DEPRECATED Simple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with simple length key (56 Bit) as defined in FIPS PUB 81 - (ASN.1 Object Identifier: des-cbc).\n- UKA1: UKPTwithAES128  : UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- UKA3: UKPTwithAES256  : UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- SM4C: SM4CBC  : ShangMi 4 enciphering method used in CBC mode.\n- SM4R: SM4CTR  : ShangMi 4 enciphering method used in CTR mode.\n",
			"type": "string",
			"enum": [
				"EA2C",
				"E3DC",
				"DKP9",
				"UKPT",
				"UKA2",
				"EA9C",
				"EA5C",
				"DA12",
				"DA19",
				"DA25",
				"N108",
				"EA5R",
				"EA9R",
				"EA2R",
				"E3DR",
				"E36C",
				"E36R",
				"SD5C",
				"UKA1",
				"UKA3",
				"SM4C",
				"SM4R"
			],
			"example": "EA2C"
		},
		"Algorithm29Code": {
			"description": "Cryptographic algorithms for digital signatures.\n- ERS2: SHA256WithRSA  : Signature algorithms with RSA, using SHA-256 digest algorithm - (ASN.1 Object Identifier: sha256WithRSAEncryption).\n- ERS1: SHA1WithRSA  : The DEPRECATED Signature algorithms with RSA (PKCS #1 version 2.1), using SHA-1 digest algorithm - (ASN.1 Object Identifier: sha1WithRSAEncryption).\n- RPSS: RSASSA-PSS  : Signature algorithm with Appendix, Probabilistic Signature Scheme (PKCS #1 version 2.1), - (ASN.1 Object Identifier: id-RSASSA-PSS).\n- ERS3: SHA3-256WithRSA  : Signature algorithms with RSA, using SHA3-256 digest algorithm. (ASN.1 Object Identifier: id-rsassa-pkcs1-v1-5-with-sha3-256).\n- ED32: EcdsaSha3-256  : Elliptic Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm.\n- ED33: EcdsaSha3-384  : Elliptic Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm.\n- ED35: EcdsaSha3-512  : Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm.\n- ED23: EcdsaSha384  : Elliptic Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm.\n- ED25: EcdsaSha512  : Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm.\n- ES22: EcsdsaSha256  : Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm.\n- ES32: EcsdaSha3-256  : Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm.\n- ES33: EcsdsaSha3-384  : Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm.\n- ES35: EcsdsaSha3-512  : Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm.\n- ES23: EcsdsaSha384  : Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm.\n- ES25: EcsdsaSha512  : Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm.\n- ED22: EcdsaSha256  : Elliptic Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm.\n- EF32: EcfsdaSha3-256  : Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm.\n- EF22: EcfsdsaSha256  : Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm.\n- EF33: EcfsdsaSha3-384  : Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm.\n- EF35: EcfsdsaSha3-512  : Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm.\n- EF23: EcfsdsaSha384  : Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm.\n- EO33: EcosdsaSha3-384  : Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm.\n- EF25: EcfsdsaSha512  : Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm.\n- EO32: EcosdaSha3-256  : Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm.\n- EO22: EcosdsaSha256  : Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm.\n- EO35: EcosdsaSha3-512  : Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm.\n- EO23: EcosdsaSha384  : Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm.\n- EO25: EcosdsaSha512  : Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm.\n- DD22: EddsaSha256  : Edward Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm.\n- DD32: EddsaSha3-256  : Edward Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm.\n- DD33: EddsaSha3-384  : Edward Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm.\n- DD35: EddsaSha3-512  : Edward Curve Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm.\n- DD23: EddsaSha384  : Edward Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm.\n- DD25: EddsaSha512  : Edward Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm.\n- SM22: SM2Sha256  : ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm.\n- SM33: SM2Sha3-384  : ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm.\n- SM32: SM2Sha3-256  : ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm.\n- SM35: SM2Sha3-512  : ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm.\n- SM23: SM2Sha384  : ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm.\n- SM25: SM2Sha512  : ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm.\n- S2S3: SM2SM3  : ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with ShangMi3 Digest Algorithm.\n",
			"type": "string",
			"enum": [
				"ERS2",
				"ERS1",
				"RPSS",
				"ERS3",
				"ED32",
				"ED33",
				"ED35",
				"ED23",
				"ED25",
				"ES22",
				"ES32",
				"ES33",
				"ES35",
				"ES23",
				"ES25",
				"ED22",
				"EF32",
				"EF22",
				"EF33",
				"EF35",
				"EF23",
				"EO33",
				"EF25",
				"EO32",
				"EO22",
				"EO35",
				"EO23",
				"EO25",
				"DD22",
				"DD32",
				"DD33",
				"DD35",
				"DD23",
				"DD25",
				"SM22",
				"SM33",
				"SM32",
				"SM35",
				"SM23",
				"SM25",
				"S2S3"
			],
			"example": "ERS2"
		},
		"Algorithm7Code": {
			"description": "Asymmetric encryption algorithm of a transport key.\n- ERSA: RSAEncryption  : RSA encryption algorithm - (ASN.1 Object Identifier: rsaEncryption).\n- RSAO: RSAES-OAEP  : RSA encryption scheme based on Optimal Asymmetric Encryption scheme (PKCS #1 version 2.1) - (ASN.1 Object Identifier: id-RSAES-OAEP).\n",
			"type": "string",
			"enum": [
				"ERSA",
				"RSAO"
			],
			"example": "ERSA"
		},
		"Algorithm8Code": {
			"description": "Mask generator functions of the RSAES-OAEP encryption algorithm (RSA Encryption Scheme: Optimal Asymmetric Encryption Padding).\n- MGF1: MGF1  : Generator Function, used for RSA encryption and RSA igital signature (PKCS #1 version 2.1) - (ASN.1 Object Identifier: id-mgf1).\n",
			"type": "string",
			"enum": [
				"MGF1"
			],
			"example": "MGF1"
		},
		"AlgorithmIdentification31": {
			"description": "Identification of a cryptographic algorithm and parameters for the MAC computation.\n",
			"type": "object",
			"properties": {
				"Algorithm": {
					"description": "Cryptographic algorithms for the MAC (Message Authentication Code).\n- MACC: RetailCBCMAC  : Retail CBC (Chaining Block Cypher) MAC (Message Authentication Code) (cf. ISO 9807, ANSI X9.19) - (ASN.1 Object Identifier: id-retail-cbc-mac).\n- MCCS: RetailSHA256MAC  : Retail-CBC-MAC with SHA-256 (Secure HAsh standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-256).\n- CMA1: SHA256CMACwithAES128  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message.\n- MCC1: RetailSHA1MAC  : The DEPRECATED Retail-CBC-MAC with SHA-1 (Secure Hash standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-1).\n- CMA9: SHA384CMACwithAES192  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-384 digest of the message.\n- CMA5: SHA512CMACwithAES256  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-512 digest of the message.\n- CMA2: SHA256CMACWithAES256  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message.\n- CM31: SHA3-256CMACWithAES128  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-256 digest of the message.\n- CM32: SHA3-384CMACWithAES192  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-384 digest of the message.\n- CM33: SHA3-512CMACWithAES256  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-512 digest of the message.\n- MCS3: SHA3-256-3DESMAC  : 3DES CBC-MAC with SHA3-256 (SecureHAsh standard) and ISO/IEC9797-1 method 2 padding.\n- CCA1: CMACAES128  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- CCA2: CMACAES192  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- CCA3: CMACAES256  : CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- S34C: SM3SM4CBC  : ShangMi 4 enciphering method used in CBC mode coupled with ShangMi 3 hash function.\n- S34R: SM3SM4CTR  : ShangMi 4 enciphering method used in CTR mode coupled with ShangMi 3 hash function.\n",
					"$ref": "#/$defs/Algorithm27Code"
				},
				"Parameter": {
					"description": "Parameters associated to the MAC algorithm.\n",
					"$ref": "#/$defs/Parameter7"
				}
			},
			"required": [
				"Algorithm"
			],
			"additionalProperties": false
		},
		"AlgorithmIdentification32": {
			"description": "Cryptographic algorithm and parameters for the protection of the transported key.\n",
			"type": "object",
			"properties": {
				"Algorithm": {
					"description": "Cryptographic algorithms for the protection of transported keys.\n- EA2C: AES128CBC  : AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- E3DC: DES112CBC  : Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with double length key (112 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc).\n- DKP9: DUKPT2009  : DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2009 Annex A.\n- UKPT: UKPT  : UKPT (Unique Key Per Transaction) or Master Session Key key encryption - (ASN.1 Object Identifier: id-ukpt-wrap).\n- UKA2: UKPTwithAES192  : UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- EA9C: AES192CBC  : AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard).\n- EA5C: AES256CBC  : AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard).\n- DA12: AESDUKPT128ECB  : AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A, With key length of 128 bits.\n- DA19: AESDUKPT192ECB  : AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 192 bits.\n- DA25: AESDUKPT256ECB  : AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 256 bits.\n- N108: Nist800-108KeyDerivation  : Key Derivation according to the Special Publication from the NIST entitled 800-108.\n- EA5R: AES256CTR  : AES (Advanced Encryption Standard) CTR (Counter) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- EA9R: AES192CTR  : AES (Advanced Encryption Standard) CTR (Counter) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- EA2R: AES128CTR  : AES (Advanced Encryption Standard) CTR (Counter) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- E3DR: DES112CTR  : Triple DES (Data Encryption Standard) CTR (Counter) encryption with double length key (112 Bit) as defined in FIPS SP 800-38a.\n- E36C: DES168CBC  : Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with triple length key (168 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc).\n- E36R: DES168CTR  : Triple DES (Data Encryption Standard) CTR (Counter) encryption with triple length key (168 Bit) as defined in FIPS SP 800-38a.\n- SD5C: SDE056CBC  : The DEPRECATED Simple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with simple length key (56 Bit) as defined in FIPS PUB 81 - (ASN.1 Object Identifier: des-cbc).\n- UKA1: UKPTwithAES128  : UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- UKA3: UKPTwithAES256  : UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- SM4C: SM4CBC  : ShangMi 4 enciphering method used in CBC mode.\n- SM4R: SM4CTR  : ShangMi 4 enciphering method used in CTR mode.\n",
					"$ref": "#/$defs/Algorithm28Code"
				},
				"Parameter": {
					"description": "Parameters associated to a cryptographic encryption algorithm.\n",
					"$ref": "#/$defs/Parameter12"
				}
			},
			"required": [
				"Algorithm"
			],
			"additionalProperties": false
		},
		"AlgorithmIdentification33": {
			"description": "Identification of a cryptographic algorithm and parameters for digital signatures.\n",
			"type": "object",
			"properties": {
				"Algorithm": {
					"description": "Cryptographic algorithms for digital signatures.\n- ERS2: SHA256WithRSA  : Signature algorithms with RSA, using SHA-256 digest algorithm - (ASN.1 Object Identifier: sha256WithRSAEncryption).\n- ERS1: SHA1WithRSA  : The DEPRECATED Signature algorithms with RSA (PKCS #1 version 2.1), using SHA-1 digest algorithm - (ASN.1 Object Identifier: sha1WithRSAEncryption).\n- RPSS: RSASSA-PSS  : Signature algorithm with Appendix, Probabilistic Signature Scheme (PKCS #1 version 2.1), - (ASN.1 Object Identifier: id-RSASSA-PSS).\n- ERS3: SHA3-256WithRSA  : Signature algorithms with RSA, using SHA3-256 digest algorithm. (ASN.1 Object Identifier: id-rsassa-pkcs1-v1-5-with-sha3-256).\n- ED32: EcdsaSha3-256  : Elliptic Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm.\n- ED33: EcdsaSha3-384  : Elliptic Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm.\n- ED35: EcdsaSha3-512  : Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm.\n- ED23: EcdsaSha384  : Elliptic Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm.\n- ED25: EcdsaSha512  : Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm.\n- ES22: EcsdsaSha256  : Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm.\n- ES32: EcsdaSha3-256  : Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm.\n- ES33: EcsdsaSha3-384  : Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm.\n- ES35: EcsdsaSha3-512  : Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm.\n- ES23: EcsdsaSha384  : Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm.\n- ES25: EcsdsaSha512  : Elliptic Curve Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm.\n- ED22: EcdsaSha256  : Elliptic Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm.\n- EF32: EcfsdaSha3-256  : Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm.\n- EF22: EcfsdsaSha256  : Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm.\n- EF33: EcfsdsaSha3-384  : Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm.\n- EF35: EcfsdsaSha3-512  : Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm.\n- EF23: EcfsdsaSha384  : Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm.\n- EO33: EcosdsaSha3-384  : Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm.\n- EF25: EcfsdsaSha512  : Elliptic Curve Full Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm.\n- EO32: EcosdaSha3-256  : Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm.\n- EO22: EcosdsaSha256  : Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm.\n- EO35: EcosdsaSha3-512  : Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm.\n- EO23: EcosdsaSha384  : Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm.\n- EO25: EcosdsaSha512  : Elliptic Curve Optimised Schnorr Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm.\n- DD22: EddsaSha256  : Edward Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm.\n- DD32: EddsaSha3-256  : Edward Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm.\n- DD33: EddsaSha3-384  : Edward Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm.\n- DD35: EddsaSha3-512  : Edward Curve Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm.\n- DD23: EddsaSha384  : Edward Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm.\n- DD25: EddsaSha512  : Edward Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm.\n- SM22: SM2Sha256  : ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-256 Digest Algorithm.\n- SM33: SM2Sha3-384  : ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-384 Digest Algorithm.\n- SM32: SM2Sha3-256  : ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-256 Digest Algorithm.\n- SM35: SM2Sha3-512  : ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA3-512 Digest Algorithm.\n- SM23: SM2Sha384  : ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-384 Digest Algorithm.\n- SM25: SM2Sha512  : ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with SHA2-512 Digest Algorithm.\n- S2S3: SM2SM3  : ShangMi2 Elliptic Curve Digital Signature Algorithm coupled with ShangMi3 Digest Algorithm.\n",
					"$ref": "#/$defs/Algorithm29Code"
				},
				"Parameter": {
					"description": "Parameters of the RSASSA-PSS digital signature algorithm (RSA signature algorithm with appendix: Probabilistic Signature Scheme).\n",
					"$ref": "#/$defs/Parameter16"
				}
			},
			"required": [
				"Algorithm"
			],
			"additionalProperties": false
		},
		"AlgorithmIdentification34": {
			"description": "Mask generator function cryptographic algorithm and parameters.\n",
			"type": "object",
			"properties": {
				"Algorithm": {
					"description": "Mask generator functions of the RSAES-OAEP encryption algorithm (RSA Encryption Scheme: Optimal Asymmetric Encryption Padding).\n- MGF1: MGF1  : Generator Function, used for RSA encryption and RSA igital signature (PKCS #1 version 2.1) - (ASN.1 Object Identifier: id-mgf1).\n",
					"$ref": "#/$defs/Algorithm8Code"
				},
				"Parameter": {
					"description": "Parameters associated to a mask generator cryptographic function.\n",
					"$ref": "#/$defs/Parameter18"
				}
			},
			"required": [
				"Algorithm"
			],
			"additionalProperties": false
		},
		"AlgorithmIdentification35": {
			"description": "Cryptographic algorithms and parameters for the protection of transported keys by an asymmetric key.\n",
			"type": "object",
			"properties": {
				"Algorithm": {
					"description": "Asymmetric encryption algorithm of a transport key.\n- ERSA: RSAEncryption  : RSA encryption algorithm - (ASN.1 Object Identifier: rsaEncryption).\n- RSAO: RSAES-OAEP  : RSA encryption scheme based on Optimal Asymmetric Encryption scheme (PKCS #1 version 2.1) - (ASN.1 Object Identifier: id-RSAES-OAEP).\n",
					"$ref": "#/$defs/Algorithm7Code"
				},
				"Parameter": {
					"description": "Parameters of the asymmetric encryption algorithm.\n",
					"$ref": "#/$defs/Parameter17"
				}
			},
			"required": [
				"Algorithm"
			],
			"additionalProperties": false
		},
		"AlgorithmIdentification36": {
			"description": "Cryptographic algorithm and parameters of digests.\n",
			"type": "object",
			"properties": {
				"Algorithm": {
					"description": "Identification of a digest algorithm.\n- HS25: SHA256  : Message digest algorithm SHA-256 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha256).\n- HS38: SHA384  : Message digest algorithm SHA-384 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha384).\n- HS51: SHA512  : Message digest algorithm SHA-512 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha512).\n- HS01: SHA1  : The DEPRECATED Message digest algorithm SHA-1 as defined in FIPS 180-1 - (ASN.1 Object Identifier: id-sha1).\n- SH31: SHA3-224  : Message digest algorithm SHA3-224 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-224).\n- SH32: SHA3-256  : Message digest algorithm SHA3-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-256).\n- SH33: SHA3-384  : Message digest algorithm SHA3-384 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-384).\n- SH35: SHA3-512  : Message digest algorithm SHA3-512 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-512).\n- SHK1: SHAKE128  : Message digest algorithm SHAKE-128 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake128).\n- SHK2: SHAKE256  : Message digest algorithm SHAKE-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake256).\n- SMS3: SM3  : ShangMi 3 hash function as defined by ISO/IEC 10118-3:2018.\n",
					"$ref": "#/$defs/Algorithm26Code"
				}
			},
			"required": [
				"Algorithm"
			],
			"additionalProperties": false
		},
		"Amount5": {
			"description": "Signed amount in a given numeric currency\n",
			"type": "object",
			"properties": {
				"Amount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"Sign": {
					"description": "Indicates a positive or negative value.\n",
					"$ref": "#/$defs/PlusOrMinusIndicator"
				}
			},
			"required": [
				"Amount"
			],
			"additionalProperties": false
		},
		"AmountUnit1Code": {
			"description": "Unit of a amount (for loyalty or account).\n- MONE: Monetary  : The amount is expressed in a monetary value in a currency.\n- POIN: Point  : The amount is expressed in point.\n",
			"type": "string",
			"enum": [
				"MONE",
				"POIN"
			]
		},
		"AnyBICDec2014Identifier": {
			"description": "Code allocated to a financial or non-financial institution by the ISO 9362 Registration Authority, as described in ISO 9362: 2014 - \"Banking - Banking telecommunication messages - Business identifier code (BIC)\".\n",
			"type": "string",
			"pattern": "^([0-9A-Z]{4,4}[A-Z]{2,2}[0-9A-Z]{2,2}([0-9A-Z]{3,3})?)$",
			"example": "CHASUS33"
		},
		"AttendanceContext1Code": {
			"description": "Human attendance at the POI location during the transaction.\n- ATTD: Attended  : Attended payment, with an attendant.\n- SATT: SemiAttended  : Semi-attended, including self checkout. An attendant supervises several payment, and could be called to help the cardholder.\n- UATT: Unattended  : Unattended payment, no attendant present.\n",
			"type": "string",
			"enum": [
				"ATTD",
				"SATT",
				"UATT"
			],
			"example": "ATTD"
		},
		"AttendanceContext2Code": {
			"description": "Identify the method of delivery or distribution.\n- ATTL: AttendantDelivery  : Delivery by an attendant.\n- CARR: CarrierDelivery  : Delivery by a carrier.\n- CUST: CustomerDelivery  : Delivery by the customer.\n- FULL: FullServe  : Full service for fuel distribution.\n- SELF: SelfServe  : Self service for fuel distribution.\n",
			"type": "string",
			"enum": [
				"ATTL",
				"CARR",
				"CUST",
				"FULL",
				"SELF"
			]
		},
		"AttributeType1Code": {
			"description": "Type of attribute of a distinguished name (DN).\n- CNAT: CommonName  : Common name of the attribute (ASN.1 Object Identifier: id-at-commonName).\n- LATT: Locality  : Locality of the attribute (ASN.1 Object Identifier: id-at-localityName).\n- OATT: OrganisationName  : Organization name of the attribute (ASN.1 Object Identifier: id-at-organizationName).\n- OUAT: OrganisationUnitName  : Organization unit name of the attribute (ASN.1 Object Identifier: id-at-organizationalUnitName).\n- CATT: CountryName  : Country name of the attribute (ASN.1 Object Identifier: id-at-countryName).\n",
			"type": "string",
			"enum": [
				"CNAT",
				"LATT",
				"OATT",
				"OUAT",
				"CATT"
			],
			"example": "CNAT"
		},
		"AuthenticatedData10": {
			"description": "Message authentication code (MAC), computed on the data to protect with an encryption key.\n",
			"type": "object",
			"properties": {
				"MAC": {
					"description": "Specifies a binary string with a maximum length of 140 binary bytes.\n",
					"$ref": "#/$defs/Max140Binary"
				},
				"MACAlgorithm": {
					"description": "Identification of a cryptographic algorithm and parameters for the MAC computation.\n",
					"$ref": "#/$defs/AlgorithmIdentification31"
				},
				"EncapsulatedContent": {
					"description": "Data to authenticate.\n",
					"$ref": "#/$defs/EncapsulatedContent3"
				},
				"Recipient": {
					"description": "Session key or protection key identification used by the recipient.",
					"anyOf": [
						{
							"$ref": "#/$defs/Recipient15Choice"
						},
						{
							"type": "array",
							"minItems": 1,
							"items": {
								"$ref": "#/$defs/Recipient15Choice"
							}
						}
					]
				},
				"Version": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				}
			},
			"required": [
				"MAC",
				"MACAlgorithm",
				"EncapsulatedContent",
				"Recipient"
			],
			"additionalProperties": false
		},
		"AuthenticationEntity2Code": {
			"description": "Entity or device that has performed the verification.\n- ICCD: ICC  : Application in the chip card (Integrated Circuit Card), for instance an offline PIN verification.\n- AGNT: AuthorisedAgent  : Authorisation agent of the issuer.\n- MERC: Merchant  : Merchant (for example signature verification by the attendant).\n- ACQR: Acquirer  : Acquirer of the transaction.\n- ISSR: Issuer  : Card issuer.\n- TRML: Terminal  : Secure application in the terminal.\n",
			"type": "string",
			"enum": [
				"ICCD",
				"AGNT",
				"MERC",
				"ACQR",
				"ISSR",
				"TRML"
			],
			"example": "ICCD"
		},
		"AuthenticationMethod6Code": {
			"description": "Methods used to authenticate a person or a card.\n- NPIN: OnLinePIN  : On-line PIN authentication (Personal Identification Number).\n- PPSG: PaperSignature  : Handwritten paper signature.\n- PSWD: Password  : Authentication by a password.\n- SCRT: SecureCertificate  : Electronic commerce transaction secured with the X.509 certificate of a customer.\n- SCNL: SecuredChannel  : Channel-encrypted transaction.\n- SNCT: SecureNoCertificate  : Secure electronic transaction without cardholder certificate.\n- CPSG: SignatureCapture  : Electronic signature capture (handwritten signature).\n- ADDB: BillingAddressVerification  : Cardholder billing address verification.\n- BIOM: Biometry  : Biometric authentication of the cardholder.\n- CDHI: CardholderIdentificationData  : Cardholder data provided for verification, for instance social security number, driver license number, passport number.\n- CRYP: CryptogramVerification  : Verification of a cryptogram generated by a chip card or another device, for instance ARQC (Authorisation Request Cryptogram).\n- CSCV: CSCVerification  : Verification of Card Security Code.\n- PSVE: PassiveAuthentication  : Authentication based on statistical cardholder behaviour.\n- CSEC: SecureElectronicCommerce  : Authentication performed during a secure electronic commerce transaction.\n- ADDS: ShippingAddressVerification  : Cardholder shipping address verification.\n- MANU: ManualVerification  : Manual verification, for example passport or drivers license.\n- FPIN: OfflinePIN  : Off-line PIN authentication (Personal Identification Number).\n- TOKP: PaymentToken  : Verification or authentication related to the use of a payment token, for instance the validation of the authorised use of a token.\n",
			"type": "string",
			"enum": [
				"NPIN",
				"PPSG",
				"PSWD",
				"SCRT",
				"SCNL",
				"SNCT",
				"CPSG",
				"ADDB",
				"BIOM",
				"CDHI",
				"CRYP",
				"CSCV",
				"PSVE",
				"CSEC",
				"ADDS",
				"MANU",
				"FPIN",
				"TOKP"
			],
			"example": "ADDB"
		},
		"AuthenticationMethod8Code": {
			"description": "Method to authenticate the customer or its card.\n- TOKA: AuthenticationToken  : A token is used to verify an already performed authentication.\n- ADDB: BillingAddressVerification  : Cardholder billing address verification.\n- BYPS: Bypass  : Authentication bypassed by the merchant.\n- BIOM: Biometry  : Biometric authentication of the cardholder.\n- CDHI: CardholderIdentificationData  : Cardholder data provided for verification, for instance social security number, driver license number, passport number.\n- CRYP: CryptogramVerification  : Verification of a cryptogram generated by a chip card or another device, for instance ARQC (Authorisation Request Cryptogram).\n- CSCV: CSCVerification  : Verification of Card Security Code.\n- MANU: ManualVerification  : Manual verification, for example passport or drivers license.\n- MERC: MerchantAuthentication  : Merchant-related authentication.\n- MOBL: Mobile  : Customer mobile device.\n- FPIN: OfflinePIN  : Off-line PIN authentication (Personal Identification Number).\n- NPIN: OnLinePIN  : On-line PIN authentication (Personal Identification Number).\n- OTHR: Other  : Other customer authentication.\n- PPSG: PaperSignature  : Handwritten paper signature.\n- PSVE: PassiveAuthentication  : Authentication based on statistical cardholder behaviour.\n- PSWD: Password  : Authentication by a password.\n- TOKP: PaymentToken  : Verification or authentication related to the use of a payment token, for instance the validation of the authorised use of a token.\n- SCRT: SecureCertificate  : Electronic commerce transaction secured with the X.509 certificate of a customer.\n- SCNL: SecuredChannel  : Channel-encrypted transaction.\n- CSEC: SecureElectronicCommerce  : Authentication performed during a secure electronic commerce transaction.\n- SNCT: SecureNoCertificate  : Secure electronic transaction without cardholder certificate.\n- ADDS: ShippingAddressVerification  : Cardholder shipping address verification.\n- CPSG: SignatureCapture  : Electronic signature capture (handwritten signature).\n- TOKN: TokenAuthentication  : Cryptogram generated by the token requestor or a customer device to validate the authorised use of a token.\n- UKNW: UnknownMethod  : Authentication method is performed unknown.\n",
			"type": "string",
			"enum": [
				"TOKA",
				"ADDB",
				"BYPS",
				"BIOM",
				"CDHI",
				"CRYP",
				"CSCV",
				"MANU",
				"MERC",
				"MOBL",
				"FPIN",
				"NPIN",
				"OTHR",
				"PPSG",
				"PSVE",
				"PSWD",
				"TOKP",
				"SCRT",
				"SCNL",
				"CSEC",
				"SNCT",
				"ADDS",
				"CPSG",
				"TOKN",
				"UKNW"
			]
		},
		"AuthenticationResult1Code": {
			"description": "Specifies the result of authentication done.\n- DENY: Denial  : The authentication didn’t succeed.\n- MRCH: MerchantNotEnroled  : Merchant not enrolled in the authentication programme.\n- CARD: NonParticipation  : The card does not participate in the authentication programme.\n- AUTH: UnableToAuthenticate  : The authentication couldn’t be carried out.\n- CRPT: WithCryptogram  : Authentication succeeded with a cryptogram.\n- UCRP: WithoutCryptogram  : Authentication succeeded without a cryptogram.\n",
			"type": "string",
			"enum": [
				"DENY",
				"MRCH",
				"CARD",
				"AUTH",
				"CRPT",
				"UCRP"
			]
		},
		"AuthorisationResult18": {
			"description": "Outcome of the authorisation.\n",
			"type": "object",
			"properties": {
				"AuthorisationCode": {
					"description": "Specifies a character string with a maximum length of 8 characters.\n",
					"$ref": "#/$defs/Max8Text"
				},
				"AuthorisationEntity": {
					"description": "Identification of an entity.\n",
					"$ref": "#/$defs/GenericIdentification90"
				},
				"ResponseToAuthorisation": {
					"description": "Response of a requested service.\n",
					"$ref": "#/$defs/ResponseType10"
				}
			},
			"required": [
				"ResponseToAuthorisation"
			],
			"additionalProperties": false
		},
		"BBANIdentifier": {
			"description": "Basic Bank Account Number (BBAN). Identifier used nationally by financial institutions, ie, in individual countries, generally as part of a National Account Numbering Scheme(s), which uniquely identifies the account of a customer.\n",
			"type": "string",
			"pattern": "^([0-9A-Za-z]{1,30})$",
			"example": "BARC12345612345678"
		},
		"BalanceInquiryRequest7": {
			"description": "Specifies data element nexessary to request balance information.\n",
			"type": "object",
			"properties": {
				"LoyaltyAccountRequest": {
					"description": "Data related to a requested Loyalty program or account.\n",
					"$ref": "#/$defs/LoyaltyAccountRequest3"
				},
				"PaymentAccountRequest": {
					"description": "Data related to the account pointed by the payment card.\n",
					"$ref": "#/$defs/PaymentAccountRequest1"
				},
				"SaleTransactionIdentification": {
					"description": "Identification of the transaction in an unambiguous way.\n",
					"$ref": "#/$defs/TransactionIdentifier1"
				},
				"StoredValueAccountRequest": {
					"description": "Data to request a stored value service (prepaid card or account).\n",
					"$ref": "#/$defs/StoredValueRequest7"
				}
			},
			"additionalProperties": false
		},
		"BarcodeType1Code": {
			"description": "Type of BarCode coding.\n- COQR: BarcodeEncodedAs2DQRCode  : Barcode encoded according to the 2Dimensions Quick Response Code Standard.\n- C128: BarcodeEncodedAsCode128  : Barcode encoded according to the Code 128 standard.\n- C025: BarcodeEncodedAsCode25  : Barcode encoded according to the Code 25 standard.\n- C039: BarcodeEncodedAsCode39  : Barcode encoded according to the Code 39 standard.\n- EA13: BarcodeEncodedAsEA13  : Barcode encoded according to the EAN13 standard.\n- EAN8: BarcodeEncodedAsEAN8  : Barcode encoded according to the EAN8 standard.\n- P417: BarcodeEncodedAsPDF417  : Barcode encoded according to the PDF417 standard.\n- UPCA: BarcodeEncodedAsUPCA  : Barcode encoded according to the UPCA standard.\n",
			"type": "string",
			"enum": [
				"COQR",
				"C128",
				"C025",
				"C039",
				"EA13",
				"EAN8",
				"P417",
				"UPCA"
			]
		},
		"BaseOneRate": {
			"description": "Rate expressed as a decimal, for example, 0.7 is 7/10 and 70%.\n",
			"type": "number",
			"example": "0.60"
		},
		"BatchRequest6": {
			"description": "Data to request a batch service.\n",
			"type": "object",
			"properties": {
				"RemoveAllFlag": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"SaleBatchIdentification": {
					"description": "Identification of the transaction in an unambiguous way.\n",
					"$ref": "#/$defs/TransactionIdentifier1"
				},
				"TransactionToPerform": {
					"description": "Content of the Batch Request message.",
					"anyOf": [
						{
							"$ref": "#/$defs/TransactionToPerform6Choice"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/TransactionToPerform6Choice"
							}
						}
					]
				}
			},
			"additionalProperties": false
		},
		"BinRange1": {
			"description": "Specifies a set of cards which shares the same functionalities.\n",
			"type": "object",
			"properties": {
				"HigherBin": {
					"description": "Specifies a numeric string with a maximum length of 15 digits.\n",
					"$ref": "#/$defs/Max15NumericText"
				},
				"LowerBin": {
					"description": "Specifies a numeric string with a maximum length of 15 digits.\n",
					"$ref": "#/$defs/Max15NumericText"
				}
			},
			"required": [
				"HigherBin",
				"LowerBin"
			],
			"additionalProperties": false
		},
		"BusinessArea2Code": {
			"description": "Specifies the business context of the transaction\n- AIBD: ArtificialIntelligenceBasedDecision  : The payment is initiated by an artificial intelligence based decision.\n- PPAY: PlainPayment  : The card is used to perform a plain payment.\n- TKNF: TransitKnownFare  : The card is used in a Transit business case where the fare amount is known when the transaction is initiated.\n- EOPT: EnergyOpenPayment  : Indicates when the card is used in an energy business case where the amount could not be assessed when the transaction is initiated.\n- TOPT: TransitOpenPayment  : Indicates when the card is used in a transit business case where the fare amount is not known when the transaction is initiated.\n",
			"type": "string",
			"enum": [
				"AIBD",
				"PPAY",
				"TKNF",
				"EOPT",
				"TOPT"
			]
		},
		"BytePadding1Code": {
			"description": "Byte padding for a cypher block chaining mode encryption, if the padding is not implicit.\n- LNGT: LengthPadding  : Message to encrypt is completed by a byte value containing the total number of added bytes.\n- NUL8: Null80Padding  : Message to encrypt is completed by one bit of value 1, followed by null bits until the encryption block length is reached.\n- NULG: NullLengthPadding  : Message to encrypt is completed by null byte values, the last byte containing the total number of added bytes.\n- NULL: NullPadding  : Message to encrypt is completed by null bytes.\n- RAND: RandomPadding  : Message to encrypt is completed by random value, the last byte containing the total number of added bytes.\n",
			"type": "string",
			"enum": [
				"LNGT",
				"NUL8",
				"NULG",
				"NULL",
				"RAND"
			]
		},
		"CardAccountType3Code": {
			"description": "Type of cardholder account used for the transaction.\n- CTDP: CertificateOfDeposit  : Certificate of deposit saving account.\n- CHCK: Checking  : Checking account.\n- CRDT: CreditCard  : Credit card account.\n- CURR: Current  : Current account.\n- CDBT: DebitCard  : Debit card account.\n- DFLT: Default  : Default account.\n- EPRS: EpurseCard  : Electronic purse card account.\n- HEQL: HomeEquityLoan  : Home equity loan credit account.\n- ISTL: InstalmentLoan  : Instalment loan credit account.\n- INVS: Investment  : Investment account.\n- LCDT: LineOfCredit  : Line of credit account.\n- MBNW: MobilePhoneAccount  : Mobile Station Integrated Services Digital Network Number (MSISDN).\n- MNMK: MoneyMarket  : Money market saving account.\n- MNMC: MoneyMarketChecking  : Money market checking account.\n- MTGL: MortgageLoan  : Mortgage loan credit account.\n- RTRM: RetirementAccount  : Retirement account.\n- RVLV: RevolvingLoanAccount  : Revolving loan account.\n- SVNG: Savings  : Savings account.\n- STBD: StockOrBond  : Stock or bond investment account.\n- UVRL: Universal  : Universal account.\n- PRPD: PrePaid  : Pre-paid account.\n- FLTC: FleetCard  : Fleet card account.\n",
			"type": "string",
			"enum": [
				"CTDP",
				"CHCK",
				"CRDT",
				"CURR",
				"CDBT",
				"DFLT",
				"EPRS",
				"HEQL",
				"ISTL",
				"INVS",
				"LCDT",
				"MBNW",
				"MNMK",
				"MNMC",
				"MTGL",
				"RTRM",
				"RVLV",
				"SVNG",
				"STBD",
				"UVRL",
				"PRPD",
				"FLTC"
			]
		},
		"CardAcquisitionRequest3": {
			"description": "Data to request to card data acquisition.\n",
			"type": "object",
			"properties": {
				"AllowedLoyaltyBrand": {
					"description": "Loyalty brands or programs allowed by the Sale System for the loyalty transaction.",
					"anyOf": [
						{
							"$ref": "#/$defs/Max35Text"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Max35Text"
							}
						}
					]
				},
				"AllowedPaymentBrand": {
					"description": "Card payment brands allowed by the Sale System for the payment transaction.",
					"anyOf": [
						{
							"$ref": "#/$defs/Max35Text"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Max35Text"
							}
						}
					]
				},
				"CashBackFlag": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"ForceCustomerSelectionFlag": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"PaymentType": {
					"description": "Additional attribute of the service type.\n- CRDP: CardPayment  : Card payment.\n- CSHW: CashAdvance  : Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter.\n- CSHD: CashDeposit  : Cash deposit.\n- IRES: InitialReservation  : Initial reservation.\n- DEFR: DeferredPayment  : Deferred payment.\n- URES: UpdateReservation  : Update reservation.\n- PRES: PaymentReservation  : Payment after reservation.\n- RECP: RecurringPayment  : Recurring payment.\n- INSP: Instalment  : Instalment payment.\n- INSI: IssuerInstalment  : Instalment payment transaction performed by the card issuer.\n- RFND: Refund  : Refund transaction.\n- VCAU: VoiceAuthorisation  : Voice authorisation.\n",
					"$ref": "#/$defs/CardPaymentServiceType13Code"
				},
				"SaleToAcquirerData": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"SaleToIssuerData": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"SaleToPOIData": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"SaleTransactionIdentification": {
					"description": "Identification of the transaction in an unambiguous way.\n",
					"$ref": "#/$defs/TransactionIdentifier1"
				},
				"TotalAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				}
			},
			"additionalProperties": false
		},
		"CardDataReading5Code": {
			"description": "Type of reading of the card data.\n- TAGC: Tag  : Tag reading capabilities (RFID, etc.).\n- PHYS: Physical  : Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.\n- BRCD: BarCode  : Bar code.\n- MGST: MagneticStripe  : Magnetic stripe.\n- CICC: ICC  : ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.\n- DFLE: AccountData  : Account data on file.\n- CTLS: ProximityReader  : Contactless proximity reader.\n- ECTL: EMVProximityReader  : Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).\n- CDFL: CardOnFile  : Card information are stored on a file.\n",
			"type": "string",
			"enum": [
				"TAGC",
				"PHYS",
				"BRCD",
				"MGST",
				"CICC",
				"DFLE",
				"CTLS",
				"ECTL",
				"CDFL"
			],
			"example": "TAGC"
		},
		"CardDataReading8Code": {
			"description": "Type of reading of the card data.\n- TAGC: Tag  : Tag reading capabilities (RFID, etc.).\n- PHYS: Physical  : Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.\n- BRCD: BarCode  : Bar code.\n- MGST: MagneticStripe  : Magnetic stripe.\n- CICC: ICC  : ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.\n- DFLE: AccountData  : Account data on file.\n- CTLS: ProximityReader  : Contactless proximity reader.\n- ECTL: EMVProximityReader  : Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).\n- CDFL: CardOnFile  : Card information are stored on a file.\n- SICC: SynchronousIntegratedCircuitCard  : Synchronous ICC - (Integrated Circuit Card) with contact.\n- UNKW: Unknown  : Unknown card reading capability.\n- QRCD: QRCode  : Quick response code.\n- OPTC: OpticalCode  : Optical coded reading capabilities (e.g. barcode, QR code, etc.)\n",
			"type": "string",
			"enum": [
				"TAGC",
				"PHYS",
				"BRCD",
				"MGST",
				"CICC",
				"DFLE",
				"CTLS",
				"ECTL",
				"CDFL",
				"SICC",
				"UNKW",
				"QRCD",
				"OPTC"
			],
			"example": "TAGC"
		},
		"CardDirectDebit2": {
			"description": "Element containing all information needed for a card initiating direct debit.\n",
			"type": "object",
			"properties": {
				"CreditorIdentification": {
					"description": "Information about the creditor.\n",
					"$ref": "#/$defs/Creditor4"
				},
				"DebtorIdentification": {
					"description": "Information about the debtor.\n",
					"$ref": "#/$defs/Debtor4"
				},
				"MandateRelatedInformation": {
					"description": "Provides further details related to a direct debit mandate signed between the creditor and the debtor.\n",
					"$ref": "#/$defs/MandateRelatedInformation13"
				}
			},
			"required": [
				"CreditorIdentification",
				"MandateRelatedInformation"
			],
			"additionalProperties": false
		},
		"CardFallback1Code": {
			"description": "Information about card entry mode fallback.\n- FFLB: FallbackAfterFailure  : Card fall-back occurred during the transaction in progress. The previous transaction on the terminal failed.\n- SFLB: FallbackAfterSuccess  : Card fall-back occurred during the transaction in progress. The previous transaction on the terminal was successful.\n- NFLB: NoFallback  : No card fall-back during the transaction in progress.\n",
			"type": "string",
			"enum": [
				"FFLB",
				"SFLB",
				"NFLB"
			]
		},
		"CardIdentificationType1Code": {
			"description": "Type of account identification.\n- ACCT: AccountNumber  : Account identification.\n- BARC: BarCode  : Bar-code with a specific form of identification.\n- ISO2: ISOTrack2  : ISO Track 2 including identification.\n- PHON: PhoneNumber  : A phone number identifies the account on which the phone card is assigned.\n- CPAN: PrimaryAccountNumber  : Standard card identification (card number).\n- PRIV: PrivativeNumbering  : An identification set by a privative application.\n- UUID: UniversalUniqueIdentification  : A Universal Unique Identification code is set for identification.\n",
			"type": "string",
			"enum": [
				"ACCT",
				"BARC",
				"ISO2",
				"PHON",
				"CPAN",
				"PRIV",
				"UUID"
			]
		},
		"CardPaymentContext30": {
			"description": "Context in which the transaction is performed (payment and sale).\n",
			"type": "object",
			"properties": {
				"DirectDebitContext": {
					"description": "Element containing all information needed for a card initiating direct debit.\n",
					"$ref": "#/$defs/CardDirectDebit2"
				},
				"PaymentContext": {
					"description": "Payment context in which the transaction is performed.\n",
					"$ref": "#/$defs/PaymentContext29"
				},
				"SaleContext": {
					"description": "Sale context in which the transaction is performed.\n",
					"$ref": "#/$defs/SaleContext4"
				}
			},
			"additionalProperties": false
		},
		"CardPaymentEnvironment80": {
			"description": "Environment of the transaction.\n",
			"type": "object",
			"properties": {
				"Acquirer": {
					"description": "Acquirer involved in the card payment.\n",
					"$ref": "#/$defs/Acquirer10"
				},
				"Card": {
					"description": "Payment card performing the transaction.\n",
					"$ref": "#/$defs/PaymentCard35"
				},
				"Check": {
					"description": "Identification of check as payment instrument.\n",
					"$ref": "#/$defs/Check1"
				},
				"Cardholder": {
					"description": "Data related to the cardholder.\n",
					"$ref": "#/$defs/Cardholder21"
				},
				"CustomerDevice": {
					"description": "Device used by the customer to perform the payment.\n",
					"$ref": "#/$defs/CustomerDevice3"
				},
				"LoyaltyAccount": {
					"description": "Store value account associated to the payment.",
					"anyOf": [
						{
							"$ref": "#/$defs/LoyaltyAccount3"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/LoyaltyAccount3"
							}
						}
					]
				},
				"Merchant": {
					"description": "Merchant performing the transaction.\n",
					"$ref": "#/$defs/Organisation41"
				},
				"MerchantToken": {
					"description": "Merchant token information.\n",
					"$ref": "#/$defs/MerchantToken2"
				},
				"POI": {
					"description": "Point of interaction (POI) performing the transaction.\n",
					"$ref": "#/$defs/PointOfInteraction14"
				},
				"PaymentToken": {
					"description": "Unencrypted sensitive data of a token.\n",
					"$ref": "#/$defs/Token1"
				},
				"ProtectedCardholderData": {
					"description": "General cryptographic message syntax (CMS) containing encrypted data.\n",
					"$ref": "#/$defs/ContentInformationType40"
				},
				"SaleEnvironment": {
					"description": "Environment of Retailer for this message.\n",
					"$ref": "#/$defs/RetailerSaleEnvironment2"
				},
				"StoredValueAccount": {
					"description": "Store value account payment instrument.",
					"anyOf": [
						{
							"$ref": "#/$defs/StoredValueAccount2"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/StoredValueAccount2"
							}
						}
					]
				},
				"ServiceProvider": {
					"description": "Acquirer involved in the card payment.\n",
					"$ref": "#/$defs/Acquirer10"
				},
				"Wallet": {
					"description": "Device used by the customer to perform the payment.\n",
					"$ref": "#/$defs/CustomerDevice3"
				}
			},
			"additionalProperties": false
		},
		"CardPaymentServiceType13Code": {
			"description": "Additional attribute of the service type.\n- CRDP: CardPayment  : Card payment.\n- CSHW: CashAdvance  : Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter.\n- CSHD: CashDeposit  : Cash deposit.\n- IRES: InitialReservation  : Initial reservation.\n- DEFR: DeferredPayment  : Deferred payment.\n- URES: UpdateReservation  : Update reservation.\n- PRES: PaymentReservation  : Payment after reservation.\n- RECP: RecurringPayment  : Recurring payment.\n- INSP: Instalment  : Instalment payment.\n- INSI: IssuerInstalment  : Instalment payment transaction performed by the card issuer.\n- RFND: Refund  : Refund transaction.\n- VCAU: VoiceAuthorisation  : Voice authorisation.\n",
			"type": "string",
			"enum": [
				"CRDP",
				"CSHW",
				"CSHD",
				"IRES",
				"DEFR",
				"URES",
				"PRES",
				"RECP",
				"INSP",
				"INSI",
				"RFND",
				"VCAU"
			]
		},
		"CardPaymentServiceType14Code": {
			"description": "Additional attributes of the service provided by the card payment transaction.\n- IRES: InitialReservation  : Initial reservation.\n- URES: UpdateReservation  : Update reservation.\n- PRES: PaymentReservation  : Payment after reservation.\n- ARES: AdditionalPayment  : Additional payment after reservation.\n- FREC: FirstRecurring  : Initial recurring payment.\n- RREC: FollowingRecurring  : Repeat recurring payment.\n- GOPT: GuaranteeOfPayment  : Acceptor claims for guarantee of payment.\n",
			"type": "string",
			"enum": [
				"IRES",
				"URES",
				"PRES",
				"ARES",
				"FREC",
				"RREC",
				"GOPT"
			],
			"example": "IRES"
		},
		"CardPaymentServiceType5Code": {
			"description": "Main service provided during the card payment transaction.\n- BALC: Balance  : Balance enquiry.\n- CACT: CardActivation  : Card activation.\n- CRDP: CardPayment  : Card payment.\n- CAFH: CardsFundTransferPush  : Transfer of funds to a card or an account.\n- CAVR: CardVerification  : Card verification.\n- CSHW: CashAdvance  : Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter.\n- CSHD: CashDeposit  : Cash deposit.\n- DEFR: DeferredPayment  : Deferred payment.\n- LOAD: Loading  : Loading or reloading non-financial account.\n- ORCR: OriginalCredit  : Original credit.\n- PINC: PINChange  : PIN (Personal Identification Number) change.\n- QUCH: QuasiCash  : Quasi-cash.\n- RFND: Refund  : Refund transaction.\n- RESA: Reservation  : Reservation (pre-authorisation).\n- VALC: ValidityCheck  : Card validity check.\n- UNLD: Unloading  : Unloading non-financial account.\n- CAFT: CardsFundTransfer  : Transfer of funds to and/or from a card account.\n- CAFL: CardsFundTransferPull  : Transfer of funds from a card or an account.\n",
			"type": "string",
			"enum": [
				"BALC",
				"CACT",
				"CRDP",
				"CAFH",
				"CAVR",
				"CSHW",
				"CSHD",
				"DEFR",
				"LOAD",
				"ORCR",
				"PINC",
				"QUCH",
				"RFND",
				"RESA",
				"VALC",
				"UNLD",
				"CAFT",
				"CAFL"
			],
			"example": "CRDP"
		},
		"CardPaymentServiceType9Code": {
			"description": "Service provided by the card payment transaction, in addition to the main service.\n- AGGR: Aggregation  : Aggregation of low payments.\n- DCCV: DCC  : Dynamic currency conversion (DCC).\n- GRTT: Gratuity  : Card payment with gratuity.\n- LOYT: Loyalty  : Loyalty services.\n- NRES: NoShow  : No show after reservation.\n- PUCO: PurchaseCorporate  : Purchase and corporate data.\n- RECP: RecurringPayment  : Recurring payment.\n- SOAF: SolicitedAvailableFunds  : Solicited available funds.\n- VCAU: VoiceAuthorisation  : Voice authorisation.\n- INSI: IssuerInstalment  : Instalment payment transaction performed by the card issuer.\n- INSA: AcceptorInstalment  : Instalment payment transaction performed by the acceptor or the acquirer.\n- CSHB: CashBack  : Card payment with cash-back.\n- INST: Instant  : Instant transaction.\n- NRFD: NonRefundable  : Payment of goods or services which are not refundable, for instance low cost airline tickets.\n",
			"type": "string",
			"enum": [
				"AGGR",
				"DCCV",
				"GRTT",
				"LOYT",
				"NRES",
				"PUCO",
				"RECP",
				"SOAF",
				"VCAU",
				"INSI",
				"INSA",
				"CSHB",
				"INST",
				"NRFD"
			],
			"example": "AGGR"
		},
		"CardPaymentToken5": {
			"description": "Payment token information.\n",
			"type": "object",
			"properties": {
				"CardSequenceNumber": {
					"description": "Specifies a numeric string with a minimum length of 2 digits, and a maximum length of 3 digits.\n",
					"$ref": "#/$defs/Min2Max3NumericText"
				},
				"Token": {
					"description": "Specifies a numeric string with a minimum length of 8 digits, and a maximum length of 28 digits.\n",
					"$ref": "#/$defs/Min8Max28NumericText"
				},
				"TokenAssuranceData": {
					"description": "Specifies a binary string with a maximum length of 500 binary bytes.\n",
					"$ref": "#/$defs/Max500Binary"
				},
				"TokenAssuranceLevel": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				},
				"TokenAssuranceMethod": {
					"description": "Specifies a numeric string with a maximum length of 2 digits.\n",
					"$ref": "#/$defs/Max2NumericText"
				},
				"TokenCharacteristic": {
					"description": "Additional payment token information.",
					"anyOf": [
						{
							"$ref": "#/$defs/Max35Text"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Max35Text"
							}
						}
					]
				},
				"TokenInitiatedIndicator": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"TokenRequestor": {
					"description": "Identifier of a token provider requestor.\n",
					"$ref": "#/$defs/PaymentTokenIdentifiers1"
				},
				"TokenExpiryDate": {
					"description": "Specifies a character string with a maximum length of 10 characters.\n",
					"$ref": "#/$defs/Max10Text"
				}
			},
			"additionalProperties": false
		},
		"CardPaymentTransaction131": {
			"description": "Identification of the original transaction.\n",
			"type": "object",
			"properties": {
				"CurrencyConversion": {
					"description": "Conversion between the currency of a card acceptor and the currency of a card issuer, provided by a dedicated service provider.\n",
					"$ref": "#/$defs/CurrencyConversion31"
				},
				"POIIdentification": {
					"description": "Identification of an entity.\n",
					"$ref": "#/$defs/GenericIdentification32"
				},
				"SaleReferenceIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"TransactionIdentification": {
					"description": "Identification of the transaction in an unambiguous way.\n",
					"$ref": "#/$defs/TransactionIdentifier1"
				}
			},
			"required": [
				"POIIdentification",
				"TransactionIdentification"
			],
			"additionalProperties": false
		},
		"CardPaymentTransaction136": {
			"description": "Data associated with the transaction for a potential currency conversion.\n",
			"type": "object",
			"properties": {
				"AdditionalService": {
					"description": "Service in addition to the main service.",
					"anyOf": [
						{
							"$ref": "#/$defs/CardPaymentServiceType9Code"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/CardPaymentServiceType9Code"
							}
						}
					]
				},
				"AdditionalTransactionData": {
					"description": "Additional information related to the transaction.",
					"anyOf": [
						{
							"$ref": "#/$defs/Max70Text"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Max70Text"
							}
						}
					]
				},
				"AuthorisationResult": {
					"description": "Outcome of the authorisation.\n",
					"$ref": "#/$defs/AuthorisationResult18"
				},
				"CardProgrammeApplied": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"CardProgrammeProposed": {
					"description": "Specifies the card program proposed by a retailer to a cardholder among a series of payment programmes offered by the retailer.",
					"anyOf": [
						{
							"$ref": "#/$defs/Max35Text"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Max35Text"
							}
						}
					]
				},
				"CustomerConsent": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"CustomerOrder": {
					"description": "Customer order attached to a customer, recorded in the POI system.\n",
					"$ref": "#/$defs/CustomerOrder1"
				},
				"CustomerToken": {
					"description": "Payment token information.\n",
					"$ref": "#/$defs/CardPaymentToken5"
				},
				"IssuerCITIdentification": {
					"description": "Specifies a character string with a maximum length of 140 characters.\n",
					"$ref": "#/$defs/Max140Text"
				},
				"IssuerReferenceData": {
					"description": "Specifies a character string with a maximum length of 140 characters.\n",
					"$ref": "#/$defs/Max140Text"
				},
				"LastTransactionFlag": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"MerchantCITIdentification": {
					"description": "Specifies a character string with a maximum length of 140 characters.\n",
					"$ref": "#/$defs/Max140Text"
				},
				"MerchantCategoryCode": {
					"description": "Specifies a character string with a minimum length of 3 characters, and a maximum length of 4 characters.\n",
					"$ref": "#/$defs/Min3Max4Text"
				},
				"MerchantReferenceData": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"OriginalTransaction": {
					"description": "Identification of the original transaction.\n",
					"$ref": "#/$defs/CardPaymentTransaction131"
				},
				"ReconciliationIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"SaleReferenceIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"SaleToAcquirerData": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"SaleToIssuerData": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"SaleToPOIData": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"ServiceAttribute": {
					"description": "Additional attributes of the service provided by the card payment transaction.\n- IRES: InitialReservation  : Initial reservation.\n- URES: UpdateReservation  : Update reservation.\n- PRES: PaymentReservation  : Payment after reservation.\n- ARES: AdditionalPayment  : Additional payment after reservation.\n- FREC: FirstRecurring  : Initial recurring payment.\n- RREC: FollowingRecurring  : Repeat recurring payment.\n- GOPT: GuaranteeOfPayment  : Acceptor claims for guarantee of payment.\n",
					"$ref": "#/$defs/CardPaymentServiceType14Code"
				},
				"TransactionCapture": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"TransactionDetails": {
					"description": "Details of the transaction in the authorisation request in a batch.\n",
					"$ref": "#/$defs/CardPaymentTransactionDetails53"
				},
				"TransactionIdentification": {
					"description": "Identification of the transaction in an unambiguous way.\n",
					"$ref": "#/$defs/TransactionIdentifier1"
				},
				"TransactionType": {
					"description": "Main service provided during the card payment transaction.\n- BALC: Balance  : Balance enquiry.\n- CACT: CardActivation  : Card activation.\n- CRDP: CardPayment  : Card payment.\n- CAFH: CardsFundTransferPush  : Transfer of funds to a card or an account.\n- CAVR: CardVerification  : Card verification.\n- CSHW: CashAdvance  : Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter.\n- CSHD: CashDeposit  : Cash deposit.\n- DEFR: DeferredPayment  : Deferred payment.\n- LOAD: Loading  : Loading or reloading non-financial account.\n- ORCR: OriginalCredit  : Original credit.\n- PINC: PINChange  : PIN (Personal Identification Number) change.\n- QUCH: QuasiCash  : Quasi-cash.\n- RFND: Refund  : Refund transaction.\n- RESA: Reservation  : Reservation (pre-authorisation).\n- VALC: ValidityCheck  : Card validity check.\n- UNLD: Unloading  : Unloading non-financial account.\n- CAFT: CardsFundTransfer  : Transfer of funds to and/or from a card account.\n- CAFL: CardsFundTransferPull  : Transfer of funds from a card or an account.\n",
					"$ref": "#/$defs/CardPaymentServiceType5Code"
				}
			},
			"required": [
				"TransactionDetails",
				"TransactionIdentification",
				"TransactionType"
			],
			"additionalProperties": false
		},
		"CardPaymentTransactionDetails53": {
			"description": "Details of the transaction in the authorisation request in a batch.\n",
			"type": "object",
			"properties": {
				"AccountType": {
					"description": "Type of cardholder account used for the transaction.\n- CTDP: CertificateOfDeposit  : Certificate of deposit saving account.\n- CHCK: Checking  : Checking account.\n- CRDT: CreditCard  : Credit card account.\n- CURR: Current  : Current account.\n- CDBT: DebitCard  : Debit card account.\n- DFLT: Default  : Default account.\n- EPRS: EpurseCard  : Electronic purse card account.\n- HEQL: HomeEquityLoan  : Home equity loan credit account.\n- ISTL: InstalmentLoan  : Instalment loan credit account.\n- INVS: Investment  : Investment account.\n- LCDT: LineOfCredit  : Line of credit account.\n- MBNW: MobilePhoneAccount  : Mobile Station Integrated Services Digital Network Number (MSISDN).\n- MNMK: MoneyMarket  : Money market saving account.\n- MNMC: MoneyMarketChecking  : Money market checking account.\n- MTGL: MortgageLoan  : Mortgage loan credit account.\n- RTRM: RetirementAccount  : Retirement account.\n- RVLV: RevolvingLoanAccount  : Revolving loan account.\n- SVNG: Savings  : Savings account.\n- STBD: StockOrBond  : Stock or bond investment account.\n- UVRL: Universal  : Universal account.\n- PRPD: PrePaid  : Pre-paid account.\n- FLTC: FleetCard  : Fleet card account.\n",
					"$ref": "#/$defs/CardAccountType3Code"
				},
				"AdditionalInformation": {
					"description": "Additional information related to the transaction like an Invoice or IndustryData (for example  hospitality, lodging, transportation).",
					"anyOf": [
						{
							"$ref": "#/$defs/ExternallyDefinedData5"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/ExternallyDefinedData5"
							}
						}
					]
				},
				"AggregationTransaction": {
					"description": "Payment transaction with an aggregated amount.\n",
					"$ref": "#/$defs/AggregationTransaction3"
				},
				"AmountQualifier": {
					"description": "Qualifies the amount associated with the transaction.\n- ACTL: Actual  : Actual amount.\n- ESTM: Estimated  : Estimated amount (the final amount could be above or below).\n- MAXI: Maximum  : Maximum amount (the final amount must be less or equal).\n- DFLT: Default  : Default amount.\n- RPLT: Replacement  : Replacement amount.\n- INCR: Incremental  : Incremental amount for reservation.\n- DECR: Decremental  : Decremental amount for reservation.\n- RESD: Reserved  : Reserved or updated reserved amount for reservation.\n",
					"$ref": "#/$defs/TypeOfAmount8Code"
				},
				"AuthorisedAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"Currency": {
					"description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".\n",
					"$ref": "#/$defs/ActiveCurrencyCode"
				},
				"CurrencyConversionResult": {
					"description": "Conversion between the currency of a card acceptor and the currency of a card issuer, provided by a dedicated service provider.\n",
					"$ref": "#/$defs/CurrencyConversion30"
				},
				"CumulativeAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"CompletionSequenceCounter": {
					"description": "Number of objects represented as a positive integer.\n",
					"$ref": "#/$defs/PositiveNumber"
				},
				"CompletionSequenceNumber": {
					"description": "Number of objects represented as a positive integer.\n",
					"$ref": "#/$defs/PositiveNumber"
				},
				"DeliveryLocation": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"DetailedAmount": {
					"description": "Detailed amounts associated with the total amount of transaction.\n",
					"$ref": "#/$defs/DetailedAmount15"
				},
				"ICCRelatedData": {
					"description": "Specifies a binary string with a maximum length of 10000 binary bytes.\n",
					"$ref": "#/$defs/Max10000Binary"
				},
				"Instalment": {
					"description": "Data related to a financial loan (instalment).",
					"anyOf": [
						{
							"$ref": "#/$defs/Instalment5"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Instalment5"
							}
						}
					]
				},
				"InvoiceAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"OnLineReason": {
					"description": "Reason to process an online authorisation.",
					"anyOf": [
						{
							"$ref": "#/$defs/OnLineReason2Code"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/OnLineReason2Code"
							}
						}
					]
				},
				"ProductCodeSetIdentification": {
					"description": "Specifies a character string with a maximum length of 10 characters.\n",
					"$ref": "#/$defs/Max10Text"
				},
				"Recurring": {
					"description": "Element related to recurring transaction.\n",
					"$ref": "#/$defs/RecurringTransaction6"
				},
				"ReSubmissionCounter": {
					"description": "Number of objects represented as a positive integer.\n",
					"$ref": "#/$defs/PositiveNumber"
				},
				"RequestedAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"SaleItem": {
					"description": "Item purchased with the transaction.",
					"anyOf": [
						{
							"$ref": "#/$defs/Product6"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Product6"
							}
						}
					]
				},
				"TotalAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"TotalAuthorisedAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"UnattendedLevelCategory": {
					"description": "Specifies a numeric string with a maximum length of 35 digits.\n",
					"$ref": "#/$defs/Max35NumericText"
				},
				"ValidityDate": {
					"description": "A particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format. This representation is defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\n",
					"$ref": "#/$defs/ISODate"
				}
			},
			"required": [
				"TotalAmount"
			],
			"additionalProperties": false
		},
		"CardProductType1Code": {
			"description": "Type of card product.\n- COMM: CommercialCard  : Cards issued as a means of business expenditure, for instance business card or corporate card. The user could be a company, an individual for business expenses or a self employed for business purposes.\n- CONS: ConsumerCard  : Cards issued as a means of personal expenditure. The user is always an individual.\n",
			"type": "string",
			"enum": [
				"COMM",
				"CONS"
			]
		},
		"Cardholder21": {
			"description": "Data related to the cardholder.\n",
			"type": "object",
			"properties": {
				"Authentication": {
					"description": "Method and data intended to be used for this transaction to authenticate the cardholder and its card.",
					"anyOf": [
						{
							"$ref": "#/$defs/CardholderAuthentication17"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/CardholderAuthentication17"
							}
						}
					]
				},
				"BillingAddress": {
					"description": "Information that locates and identifies a specific address, as defined by postal services.\n",
					"$ref": "#/$defs/PostalAddress22"
				},
				"Identification": {
					"description": "Set of unique and unambiguous ways to identify a person.\n",
					"$ref": "#/$defs/PersonIdentification15"
				},
				"Language": {
					"description": "Specifies a language.\n",
					"$ref": "#/$defs/LanguageCode"
				},
				"MobileData": {
					"description": "Data related to the mobile of stakeholder.",
					"anyOf": [
						{
							"$ref": "#/$defs/MobileData6"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/MobileData6"
							}
						}
					]
				},
				"Name": {
					"description": "Specifies a character string with a maximum length of 45 characters.\n",
					"$ref": "#/$defs/Max45Text"
				},
				"PersonalData": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"ShippingAddress": {
					"description": "Information that locates and identifies a specific address, as defined by postal services.\n",
					"$ref": "#/$defs/PostalAddress22"
				},
				"TripNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"TransactionVerificationResult": {
					"description": "Result of performed verifications for the transaction.",
					"anyOf": [
						{
							"$ref": "#/$defs/TransactionVerificationResult4"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/TransactionVerificationResult4"
							}
						}
					]
				},
				"Vehicle": {
					"description": "Information related to a vehicle used during a transaction.\n",
					"$ref": "#/$defs/Vehicle1"
				}
			},
			"additionalProperties": false
		},
		"CardholderAuthentication17": {
			"description": "Data related to the authentication of the cardholder.\n",
			"type": "object",
			"properties": {
				"AddressVerification": {
					"description": "Numeric characters of the cardholder's address for verification.\n",
					"$ref": "#/$defs/AddressVerification1"
				},
				"AuthenticationAdditionalInformation": {
					"description": "Data container to exchange data elements defined by another standard.\n",
					"$ref": "#/$defs/ExternallyDefinedData5"
				},
				"AuthenticationLevel": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"AuthenticationMethod": {
					"description": "Method to authenticate the customer or its card.\n- TOKA: AuthenticationToken  : A token is used to verify an already performed authentication.\n- ADDB: BillingAddressVerification  : Cardholder billing address verification.\n- BYPS: Bypass  : Authentication bypassed by the merchant.\n- BIOM: Biometry  : Biometric authentication of the cardholder.\n- CDHI: CardholderIdentificationData  : Cardholder data provided for verification, for instance social security number, driver license number, passport number.\n- CRYP: CryptogramVerification  : Verification of a cryptogram generated by a chip card or another device, for instance ARQC (Authorisation Request Cryptogram).\n- CSCV: CSCVerification  : Verification of Card Security Code.\n- MANU: ManualVerification  : Manual verification, for example passport or drivers license.\n- MERC: MerchantAuthentication  : Merchant-related authentication.\n- MOBL: Mobile  : Customer mobile device.\n- FPIN: OfflinePIN  : Off-line PIN authentication (Personal Identification Number).\n- NPIN: OnLinePIN  : On-line PIN authentication (Personal Identification Number).\n- OTHR: Other  : Other customer authentication.\n- PPSG: PaperSignature  : Handwritten paper signature.\n- PSVE: PassiveAuthentication  : Authentication based on statistical cardholder behaviour.\n- PSWD: Password  : Authentication by a password.\n- TOKP: PaymentToken  : Verification or authentication related to the use of a payment token, for instance the validation of the authorised use of a token.\n- SCRT: SecureCertificate  : Electronic commerce transaction secured with the X.509 certificate of a customer.\n- SCNL: SecuredChannel  : Channel-encrypted transaction.\n- CSEC: SecureElectronicCommerce  : Authentication performed during a secure electronic commerce transaction.\n- SNCT: SecureNoCertificate  : Secure electronic transaction without cardholder certificate.\n- ADDS: ShippingAddressVerification  : Cardholder shipping address verification.\n- CPSG: SignatureCapture  : Electronic signature capture (handwritten signature).\n- TOKN: TokenAuthentication  : Cryptogram generated by the token requestor or a customer device to validate the authorised use of a token.\n- UKNW: UnknownMethod  : Authentication method is performed unknown.\n",
					"$ref": "#/$defs/AuthenticationMethod8Code"
				},
				"AuthenticationResult": {
					"description": "Specifies the result of authentication done.\n- DENY: Denial  : The authentication didn’t succeed.\n- MRCH: MerchantNotEnroled  : Merchant not enrolled in the authentication programme.\n- CARD: NonParticipation  : The card does not participate in the authentication programme.\n- AUTH: UnableToAuthenticate  : The authentication couldn’t be carried out.\n- CRPT: WithCryptogram  : Authentication succeeded with a cryptogram.\n- UCRP: WithoutCryptogram  : Authentication succeeded without a cryptogram.\n",
					"$ref": "#/$defs/AuthenticationResult1Code"
				},
				"AuthenticationType": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"AuthenticationValue": {
					"description": "Specifies a binary string with a maximum length of 5000 binary bytes.\n",
					"$ref": "#/$defs/Max5000Binary"
				},
				"AuthenticationExemption": {
					"description": "Strong customer authentication exemption.\n- LOWA: LowAmountExemption  : Transaction's amount is low and could be processed without strong customer authentication.\n- MINT: MerchantInitiatedTransaction  : Transaction is initiated by the Card Acceptor.\n- RECP: RecurringPayment  : Transaction is one of a series of recurring payment.\n- SCPE: SecureCorporatePaymentExemption  : Transaction is a secure corporate payment.\n- SCAD: StrongCustomerAuthenticationDelegation  : Card Acceptor is a strong customer authentication delegate.\n- TRAE: TransactionRiskAnalysisExemption  : According to the transaction risk analysis the strong customer authentication is not mandated.\n- PKGE: TransportFareOrParkingFeeUnattendedPaymentExemption  : Payment is processed in a environment where strong customer authentication is inappropriate.\n- TMBE: TrustedMerchantBeneficiaryExemption  : Cardholder has enrolled the Card Acceptor in the exemption list of strong customer authentication.\n",
					"$ref": "#/$defs/Exemption1Code"
				},
				"CardholderIdentification": {
					"description": "Set of unique and unambiguous ways to identify a person.\n",
					"$ref": "#/$defs/PersonIdentification15"
				},
				"CardholderOnLinePIN": {
					"description": "Encrypted personal identification number (PIN) and related information.\n",
					"$ref": "#/$defs/OnLinePIN11"
				},
				"ProtectedAuthenticationValue": {
					"description": "General cryptographic message syntax (CMS) containing encrypted data.\n",
					"$ref": "#/$defs/ContentInformationType40"
				}
			},
			"additionalProperties": false
		},
		"CardholderVerificationCapability4Code": {
			"description": "Cardholder verification capabilities by the terminal.\n- APKI: AccountDigitalSignature  : Account based digital signature.\n- CHDT: CardholderData  : Cardholder authentication data.\n- MNSG: ManualSignature  : Manual signature verification.\n- MNVR: ManualVerification  : Other manual verification, for example passport or drivers license.\n- FBIG: OfflineBiographics  : Offline biographics.\n- FBIO: OfflineBiometrics  : Offline biometrics.\n- FDSG: OfflineDigitalSignature  : Offline digital signature analysis.\n- FCPN: OfflinePINClear  : Offline PIN in clear (Personal Identification Number).\n- FEPN: OfflinePINEncrypted  : Offline PIN encrypted (Personal Identification Number).\n- NPIN: OnLinePIN  : Online PIN (Personal Identification Number).\n- PKIS: PKISignature  : PKI (Public Key Infrastructure) based digital signature.\n- SCEC: SecureElectronicCommerce  : Three domain secure (three domain secure authentication of the cardholder).\n- NBIO: OnLineBiometrics  : Online biometrics.\n- NOVF: NoCapabilities  : No cardholder verification capability.\n- OTHR: Other  : Other cardholder verification capabilities.\n",
			"type": "string",
			"enum": [
				"APKI",
				"CHDT",
				"MNSG",
				"MNVR",
				"FBIG",
				"FBIO",
				"FDSG",
				"FCPN",
				"FEPN",
				"NPIN",
				"PKIS",
				"SCEC",
				"NBIO",
				"NOVF",
				"OTHR"
			]
		},
		"CashAccountIdentification7Choice": {
			"description": "Choice between formats for the identification of a cash account.\n",
			"type": "object",
			"properties": {
				"BBAN": {
					"description": "Basic Bank Account Number (BBAN). Identifier used nationally by financial institutions, ie, in individual countries, generally as part of a National Account Numbering Scheme(s), which uniquely identifies the account of a customer.\n",
					"$ref": "#/$defs/BBANIdentifier"
				},
				"DomesticAccount": {
					"description": "Information related to an identification, for example, party identification or account identification.\n",
					"$ref": "#/$defs/SimpleIdentificationInformation4"
				},
				"IBAN": {
					"description": "The International Bank Account Number is a code used internationally by financial institutions to uniquely identify the account of a customer at a financial institution as described in the 2007 edition of the ISO 13616 standard \"Banking and related financial services - International Bank Account Number (IBAN)\" and replaced by the more recent edition of the standard.\n",
					"$ref": "#/$defs/IBAN2007Identifier"
				},
				"UPIC": {
					"description": "Universal Payment Identification Code (UPIC). Identifier used by the New York Clearing House to mask confidential data, such as bank accounts and bank routing numbers. UPIC numbers remain with business customers, regardless of banking relationship changes.\n",
					"$ref": "#/$defs/UPICIdentifier"
				}
			},
			"additionalProperties": false
		},
		"CertificateIssuer1": {
			"description": "Certificate issuer name (see X.509).\n",
			"type": "object",
			"properties": {
				"RelativeDistinguishedName": {
					"description": "Relative distinguished name inside a X.509 certificate.",
					"anyOf": [
						{
							"$ref": "#/$defs/RelativeDistinguishedName1"
						},
						{
							"type": "array",
							"minItems": 1,
							"items": {
								"$ref": "#/$defs/RelativeDistinguishedName1"
							}
						}
					]
				}
			},
			"required": [
				"RelativeDistinguishedName"
			],
			"additionalProperties": false
		},
		"Check1": {
			"description": "Identification of check as payment instrument.\n",
			"type": "object",
			"properties": {
				"AccountNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"BankIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"CheckCardNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"CheckNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"CheckType": {
					"description": "Type of bank check.\n- BANK: BankCheck  : The check is guaranteed by a bank.\n- BUSI: BusinessCheck  : The check belongs to a Company or a professional entity.\n- GOVC: GovernmentCheck  : Check issued by Government.\n- PAYR: PayrollCheck  : Check issued by a company for the employees.\n- PERS: PersonalCheck  : The check belongs to an individual.\n",
					"$ref": "#/$defs/CheckType1Code"
				},
				"CheckTrackData2": {
					"description": "Magnetic track or equivalent payment card data.\n",
					"$ref": "#/$defs/TrackData2"
				},
				"Country": {
					"description": "Specifies a character string with a maximum length of 3 characters.\n",
					"$ref": "#/$defs/Max3Text"
				}
			},
			"additionalProperties": false
		},
		"CheckType1Code": {
			"description": "Type of bank check.\n- BANK: BankCheck  : The check is guaranteed by a bank.\n- BUSI: BusinessCheck  : The check belongs to a Company or a professional entity.\n- GOVC: GovernmentCheck  : Check issued by Government.\n- PAYR: PayrollCheck  : Check issued by a company for the employees.\n- PERS: PersonalCheck  : The check belongs to an individual.\n",
			"type": "string",
			"enum": [
				"BANK",
				"BUSI",
				"GOVC",
				"PAYR",
				"PERS"
			]
		},
		"Commission18": {
			"description": "Amount of money due to a party as compensation for a service.\n",
			"type": "object",
			"properties": {
				"AdditionalInformation": {
					"description": "Specifies a character string with a maximum length of 350 characters.\n",
					"$ref": "#/$defs/Max350Text"
				},
				"Rate": {
					"description": "Rate expressed as a percentage, that is, in hundredths, for example, 0.7 is 7/10 of a percent, and 7.0 is 7%.\n",
					"$ref": "#/$defs/PercentageRate"
				}
			},
			"required": [
				"Rate"
			],
			"additionalProperties": false
		},
		"Commission19": {
			"description": "Amount of money due to a party as compensation for a service.\n",
			"type": "object",
			"properties": {
				"AdditionalInformation": {
					"description": "Specifies a character string with a maximum length of 350 characters.\n",
					"$ref": "#/$defs/Max350Text"
				},
				"Amount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				}
			},
			"required": [
				"Amount"
			],
			"additionalProperties": false
		},
		"CommunicationAddress9": {
			"description": "Communication information.\n",
			"type": "object",
			"properties": {
				"AdditionalContactInformation": {
					"description": "Specifies a character string with a maximum length of 256 characters.\n",
					"$ref": "#/$defs/Max256Text"
				},
				"CustomerService": {
					"description": "The collection of information which identifies a specific phone or FAX number as defined by telecom services.\nIt consists of a \"+\" followed by the country code (from 1 to 3 characters) then a \"-\" and finally, any combination of numbers, \"(\", \")\", \"+\" and \"-\" (up to 30 characters).\n",
					"$ref": "#/$defs/PhoneNumber"
				},
				"Email": {
					"description": "Specifies a character string with a maximum length of 256 characters.\n",
					"$ref": "#/$defs/Max256Text"
				},
				"Phone": {
					"description": "The collection of information which identifies a specific phone or FAX number as defined by telecom services.\nIt consists of a \"+\" followed by the country code (from 1 to 3 characters) then a \"-\" and finally, any combination of numbers, \"(\", \")\", \"+\" and \"-\" (up to 30 characters).\n",
					"$ref": "#/$defs/PhoneNumber"
				},
				"PostalAddress": {
					"description": "Information that locates and identifies a specific address, as defined by postal services.\n",
					"$ref": "#/$defs/PostalAddress22"
				},
				"URLAddress": {
					"description": "Specifies a character string with a maximum length of 256 characters.\n",
					"$ref": "#/$defs/Max256Text"
				}
			},
			"additionalProperties": false
		},
		"CommunicationCharacteristics5": {
			"description": "Low level communication of the hardware or software component toward another component or an external entity.\n",
			"type": "object",
			"properties": {
				"Active": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"CommunicationType": {
					"description": "Low level communication of the hardware or software component toward another component or an external entity.\n- BLTH: Bluetooth  : Communication with a host using Bluetooth.\n- ETHR: Ethernet  : Ethernet port to communicate.\n- GPRS: GPRS  : Communication with a host using GPRS.\n- GSMF: GSM  : Communication with a host using GSM.\n- PSTN: PSTN  : Communication with a host using Public Switching Telephone Network.\n- RS23: RS232  : Serial port to communicate.\n- USBD: USBDevice  : Communication with a USB stick or any USB device.\n- USBH: USBHost  : Communication with a host from an USB port.\n- WIFI: Wifi  : Wifi communication with another component.\n- WT2G: WirelessTechnology2G  : Includes all communication technologies which can be qualified as being part of the 2G technology (e.g EDGE or PDC).\n- WT3G: WirelessTechnology3G  : Includes all communication technologies which can be qualified as being part of the 3G technology.\n- WT4G: WirelessTechnology4G  : Includes all communication technologies which can be qualified as being part of the 4G technology.\n- WT5G: WirelessTechnology5G  : Includes all communication technologies which can be qualified as being part of the 5G technology.\n",
					"$ref": "#/$defs/POICommunicationType2Code"
				},
				"Parameters": {
					"description": "Parameters to communicate with a host.\n",
					"$ref": "#/$defs/NetworkParameters7"
				},
				"PhysicalInterface": {
					"description": "Configuration parameters for physical interface.\n",
					"$ref": "#/$defs/PhysicalInterfaceParameter1"
				},
				"RemoteParty": {
					"description": "Entity that communicate with the current component, using this communication device.",
					"anyOf": [
						{
							"$ref": "#/$defs/PartyType7Code"
						},
						{
							"type": "array",
							"minItems": 1,
							"items": {
								"$ref": "#/$defs/PartyType7Code"
							}
						}
					]
				}
			},
			"required": [
				"Active",
				"CommunicationType",
				"RemoteParty"
			],
			"additionalProperties": false
		},
		"ContentInformationType38": {
			"description": "General cryptographic message syntax (CMS) containing data. protected by a MAC or a digital signature.\n",
			"type": "object",
			"properties": {
				"AuthenticatedData": {
					"description": "Message authentication code (MAC), computed on the data to protect with an encryption key.\n",
					"$ref": "#/$defs/AuthenticatedData10"
				},
				"ContentType": {
					"description": "Identification of the type of a Cryptographic Message Syntax (CMS) data structure.\n- DATA: PlainData  : Generic, non cryptographic, or unqualified data content - (ASN.1 Object Identifier: id-data).\n- SIGN: SignedData  : Digital signature - (ASN.1 Object Identifier: id-signedData).\n- EVLP: EnvelopedData  : Encrypted data, with encryption key - (ASN.1 Object Identifier: id-envelopedData).\n- DGST: DigestedData  : Message digest - (ASN.1 Object Identifier: id-digestedData).\n- AUTH: AuthenticatedData  : MAC (Message Authentication Code), with encryption key - (ASN.1 Object Identifier: id-ct-authData).\n",
					"$ref": "#/$defs/ContentType2Code"
				},
				"SignedData": {
					"description": "Digital signatures of data from one or several signers.\n",
					"$ref": "#/$defs/SignedData9"
				}
			},
			"required": [
				"ContentType"
			],
			"additionalProperties": false
		},
		"ContentInformationType39": {
			"description": "General cryptographic message syntax (CMS) containing protected data.\n",
			"type": "object",
			"properties": {
				"AuthenticatedData": {
					"description": "Message authentication code (MAC), computed on the data to protect with an encryption key.\n",
					"$ref": "#/$defs/AuthenticatedData10"
				},
				"ContentType": {
					"description": "Identification of the type of a Cryptographic Message Syntax (CMS) data structure.\n- DATA: PlainData  : Generic, non cryptographic, or unqualified data content - (ASN.1 Object Identifier: id-data).\n- SIGN: SignedData  : Digital signature - (ASN.1 Object Identifier: id-signedData).\n- EVLP: EnvelopedData  : Encrypted data, with encryption key - (ASN.1 Object Identifier: id-envelopedData).\n- DGST: DigestedData  : Message digest - (ASN.1 Object Identifier: id-digestedData).\n- AUTH: AuthenticatedData  : MAC (Message Authentication Code), with encryption key - (ASN.1 Object Identifier: id-ct-authData).\n",
					"$ref": "#/$defs/ContentType2Code"
				},
				"DigestedData": {
					"description": "Digest computed on the identified data.\n",
					"$ref": "#/$defs/DigestedData6"
				},
				"EnvelopedData": {
					"description": "Encrypted data with encryption key.\n",
					"$ref": "#/$defs/EnvelopedData11"
				},
				"SignedData": {
					"description": "Digital signatures of data from one or several signers.\n",
					"$ref": "#/$defs/SignedData9"
				}
			},
			"required": [
				"ContentType"
			],
			"additionalProperties": false
		},
		"ContentInformationType40": {
			"description": "General cryptographic message syntax (CMS) containing encrypted data.\n",
			"type": "object",
			"properties": {
				"ContentType": {
					"description": "Identification of the type of a Cryptographic Message Syntax (CMS) data structure.\n- DATA: PlainData  : Generic, non cryptographic, or unqualified data content - (ASN.1 Object Identifier: id-data).\n- SIGN: SignedData  : Digital signature - (ASN.1 Object Identifier: id-signedData).\n- EVLP: EnvelopedData  : Encrypted data, with encryption key - (ASN.1 Object Identifier: id-envelopedData).\n- DGST: DigestedData  : Message digest - (ASN.1 Object Identifier: id-digestedData).\n- AUTH: AuthenticatedData  : MAC (Message Authentication Code), with encryption key - (ASN.1 Object Identifier: id-ct-authData).\n",
					"$ref": "#/$defs/ContentType2Code"
				},
				"EnvelopedData": {
					"description": "Encrypted data with encryption key.\n",
					"$ref": "#/$defs/EnvelopedData11"
				}
			},
			"required": [
				"ContentType",
				"EnvelopedData"
			],
			"additionalProperties": false
		},
		"ContentType2Code": {
			"description": "Identification of the type of a Cryptographic Message Syntax (CMS) data structure.\n- DATA: PlainData  : Generic, non cryptographic, or unqualified data content - (ASN.1 Object Identifier: id-data).\n- SIGN: SignedData  : Digital signature - (ASN.1 Object Identifier: id-signedData).\n- EVLP: EnvelopedData  : Encrypted data, with encryption key - (ASN.1 Object Identifier: id-envelopedData).\n- DGST: DigestedData  : Message digest - (ASN.1 Object Identifier: id-digestedData).\n- AUTH: AuthenticatedData  : MAC (Message Authentication Code), with encryption key - (ASN.1 Object Identifier: id-ct-authData).\n",
			"type": "string",
			"enum": [
				"DATA",
				"SIGN",
				"EVLP",
				"DGST",
				"AUTH"
			],
			"example": "DATA"
		},
		"CountryCode": {
			"description": "Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).\n",
			"type": "string",
			"pattern": "^([A-Z]{2,2})$",
			"example": "BE"
		},
		"Creditor4": {
			"description": "Information about the creditor.\n",
			"type": "object",
			"properties": {
				"Creditor": {
					"description": "Identification of a party.\n",
					"$ref": "#/$defs/PartyIdentification178Choice"
				},
				"RegistrationIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"Creditor"
			],
			"additionalProperties": false
		},
		"CryptographicKey18": {
			"description": "Cryptographic Key.\n",
			"type": "object",
			"properties": {
				"ActivationDate": {
					"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
					"$ref": "#/$defs/ISODateTime"
				},
				"AdditionalIdentification": {
					"description": "Specifies a binary string with a maximum length of 35 binary bytes.\n",
					"$ref": "#/$defs/Max35Binary"
				},
				"AdditionalManagementInformation": {
					"description": "Additional Information needed by the receiver to securely process the management of the security element.",
					"anyOf": [
						{
							"$ref": "#/$defs/GenericInformation1"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/GenericInformation1"
							}
						}
					]
				},
				"ComponentWithAuthorisedAccess": {
					"description": "Identification of components which are allowed to access this cryptographic key.",
					"anyOf": [
						{
							"$ref": "#/$defs/GenericIdentification186"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/GenericIdentification186"
							}
						}
					]
				},
				"DeactivationDate": {
					"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
					"$ref": "#/$defs/ISODateTime"
				},
				"Function": {
					"description": "Allowed usage of the key.",
					"anyOf": [
						{
							"$ref": "#/$defs/KeyUsage1Code"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/KeyUsage1Code"
							}
						}
					]
				},
				"Identification": {
					"description": "Specifies a character string with a maximum length of 350 characters.\n",
					"$ref": "#/$defs/Max350Text"
				},
				"ItemNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"KeyCheckValue": {
					"description": "Specifies a binary string with a maximum length of 35 binary bytes.\n",
					"$ref": "#/$defs/Max35Binary"
				},
				"KeyValue": {
					"description": "General cryptographic message syntax (CMS) containing protected data.\n",
					"$ref": "#/$defs/ContentInformationType39"
				},
				"Name": {
					"description": "Specifies a character string with a maximum length of 256 characters.\n",
					"$ref": "#/$defs/Max256Text"
				},
				"ProtectedComponentWithAuthorisedAccess": {
					"description": "Protection of Identification of components which are allowed to access this cryptographic key.",
					"anyOf": [
						{
							"$ref": "#/$defs/ContentInformationType39"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/ContentInformationType39"
							}
						}
					]
				},
				"SecurityProfile": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Type": {
					"description": "Codes for qualifying the type of cryptographic keys.\n- AES2: AES128  : AES (Advanced Encryption Standard) 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- EDE3: DES112  : Data encryption standard key of 112 bits (without the parity bits).\n- DKP9: DUKPT2009  : DUKPT (Derived Unique Key Per Transaction) key, as specified in ANSI X9.24-2009 Annex A.\n- AES9: AES192  : AES (Advanced Encryption Standard) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard).\n- AES5: AES256  : AES (Advanced Encryption Standard) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard).\n- EDE4: DES168  : Data encryption standard key of 168 bits (without the parity bits).\n",
					"$ref": "#/$defs/CryptographicKeyType3Code"
				},
				"Version": {
					"description": "Specifies a character string with a maximum length of 256 characters.\n",
					"$ref": "#/$defs/Max256Text"
				}
			},
			"required": [
				"Identification",
				"Version"
			],
			"additionalProperties": false
		},
		"CryptographicKeyType3Code": {
			"description": "Codes for qualifying the type of cryptographic keys.\n- AES2: AES128  : AES (Advanced Encryption Standard) 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).\n- EDE3: DES112  : Data encryption standard key of 112 bits (without the parity bits).\n- DKP9: DUKPT2009  : DUKPT (Derived Unique Key Per Transaction) key, as specified in ANSI X9.24-2009 Annex A.\n- AES9: AES192  : AES (Advanced Encryption Standard) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard).\n- AES5: AES256  : AES (Advanced Encryption Standard) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard).\n- EDE4: DES168  : Data encryption standard key of 168 bits (without the parity bits).\n",
			"type": "string",
			"enum": [
				"AES2",
				"EDE3",
				"DKP9",
				"AES9",
				"AES5",
				"EDE4"
			],
			"example": "AES2"
		},
		"CurrencyConversion29": {
			"description": "Conversion between the currency of a card acceptor and the currency of a card issuer, provided by a dedicated service provider. The currency conversion has to be accepted by the cardholder.\n",
			"type": "object",
			"properties": {
				"ApplicableBinRange": {
					"description": "Range of Bin for which the conversion is possible.",
					"anyOf": [
						{
							"$ref": "#/$defs/BinRange1"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/BinRange1"
							}
						}
					]
				},
				"CurrencyConversionIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"CommissionDetails": {
					"description": "Commission or additional charges made as part of a currency conversion.",
					"anyOf": [
						{
							"$ref": "#/$defs/Commission19"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Commission19"
							}
						}
					]
				},
				"DeclarationDetails": {
					"description": "Card scheme declaration (disclaimer) to present to the cardholder.",
					"anyOf": [
						{
							"$ref": "#/$defs/ActionMessage11"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/ActionMessage11"
							}
						}
					]
				},
				"MarkUpDetails": {
					"description": "Markup made as part of a currency conversion.",
					"anyOf": [
						{
							"$ref": "#/$defs/Commission18"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Commission18"
							}
						}
					]
				},
				"InvertedExchangeRate": {
					"description": "Rate expressed as a percentage, that is, in hundredths, for example, 0.7 is 7/10 of a percent, and 7.0 is 7%.\n",
					"$ref": "#/$defs/PercentageRate"
				},
				"OriginalAmount": {
					"description": "The OriginalAmountDetails contains all amount information in the acceptor currency code necessary to manage currency conversion in the cardholder currency code.\n",
					"$ref": "#/$defs/OriginalAmountDetails1"
				},
				"QuotationDate": {
					"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
					"$ref": "#/$defs/ISODateTime"
				},
				"ResultingAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"SourceCurrency": {
					"description": "Details of a currency.\n",
					"$ref": "#/$defs/CurrencyDetails2"
				},
				"TargetCurrency": {
					"description": "Details of a currency.\n",
					"$ref": "#/$defs/CurrencyDetails3"
				},
				"ValidFrom": {
					"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
					"$ref": "#/$defs/ISODateTime"
				},
				"ValidUntil": {
					"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
					"$ref": "#/$defs/ISODateTime"
				},
				"ExchangeRate": {
					"description": "Rate expressed as a percentage, that is, in hundredths, for example, 0.7 is 7/10 of a percent, and 7.0 is 7%.\n",
					"$ref": "#/$defs/PercentageRate"
				}
			},
			"required": [
				"SourceCurrency",
				"TargetCurrency",
				"ExchangeRate"
			],
			"additionalProperties": false
		},
		"CurrencyConversion30": {
			"description": "Conversion between the currency of a card acceptor and the currency of a card issuer, provided by a dedicated service provider.\n",
			"type": "object",
			"properties": {
				"AcceptedByCardholder": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"Conversion": {
					"description": "Conversion between the currency of a card acceptor and the currency of a card issuer, provided by a dedicated service provider. The currency conversion has to be accepted by the cardholder.\n",
					"$ref": "#/$defs/CurrencyConversion29"
				}
			},
			"additionalProperties": false
		},
		"CurrencyConversion31": {
			"description": "Conversion between the currency of a card acceptor and the currency of a card issuer, provided by a dedicated service provider.\n",
			"type": "object",
			"properties": {
				"ConversionDetails": {
					"description": "Information about the conversion of currency.",
					"anyOf": [
						{
							"$ref": "#/$defs/CurrencyConversion29"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/CurrencyConversion29"
							}
						}
					]
				},
				"Result": {
					"description": "Result of a requested currency conversion.\n- ODCC: Allowed  : Dynamic currency conversion may be offered to the cardholder.\n- DCCA: Assumed  : Transaction authorised with dynamic currency conversion.\n- ICRD: InvalidCard  : The card is not valid for dynamic currency conversion.\n- IMER: InvalidMerchant  : The card acceptor has not been recognised.\n- IPRD: InvalidProduct  : Dynamic currency conversion service cannot be offered for this card product.\n- IRAT: NoRate  : Exchange rates are not available.\n- NDCC: NotAvailable  : Dynamic currency conversion is not available for other reason.\n- REST: Restriction  : Conversion accepted for the requested amount exclusively.\n- CATG: Catalogue  : Conversion accepted for a range of amounts.\n",
					"$ref": "#/$defs/CurrencyConversionResponse3Code"
				},
				"ResultReason": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"Result"
			],
			"additionalProperties": false
		},
		"CurrencyConversionResponse3Code": {
			"description": "Result of a requested currency conversion.\n- ODCC: Allowed  : Dynamic currency conversion may be offered to the cardholder.\n- DCCA: Assumed  : Transaction authorised with dynamic currency conversion.\n- ICRD: InvalidCard  : The card is not valid for dynamic currency conversion.\n- IMER: InvalidMerchant  : The card acceptor has not been recognised.\n- IPRD: InvalidProduct  : Dynamic currency conversion service cannot be offered for this card product.\n- IRAT: NoRate  : Exchange rates are not available.\n- NDCC: NotAvailable  : Dynamic currency conversion is not available for other reason.\n- REST: Restriction  : Conversion accepted for the requested amount exclusively.\n- CATG: Catalogue  : Conversion accepted for a range of amounts.\n",
			"type": "string",
			"enum": [
				"ODCC",
				"DCCA",
				"ICRD",
				"IMER",
				"IPRD",
				"IRAT",
				"NDCC",
				"REST",
				"CATG"
			]
		},
		"CurrencyDetails2": {
			"description": "Details of a currency.\n",
			"type": "object",
			"properties": {
				"AlphaCode": {
					"description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".\n",
					"$ref": "#/$defs/ActiveCurrencyCode"
				},
				"Decimal": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				},
				"Name": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"NumericCode": {
					"description": "Specifies a numeric string with an exact length of 3 digits.\n",
					"$ref": "#/$defs/Exact3NumericText"
				}
			},
			"additionalProperties": false
		},
		"CurrencyDetails3": {
			"description": "Details of a currency.\n",
			"type": "object",
			"properties": {
				"AlphaCode": {
					"description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".\n",
					"$ref": "#/$defs/ActiveCurrencyCode"
				},
				"Decimal": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				},
				"Name": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"NumericCode": {
					"description": "Specifies a numeric string with an exact length of 3 digits.\n",
					"$ref": "#/$defs/Exact3NumericText"
				}
			},
			"required": [
				"AlphaCode",
				"Decimal",
				"NumericCode"
			],
			"additionalProperties": false
		},
		"CustomerDevice3": {
			"description": "Device used by the customer to perform the payment.\n",
			"type": "object",
			"properties": {
				"Identification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Provider": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Type": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				}
			},
			"additionalProperties": false
		},
		"CustomerOrder1": {
			"description": "Customer order attached to a customer, recorded in the POI system.\n",
			"type": "object",
			"properties": {
				"AccessedBy": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"AdditionalInformation": {
					"description": "Specifies a character string with a maximum length of 1025 characters.\n",
					"$ref": "#/$defs/Max1025Text"
				},
				"Currency": {
					"description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".\n",
					"$ref": "#/$defs/ActiveCurrencyCode"
				},
				"CustomerOrderIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"CurrentAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"EndDate": {
					"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
					"$ref": "#/$defs/ISODateTime"
				},
				"ForecastedAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"OpenOrderState": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"SaleReferenceIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"StartDate": {
					"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
					"$ref": "#/$defs/ISODateTime"
				},
				"Unit": {
					"description": "Unit of a amount (for loyalty or account).\n- MONE: Monetary  : The amount is expressed in a monetary value in a currency.\n- POIN: Point  : The amount is expressed in point.\n",
					"$ref": "#/$defs/AmountUnit1Code"
				}
			},
			"required": [
				"CustomerOrderIdentification",
				"ForecastedAmount",
				"SaleReferenceIdentification",
				"StartDate"
			],
			"additionalProperties": false
		},
		"DateAndPlaceOfBirth1": {
			"description": "Date and place of birth of a person.\n",
			"type": "object",
			"properties": {
				"BirthDate": {
					"description": "A particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format. This representation is defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\n",
					"$ref": "#/$defs/ISODate"
				},
				"CityOfBirth": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"CountryOfBirth": {
					"description": "Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).\n",
					"$ref": "#/$defs/CountryCode"
				},
				"ProvinceOfBirth": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"BirthDate",
				"CityOfBirth",
				"CountryOfBirth"
			],
			"additionalProperties": false
		},
		"Debtor4": {
			"description": "Information about the debtor.\n",
			"type": "object",
			"properties": {
				"AccountIdentification": {
					"description": "Choice between formats for the identification of a cash account.\n",
					"$ref": "#/$defs/CashAccountIdentification7Choice"
				},
				"Debtor": {
					"description": "Identification of a party.\n",
					"$ref": "#/$defs/PartyIdentification178Choice"
				}
			},
			"additionalProperties": false
		},
		"DecimalNumber": {
			"description": "Number of objects represented as a decimal number, for example 0.75 or 45.6.\n",
			"type": "number",
			"example": "123456789.123456789"
		},
		"DetailedAmount15": {
			"description": "Detailed amounts associated with the total amount of transaction.\n",
			"type": "object",
			"properties": {
				"AmountGoodsAndServices": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"CashBack": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"Fees": {
					"description": "Fees amount.",
					"anyOf": [
						{
							"$ref": "#/$defs/DetailedAmount4"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/DetailedAmount4"
							}
						}
					]
				},
				"Gratuity": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"Rebate": {
					"description": "Global rebate of the transaction. This amount is counted as a negative amount.",
					"anyOf": [
						{
							"$ref": "#/$defs/DetailedAmount4"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/DetailedAmount4"
							}
						}
					]
				},
				"Surcharge": {
					"description": "Additional charge paid by the cardholder. For example airline credit card surcharge.",
					"anyOf": [
						{
							"$ref": "#/$defs/DetailedAmount4"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/DetailedAmount4"
							}
						}
					]
				},
				"ValueAddedTax": {
					"description": "Value added tax amount.",
					"anyOf": [
						{
							"$ref": "#/$defs/DetailedAmount4"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/DetailedAmount4"
							}
						}
					]
				}
			},
			"additionalProperties": false
		},
		"DetailedAmount21": {
			"description": "Detailed amounts associated with the total amount of transaction.\n",
			"type": "object",
			"properties": {
				"Amount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"CardDataEntryMode": {
					"description": "Type of reading of the card data.\n- TAGC: Tag  : Tag reading capabilities (RFID, etc.).\n- PHYS: Physical  : Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.\n- BRCD: BarCode  : Bar code.\n- MGST: MagneticStripe  : Magnetic stripe.\n- CICC: ICC  : ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.\n- DFLE: AccountData  : Account data on file.\n- CTLS: ProximityReader  : Contactless proximity reader.\n- ECTL: EMVProximityReader  : Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).\n- CDFL: CardOnFile  : Card information are stored on a file.\n- SICC: SynchronousIntegratedCircuitCard  : Synchronous ICC - (Integrated Circuit Card) with contact.\n- UNKW: Unknown  : Unknown card reading capability.\n- QRCD: QRCode  : Quick response code.\n- OPTC: OpticalCode  : Optical coded reading capabilities (e.g. barcode, QR code, etc.)\n",
					"$ref": "#/$defs/CardDataReading8Code"
				},
				"DateTime": {
					"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
					"$ref": "#/$defs/ISODateTime"
				},
				"ICCRelatedData": {
					"description": "Specifies a binary string with a maximum length of 10000 binary bytes.\n",
					"$ref": "#/$defs/Max10000Binary"
				},
				"Label": {
					"description": "Specifies a character string with a maximum length of 140 characters.\n",
					"$ref": "#/$defs/Max140Text"
				}
			},
			"required": [
				"Amount",
				"DateTime"
			],
			"additionalProperties": false
		},
		"DetailedAmount4": {
			"description": "Detailed amounts associated with the total amount of transaction.\n",
			"type": "object",
			"properties": {
				"Amount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"Label": {
					"description": "Specifies a character string with a maximum length of 140 characters.\n",
					"$ref": "#/$defs/Max140Text"
				}
			},
			"required": [
				"Amount"
			],
			"additionalProperties": false
		},
		"DigestedData6": {
			"description": "Digest computed on the identified data.\n",
			"type": "object",
			"properties": {
				"Digest": {
					"description": "Specifies a binary string with a maximum length of 140 binary bytes.\n",
					"$ref": "#/$defs/Max140Binary"
				},
				"DigestAlgorithm": {
					"description": "Cryptographic algorithm and parameters of digests.\n",
					"$ref": "#/$defs/AlgorithmIdentification36"
				},
				"EncapsulatedContent": {
					"description": "Data to authenticate.\n",
					"$ref": "#/$defs/EncapsulatedContent3"
				},
				"Version": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				}
			},
			"required": [
				"Digest",
				"DigestAlgorithm",
				"EncapsulatedContent"
			],
			"additionalProperties": false
		},
		"DisplayCapabilities4": {
			"description": "Capabilities of the display components performing the transaction.\n",
			"type": "object",
			"properties": {
				"AvailableFormat": {
					"description": "Available message format.",
					"anyOf": [
						{
							"$ref": "#/$defs/OutputFormat1Code"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/OutputFormat1Code"
							}
						}
					]
				},
				"AvailableLanguage": {
					"description": "Available language for the message. Reference ISO 639-1 (alpha-2) et ISO 639-2 (alpha-3).",
					"anyOf": [
						{
							"$ref": "#/$defs/LanguageCode"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/LanguageCode"
							}
						}
					]
				},
				"Destination": {
					"description": "Destination of the message to present.",
					"anyOf": [
						{
							"$ref": "#/$defs/UserInterface4Code"
						},
						{
							"type": "array",
							"minItems": 1,
							"items": {
								"$ref": "#/$defs/UserInterface4Code"
							}
						}
					]
				},
				"LineWidth": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				},
				"NumberOfLines": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				}
			},
			"required": [
				"Destination"
			],
			"additionalProperties": false
		},
		"Document": {
			"description": "General information that unambiguously identifies a document, such as identification number and issue date time.\n",
			"type": "object",
			"properties": {
				"SaleToPOIServiceRequestV06": {
					"description": "This SaleToPOIServiceRequest message is sent by a sale system to trig a financial service on POI system.",
					"$ref": "#/$defs/SaleToPOIServiceRequestV06"
				}
			},
			"required": [
				"SaleToPOIServiceRequestV06"
			],
			"additionalProperties": false
		},
		"EnableServiceRequest6": {
			"description": "Data to request to enable a service.\n",
			"type": "object",
			"properties": {
				"DisplayOutput": {
					"description": "Information to display, print or store.\n",
					"$ref": "#/$defs/ActionMessage11"
				},
				"ServicesEnabled": {
					"description": "List of specific services for ServiceRequest\n- FSPQ: FinancialPaymentRequest  : The Sale System requests to the POI System to perform a payment(Purchase/Refund/PWCB/MOTO Payment/...).\n- FSRQ: FinancialReversalRequest  : The Sale System requests to the POI System to perform a reversal partial or complete to cancel a former payment service.\n- FSIQ: FinancialBalanceInquiryRequest  : The Sale System requests to the POI System to perform balance inquiry on the main account.\n- FSBQ: FinancialBatchRequest  : The Batch message pair is used to request or get the result of transactions (payment, loyalty and reversal) performed without connection to the Sale system (Payment delivery).\n- FSLQ: FinancialLoyaltyRequest  : The Sale System requests to the POI System a loyalty service like loading or redeem.\n- FSVQ: FinancialStoredValueRequest  : The Sale System requests to the POI System to manage a stored value card or account (eg. Load, Payment, Reimbursement).\n- FSEQ: FinancialEnableServiceRequest  : The Sale System requests to the POI System to enable a service on its side.\n- FSAQ: FinancialCardAcquisitionRequest  : The Sale System requests to the POI System to handle a card data acquisition on the card reader.\n- FSCQ: FinancialReconciliationRequest  : The Sale System request to the POI System different kinds of transaction reconciliation. \n",
					"$ref": "#/$defs/RetailerService2Code"
				},
				"TransactionAction": {
					"description": "Action to realise on a transaction.\n- STAR: StartTransaction  : Start a transaction by a swipe ahead mechanism, with the services which are enabled.\n- STOP: Stop  : Keep quite after a swipe ahead mechanism.\n",
					"$ref": "#/$defs/TransactionAction1Code"
				}
			},
			"required": [
				"TransactionAction"
			],
			"additionalProperties": false
		},
		"EncapsulatedContent3": {
			"description": "Data to authenticate.\n",
			"type": "object",
			"properties": {
				"Content": {
					"description": "Binary data of 100K maximum.\n",
					"$ref": "#/$defs/Max100KBinary"
				},
				"ContentType": {
					"description": "Identification of the type of a Cryptographic Message Syntax (CMS) data structure.\n- DATA: PlainData  : Generic, non cryptographic, or unqualified data content - (ASN.1 Object Identifier: id-data).\n- SIGN: SignedData  : Digital signature - (ASN.1 Object Identifier: id-signedData).\n- EVLP: EnvelopedData  : Encrypted data, with encryption key - (ASN.1 Object Identifier: id-envelopedData).\n- DGST: DigestedData  : Message digest - (ASN.1 Object Identifier: id-digestedData).\n- AUTH: AuthenticatedData  : MAC (Message Authentication Code), with encryption key - (ASN.1 Object Identifier: id-ct-authData).\n",
					"$ref": "#/$defs/ContentType2Code"
				}
			},
			"required": [
				"ContentType"
			],
			"additionalProperties": false
		},
		"EncryptedContent7": {
			"description": "Encrypted data with an encryption key.\n",
			"type": "object",
			"properties": {
				"ContentEncryptionAlgorithm": {
					"description": "Cryptographic algorithm and parameters for the protection of the transported key.\n",
					"$ref": "#/$defs/AlgorithmIdentification32"
				},
				"ContentType": {
					"description": "Identification of the type of a Cryptographic Message Syntax (CMS) data structure.\n- DATA: PlainData  : Generic, non cryptographic, or unqualified data content - (ASN.1 Object Identifier: id-data).\n- SIGN: SignedData  : Digital signature - (ASN.1 Object Identifier: id-signedData).\n- EVLP: EnvelopedData  : Encrypted data, with encryption key - (ASN.1 Object Identifier: id-envelopedData).\n- DGST: DigestedData  : Message digest - (ASN.1 Object Identifier: id-digestedData).\n- AUTH: AuthenticatedData  : MAC (Message Authentication Code), with encryption key - (ASN.1 Object Identifier: id-ct-authData).\n",
					"$ref": "#/$defs/ContentType2Code"
				},
				"EncryptedData": {
					"description": "Binary data of 100K maximum.\n",
					"$ref": "#/$defs/Max100KBinary"
				}
			},
			"required": [
				"ContentType",
				"EncryptedData"
			],
			"additionalProperties": false
		},
		"EncryptionFormat2Code": {
			"description": "Format of data before encryption, if the format is not plaintext or implicit.\n- TR31: TR31  : Format of a cryptographic key specified by the ANSI X9 TR-31 standard.\n- TR34: TR34  : Format of a cryptographic key specified by the ANSI X9 TR-34 standard.\n- I238: ISO20038KeyWrap  : Format of a cryptographic key specified by the ISO20038 standard.\n",
			"type": "string",
			"enum": [
				"TR31",
				"TR34",
				"I238"
			]
		},
		"EnvelopedData11": {
			"description": "Encrypted data with encryption key.\n",
			"type": "object",
			"properties": {
				"EncryptedContent": {
					"description": "Encrypted data with an encryption key.\n",
					"$ref": "#/$defs/EncryptedContent7"
				},
				"OriginatorInformation": {
					"description": "Provides information about the originator. It is present only if required by the key management algorithm.\n",
					"$ref": "#/$defs/OriginatorInformation1"
				},
				"Recipient": {
					"description": "Session key or identification of the protection key used by the recipient.",
					"anyOf": [
						{
							"$ref": "#/$defs/Recipient15Choice"
						},
						{
							"type": "array",
							"minItems": 1,
							"items": {
								"$ref": "#/$defs/Recipient15Choice"
							}
						}
					]
				},
				"Version": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				}
			},
			"required": [
				"Recipient"
			],
			"additionalProperties": false
		},
		"Exact3AlphaNumericText": {
			"description": "Specifies an alphanumeric string with a length of exact 3 characters.\n",
			"type": "string",
			"pattern": "^([0-9A-Za-z]{3,3})$"
		},
		"Exact3NumericText": {
			"description": "Specifies a numeric string with an exact length of 3 digits.\n",
			"type": "string",
			"pattern": "^([0-9]{3,3})$"
		},
		"Exact4NumericText": {
			"description": "Specifies a numeric string with an exact length of 4 digits.\n",
			"type": "string",
			"pattern": "^([0-9]{4,4})$"
		},
		"Exemption1Code": {
			"description": "Strong customer authentication exemption.\n- LOWA: LowAmountExemption  : Transaction's amount is low and could be processed without strong customer authentication.\n- MINT: MerchantInitiatedTransaction  : Transaction is initiated by the Card Acceptor.\n- RECP: RecurringPayment  : Transaction is one of a series of recurring payment.\n- SCPE: SecureCorporatePaymentExemption  : Transaction is a secure corporate payment.\n- SCAD: StrongCustomerAuthenticationDelegation  : Card Acceptor is a strong customer authentication delegate.\n- TRAE: TransactionRiskAnalysisExemption  : According to the transaction risk analysis the strong customer authentication is not mandated.\n- PKGE: TransportFareOrParkingFeeUnattendedPaymentExemption  : Payment is processed in a environment where strong customer authentication is inappropriate.\n- TMBE: TrustedMerchantBeneficiaryExemption  : Cardholder has enrolled the Card Acceptor in the exemption list of strong customer authentication.\n",
			"type": "string",
			"enum": [
				"LOWA",
				"MINT",
				"RECP",
				"SCPE",
				"SCAD",
				"TRAE",
				"PKGE",
				"TMBE"
			]
		},
		"ExternallyDefinedData5": {
			"description": "Data container to exchange data elements defined by another standard.\n",
			"type": "object",
			"properties": {
				"Identification": {
					"description": "Specifies a character string with a maximum length of 1025 characters.\n",
					"$ref": "#/$defs/Max1025Text"
				},
				"ProtectedValue": {
					"description": "General cryptographic message syntax (CMS) containing protected data.\n",
					"$ref": "#/$defs/ContentInformationType39"
				},
				"Type": {
					"description": "Specifies a character string with a maximum length of 1025 characters.\n",
					"$ref": "#/$defs/Max1025Text"
				},
				"Value": {
					"description": "Binary data of 100K maximum.\n",
					"$ref": "#/$defs/Max100KBinary"
				}
			},
			"required": [
				"Identification"
			],
			"additionalProperties": false
		},
		"Frequency3Code": {
			"description": "Specifies the regularity of an event.\n- YEAR: Annual  : Event takes place every year or once a year.\n- MNTH: Monthly  : Event takes place every month or once a month.\n- QURT: Quarterly  : Event takes place every three months or four times a year.\n- MIAN: SemiAnnual  : Event takes place every six months or two times a year.\n- WEEK: Weekly  : Event takes place once a week.\n- DAIL: Daily  : Event takes place every day.\n- TEND: TenDays  : Event takes place every ten business days.\n",
			"type": "string",
			"enum": [
				"YEAR",
				"MNTH",
				"QURT",
				"MIAN",
				"WEEK",
				"DAIL",
				"TEND"
			],
			"example": "YEAR"
		},
		"GenericIdentification176": {
			"description": "Identification of an entity.\n",
			"type": "object",
			"properties": {
				"Country": {
					"description": "Specifies an alpha string with a minimum length of 2 characters and a maximum length of 3 characters.\n",
					"$ref": "#/$defs/Min2Max3AlphaText"
				},
				"Identification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Issuer": {
					"description": "Identification of the type of entity involved in a transaction.\n- OPOI: OriginatingPOI  : Point Of Interaction initiating the card payment transaction.\n- MERC: Merchant  : Merchant providing goods and service in the card payment transaction.\n- ACCP: Acceptor  : Card acceptor, party accepting the card and presenting transaction data to the acquirer.\n- ITAG: IntermediaryAgent  : Party acting on behalf of other parties to process or forward data to other parties.\n- ACQR: Acquirer  : Entity acquiring card transactions.\n- CISS: CardIssuer  : Party that issues cards.\n- DLIS: DelegateIssuer  : Party to whom the card issuer delegates to authorise card payment transactions.\n- MTMG: MasterTerminalManager  : Responsible for the maintenance of a card payment acceptance terminal.\n- TAXH: TaxAuthority  : Tax authority.\n- TMGT: TerminalManager  : Responsible for one or several maintenance functions of a card payment acceptance terminal.\n",
					"$ref": "#/$defs/PartyType33Code"
				},
				"ShortName": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Type": {
					"description": "Identification of the type of entity involved in a transaction.\n- OPOI: OriginatingPOI  : Point Of Interaction initiating the card payment transaction.\n- MERC: Merchant  : Merchant providing goods and service in the card payment transaction.\n- ACCP: Acceptor  : Card acceptor, party accepting the card and presenting transaction data to the acquirer.\n- ITAG: IntermediaryAgent  : Party acting on behalf of other parties to process or forward data to other parties.\n- ACQR: Acquirer  : Entity acquiring card transactions.\n- CISS: CardIssuer  : Party that issues cards.\n- DLIS: DelegateIssuer  : Party to whom the card issuer delegates to authorise card payment transactions.\n- MTMG: MasterTerminalManager  : Responsible for the maintenance of a card payment acceptance terminal.\n- TAXH: TaxAuthority  : Tax authority.\n- TMGT: TerminalManager  : Responsible for one or several maintenance functions of a card payment acceptance terminal.\n",
					"$ref": "#/$defs/PartyType33Code"
				}
			},
			"required": [
				"Identification"
			],
			"additionalProperties": false
		},
		"GenericIdentification177": {
			"description": "Identification of an entity.\n",
			"type": "object",
			"properties": {
				"Country": {
					"description": "Specifies an alpha string with a minimum length of 2 characters and a maximum length of 3 characters.\n",
					"$ref": "#/$defs/Min2Max3AlphaText"
				},
				"Geolocation": {
					"description": "Geographic location specified by geographic or UTM coordinates.\n",
					"$ref": "#/$defs/Geolocation1"
				},
				"Identification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Issuer": {
					"description": "Identification of the type of entity involved in a transaction.\n- OPOI: OriginatingPOI  : Point Of Interaction initiating the card payment transaction.\n- MERC: Merchant  : Merchant providing goods and service in the card payment transaction.\n- ACCP: Acceptor  : Card acceptor, party accepting the card and presenting transaction data to the acquirer.\n- ITAG: IntermediaryAgent  : Party acting on behalf of other parties to process or forward data to other parties.\n- ACQR: Acquirer  : Entity acquiring card transactions.\n- CISS: CardIssuer  : Party that issues cards.\n- DLIS: DelegateIssuer  : Party to whom the card issuer delegates to authorise card payment transactions.\n- MTMG: MasterTerminalManager  : Responsible for the maintenance of a card payment acceptance terminal.\n- TAXH: TaxAuthority  : Tax authority.\n- TMGT: TerminalManager  : Responsible for one or several maintenance functions of a card payment acceptance terminal.\n",
					"$ref": "#/$defs/PartyType33Code"
				},
				"RemoteAccess": {
					"description": "Parameters to communicate with a host.\n",
					"$ref": "#/$defs/NetworkParameters7"
				},
				"ShortName": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Type": {
					"description": "Identification of the type of entity involved in a transaction.\n- OPOI: OriginatingPOI  : Point Of Interaction initiating the card payment transaction.\n- MERC: Merchant  : Merchant providing goods and service in the card payment transaction.\n- ACCP: Acceptor  : Card acceptor, party accepting the card and presenting transaction data to the acquirer.\n- ITAG: IntermediaryAgent  : Party acting on behalf of other parties to process or forward data to other parties.\n- ACQR: Acquirer  : Entity acquiring card transactions.\n- CISS: CardIssuer  : Party that issues cards.\n- DLIS: DelegateIssuer  : Party to whom the card issuer delegates to authorise card payment transactions.\n- MTMG: MasterTerminalManager  : Responsible for the maintenance of a card payment acceptance terminal.\n- TAXH: TaxAuthority  : Tax authority.\n- TMGT: TerminalManager  : Responsible for one or several maintenance functions of a card payment acceptance terminal.\n",
					"$ref": "#/$defs/PartyType33Code"
				}
			},
			"required": [
				"Identification"
			],
			"additionalProperties": false
		},
		"GenericIdentification186": {
			"description": "Information to identify an element in the system.\n",
			"type": "object",
			"properties": {
				"Identification": {
					"description": "Specifies a character string with a maximum length of 256 characters.\n",
					"$ref": "#/$defs/Max256Text"
				},
				"Type": {
					"description": "Party that communicate with a POI component (Point of Interaction), using a communication device.\n- ACQR: Acquirer  : Entity acquiring card transactions.\n- ITAG: IntermediaryAgent  : Party acting on behalf of other parties to process or forward data to other parties.\n- PCPT: POIComponent  : Party component of a POI system or POI terminal (Point of Interaction).\n- TMGT: TerminalManager  : Responsible for one or several maintenance functions of a card payment acceptance terminal.\n- SALE: SaleSystem  : Party selling goods and services.\n",
					"$ref": "#/$defs/PartyType7Code"
				}
			},
			"required": [
				"Identification",
				"Type"
			],
			"additionalProperties": false
		},
		"GenericIdentification32": {
			"description": "Identification of an entity.\n",
			"type": "object",
			"properties": {
				"Identification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Issuer": {
					"description": "Entity assigning an identification (for example merchant, acceptor, acquirer, tax authority, etc.).\n- MERC: Merchant  : Merchant providing goods and service in the card payment transaction.\n- ACCP: Acceptor  : Card acceptor, party accepting the card and presenting transaction data to the acquirer.\n- ITAG: IntermediaryAgent  : Party acting on behalf of other parties to process or forward data to other parties.\n- ACQR: Acquirer  : Entity acquiring card transactions.\n- CISS: CardIssuer  : Party that issues cards.\n- TAXH: TaxAuthority  : Tax authority.\n",
					"$ref": "#/$defs/PartyType4Code"
				},
				"ShortName": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Type": {
					"description": "Identification of the type of entity involved in a transaction.\n- OPOI: OriginatingPOI  : Point Of Interaction initiating the card payment transaction.\n- MERC: Merchant  : Merchant providing goods and service in the card payment transaction.\n- ACCP: Acceptor  : Card acceptor, party accepting the card and presenting transaction data to the acquirer.\n- ITAG: IntermediaryAgent  : Party acting on behalf of other parties to process or forward data to other parties.\n- ACQR: Acquirer  : Entity acquiring card transactions.\n- CISS: CardIssuer  : Party that issues cards.\n- DLIS: DelegateIssuer  : Party to whom the card issuer delegates to authorise card payment transactions.\n",
					"$ref": "#/$defs/PartyType3Code"
				}
			},
			"required": [
				"Identification"
			],
			"additionalProperties": false
		},
		"GenericIdentification36": {
			"description": "Identification using a proprietary scheme.\n",
			"type": "object",
			"properties": {
				"Identification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Issuer": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"SchemeName": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"Identification",
				"Issuer"
			],
			"additionalProperties": false
		},
		"GenericIdentification4": {
			"description": "Information related to an identification, eg, party identification or account identification.\n",
			"type": "object",
			"properties": {
				"Identification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"IdentificationType": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"Identification",
				"IdentificationType"
			],
			"additionalProperties": false
		},
		"GenericIdentification48": {
			"description": "Information related to an identification.\n",
			"type": "object",
			"properties": {
				"Identification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Issuer": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Version": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"Identification",
				"Issuer",
				"Version"
			],
			"additionalProperties": false
		},
		"GenericIdentification90": {
			"description": "Identification of an entity.\n",
			"type": "object",
			"properties": {
				"Country": {
					"description": "Specifies an alpha string with a minimum length of 2 characters and a maximum length of 3 characters.\n",
					"$ref": "#/$defs/Min2Max3AlphaText"
				},
				"Identification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Issuer": {
					"description": "Entity assigning an identification (for example merchant, acceptor, acquirer, tax authority, etc.).\n- MERC: Merchant  : Merchant providing goods and service in the card payment transaction.\n- ACCP: Acceptor  : Card acceptor, party accepting the card and presenting transaction data to the acquirer.\n- ITAG: IntermediaryAgent  : Party acting on behalf of other parties to process or forward data to other parties.\n- ACQR: Acquirer  : Entity acquiring card transactions.\n- CISS: CardIssuer  : Party that issues cards.\n- TAXH: TaxAuthority  : Tax authority.\n",
					"$ref": "#/$defs/PartyType4Code"
				},
				"ShortName": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Type": {
					"description": "Identification of the type of entity involved in a transaction.\n- OPOI: OriginatingPOI  : Point Of Interaction initiating the card payment transaction.\n- MERC: Merchant  : Merchant providing goods and service in the card payment transaction.\n- ACCP: Acceptor  : Card acceptor, party accepting the card and presenting transaction data to the acquirer.\n- ITAG: IntermediaryAgent  : Party acting on behalf of other parties to process or forward data to other parties.\n- ACQR: Acquirer  : Entity acquiring card transactions.\n- CISS: CardIssuer  : Party that issues cards.\n- DLIS: DelegateIssuer  : Party to whom the card issuer delegates to authorise card payment transactions.\n- ICCA: CardApplication  : Application in the smart card.\n",
					"$ref": "#/$defs/PartyType14Code"
				}
			},
			"required": [
				"Type"
			],
			"additionalProperties": false
		},
		"GenericInformation1": {
			"description": "GenericInformation exchanged with a name and value.\n",
			"type": "object",
			"properties": {
				"Name": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"Value": {
					"description": "Specifies a character string with a maximum length of 140 characters.\n",
					"$ref": "#/$defs/Max140Text"
				}
			},
			"required": [
				"Name"
			],
			"additionalProperties": false
		},
		"Geolocation1": {
			"description": "Geographic location specified by geographic or UTM coordinates.\n",
			"type": "object",
			"properties": {
				"GeographicCoordinates": {
					"description": "Location on the Earth specified by two numbers representing vertical and horizontal position.\n",
					"$ref": "#/$defs/GeolocationGeographicCoordinates1"
				},
				"UTMCoordinates": {
					"description": "Location on the Earth specified by the Universal Transverse Mercator coordinate system.\r\nIdentifies the geographic location using the WGS84 ellipsoid spatial reference system.\n",
					"$ref": "#/$defs/GeolocationUTMCoordinates1"
				}
			},
			"additionalProperties": false
		},
		"GeolocationGeographicCoordinates1": {
			"description": "Location on the Earth specified by two numbers representing vertical and horizontal position.\n",
			"type": "object",
			"properties": {
				"Latitude": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Longitude": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"Latitude",
				"Longitude"
			],
			"additionalProperties": false
		},
		"GeolocationUTMCoordinates1": {
			"description": "Location on the Earth specified by the Universal Transverse Mercator coordinate system.\r\nIdentifies the geographic location using the WGS84 ellipsoid spatial reference system.\n",
			"type": "object",
			"properties": {
				"UTMEastward": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"UTMNorthward": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"UTMZone": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"UTMEastward",
				"UTMNorthward",
				"UTMZone"
			],
			"additionalProperties": false
		},
		"GracePeriod1": {
			"description": "Grace period applicable to an instalment plan.\n",
			"type": "object",
			"properties": {
				"OtherUnitType": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Time": {
					"description": "Specifies a numeric string with a maximum length of 3 digits.\n",
					"$ref": "#/$defs/Max3NumericText"
				},
				"UnitType": {
					"description": "Contains the details of the grace period applicable to the instalment.\n- WEKS: Weeks  : Grace period weeks.\n- PMTS: Payments  : Grace period payments.\n- OTHP: OtherPrivate  : Other Private Grace period.\n- OTHN: OtherNational  : Other National Grace period.\n- MNTH: Months  : Grace period months.\n- DAYS: Days  : Grace period days.\n",
					"$ref": "#/$defs/GracePeriodUnitType1Code"
				}
			},
			"required": [
				"Time",
				"UnitType"
			],
			"additionalProperties": false
		},
		"GracePeriodUnitType1Code": {
			"description": "Contains the details of the grace period applicable to the instalment.\n- WEKS: Weeks  : Grace period weeks.\n- PMTS: Payments  : Grace period payments.\n- OTHP: OtherPrivate  : Other Private Grace period.\n- OTHN: OtherNational  : Other National Grace period.\n- MNTH: Months  : Grace period months.\n- DAYS: Days  : Grace period days.\n",
			"type": "string",
			"enum": [
				"WEKS",
				"PMTS",
				"OTHP",
				"OTHN",
				"MNTH",
				"DAYS"
			]
		},
		"Header41": {
			"description": "Set of characteristics related to the protocol.\n",
			"type": "object",
			"properties": {
				"CreationDateTime": {
					"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
					"$ref": "#/$defs/ISODateTime"
				},
				"InitiatingParty": {
					"description": "Identification of an entity.\n",
					"$ref": "#/$defs/GenericIdentification177"
				},
				"MessageFunction": {
					"description": "Identifies the type of process related to the message.\n- SSAB: Abort  : Abort the current process or the last request.\n- SAAQ: AdminRequest  : To select and start customised administrative services provided by the POI, using a \"menu\" for an interactive or software interface, initiated by the Sale system.\n- SAAP: AdminResponse  : Response to the Admin request.\n- SDDR: DeviceRequest  : Request one or several functions of the device, from user Interface or payment peripherals on the POI system or on the Sale system. Functions can be Display, Input, Print, play sound, Card reader capabilities or Transmit a message.\n- SDDP: DeviceResponse  : Response to a Device request.\n- SSEN: EventNotification  : Notify the other party of an event that occurs on its side.\n- SSMQ: MessageStatusRequest  : Request the status of a previous message for which the Sale system has no response.\n- SSMR: MessageStatusResponse  : Response to a Message Status request.\n- SSRJ: Rejection  : Reject a previous received message, for technical or functional reasons.\n- SARQ: ReportRequest  : To request, by the Sale System, a report on a list of transactions on the POI system, or the status of a transaction.\n- SARP: ReportResponse  : Response to a Report request.\n- SFRP: SaleFinancialReconciliationResponse  : Response to a Reconciliation Request.\n- SFRQ: SaleFinancialReconciliationRequest  : Request a reconciliation (different types) between Sale System and POI System.\n- SFSQ: SaleFinancialServiceRequest  : Request a financial service like payment, reversal, loyalty, Balance Inquiry, etc.\n- SFSP: SaleFinancialServiceResponse  : Response to a financial service request.\n- SASQ: SessionManagementRequest  : Request the management of a session: login, logout and diagnosis services. Initiated by the Sale system.\n- SASP: SessionManagementResponse  : Response to a session management request to initiate/terminate a session.\n",
					"$ref": "#/$defs/RetailerMessage1Code"
				},
				"ProtocolVersion": {
					"description": "Specifies a character string with a maximum length of 6 characters.\n",
					"$ref": "#/$defs/Max6Text"
				},
				"RecipientParty": {
					"description": "Identification of an entity.\n",
					"$ref": "#/$defs/GenericIdentification177"
				},
				"Traceability": {
					"description": "Identification of partners involved in exchange from the merchant to the issuer, with the relative timestamp of their exchanges.",
					"anyOf": [
						{
							"$ref": "#/$defs/Traceability8"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Traceability8"
							}
						}
					]
				},
				"ExchangeIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"CreationDateTime",
				"InitiatingParty",
				"MessageFunction",
				"ProtocolVersion",
				"ExchangeIdentification"
			],
			"additionalProperties": false
		},
		"IBAN2007Identifier": {
			"description": "The International Bank Account Number is a code used internationally by financial institutions to uniquely identify the account of a customer at a financial institution as described in the 2007 edition of the ISO 13616 standard \"Banking and related financial services - International Bank Account Number (IBAN)\" and replaced by the more recent edition of the standard.\n",
			"type": "string",
			"pattern": "^([A-Z]{2,2}[0-9]{2,2}[0-9A-Za-z]{1,30})$",
			"example": "AT611904300234573201"
		},
		"ISO3NumericCountryCode": {
			"description": "Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Numeric-3 code). The code is checked against the list of country names coded with three digit characters, defined in the standard.\n",
			"type": "string",
			"pattern": "^([0-9]{3,3})$",
			"example": "001"
		},
		"ISODate": {
			"description": "A particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format. This representation is defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\n",
			"type": "string"
		},
		"ISODateTime": {
			"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
			"type": "string"
		},
		"ImpliedCurrencyAndAmount": {
			"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
			"type": "number",
			"minimum": 0,
			"example": "500000"
		},
		"InformationQualify1Code": {
			"description": "Qualification of the information to sent to an output logical device, to display or print to the Cashier or the Customer.\n- CUSA: CustomerAssistance  : Input of the Cardholder POI interface which can be entered by the Cashier to assist the Customer.\n- DISP: Display  : Standard display interface.\n- DOCT: Document  : When the POI System wants to print specific document (check, dynamic currency conversion ...). Used by the Sale System when the printer is not located on the Sale System.\n- ERRO: Error  : The information is related to an error situation occurring on the message sender.\n- INPT: Input  : Answer to a question or information to be entered by the Cashier or the Customer, at the request of the POI Terminal or the Sale Terminal.\n- POIR: POIReplication  : Information displayed on the Cardholder POI interface, replicated on the Cashier interface.\n- RCPT: Receipt  : Where you print the Payment receipt that could be located on the Sale System or in some cases a restricted Sale ticket on the POI Terminal.\n- SOND: Sound  : Standard sound interface.\n- STAT: Status  : The information is a new state on which the message sender is entering. For instance, during a payment, the POI could display to the Cashier that POI request an authorisation to the host acquirer.\n- VCHR: Voucher  : Coupons, voucher or special ticket generated by the POI or the Sale System and to be printed.\n",
			"type": "string",
			"enum": [
				"CUSA",
				"DISP",
				"DOCT",
				"ERRO",
				"INPT",
				"POIR",
				"RCPT",
				"SOND",
				"STAT",
				"VCHR"
			]
		},
		"Instalment5": {
			"description": "Data exclusively related to a card issuer financial loan of the payment transaction, or instalment.\n",
			"type": "object",
			"properties": {
				"Charges": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"DetailedCharges": {
					"description": "Contains the charge details of an instalment plan.",
					"anyOf": [
						{
							"$ref": "#/$defs/InstalmentAmountDetails1"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/InstalmentAmountDetails1"
							}
						}
					]
				},
				"FirstAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"FirstPaymentDate": {
					"description": "A particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format. This representation is defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\n",
					"$ref": "#/$defs/ISODate"
				},
				"GracePeriod": {
					"description": "Contains grace period details.",
					"anyOf": [
						{
							"$ref": "#/$defs/GracePeriod1"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/GracePeriod1"
							}
						}
					]
				},
				"InstalmentPlan": {
					"description": "Type of instalment plan.",
					"anyOf": [
						{
							"$ref": "#/$defs/InstalmentPlan1Code"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/InstalmentPlan1Code"
							}
						}
					]
				},
				"InstalmentPeriod": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				},
				"InterestRate": {
					"description": "Details of the interest rate.",
					"anyOf": [
						{
							"$ref": "#/$defs/InterestRateDetails1"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/InterestRateDetails1"
							}
						}
					]
				},
				"LastAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"PlanIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"PlanNotice": {
					"description": "Notice related to the InstalmentPlan.",
					"anyOf": [
						{
							"$ref": "#/$defs/ActionMessage11"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/ActionMessage11"
							}
						}
					]
				},
				"PlanOwner": {
					"description": "Contains list of plan owners\n- ACCP: Acceptor  : Plan owner is an acceptor.\n- ACQR: Acquirer  : Plan owner is an acquirer.\n- ISSR: Issuer  : Plan owner is an issuer.\n- OTHN: OtherNational  : plan owner type is other national.\n- OTHP: OtherPrivate  : plan owner type is other private.\n",
					"$ref": "#/$defs/PlanOwner1Code"
				},
				"PeriodUnit": {
					"description": "Specifies the regularity of an event.\n- YEAR: Annual  : Event takes place every year or once a year.\n- MNTH: Monthly  : Event takes place every month or once a month.\n- QURT: Quarterly  : Event takes place every three months or four times a year.\n- MIAN: SemiAnnual  : Event takes place every six months or two times a year.\n- WEEK: Weekly  : Event takes place once a week.\n- DAIL: Daily  : Event takes place every day.\n- TEND: TenDays  : Event takes place every ten business days.\n",
					"$ref": "#/$defs/Frequency3Code"
				},
				"SubsequentAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"SequenceNumber": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				},
				"TotalAmount": {
					"description": "A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.\n",
					"$ref": "#/$defs/ActiveCurrencyAndAmount"
				},
				"TotalNumberOfPayments": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				}
			},
			"additionalProperties": false
		},
		"InstalmentAmountDetails1": {
			"description": "Instalment amount details\n",
			"type": "object",
			"properties": {
				"Amount": {
					"description": "Signed amount in a given numeric currency\n",
					"$ref": "#/$defs/Amount5"
				},
				"OtherType": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Percentage": {
					"description": "Rate expressed as a percentage, that is, in hundredths, for example, 0.7 is 7/10 of a percent, and 7.0 is 7%.\n",
					"$ref": "#/$defs/PercentageRate"
				},
				"SubType": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Type": {
					"description": "Contains the details of the grace period applicable to the instalment.\n- TAXX: Tax  : Instalment amount tax\n- RQST: Requested  : Requested amount\n- OTHP: OtherPrivate  : Grace period unit type\n- OTHN: OtherNational  : Grace period unit type\n- OTHC: OtherCharges  : Other amounts\n- INSU: Insurance  : Insurance amount\n- FUNA: Funded  : Funded amount\n- FEES: Fees  : Fees amount\n- EXPN: Expense  : Expense Amount\n- AFCO: AnnualFinancingCost  : Total financing cost per annum.\n",
					"$ref": "#/$defs/InstalmentAmountDetailsType1Code"
				}
			},
			"additionalProperties": false
		},
		"InstalmentAmountDetailsType1Code": {
			"description": "Contains the details of the grace period applicable to the instalment.\n- TAXX: Tax  : Instalment amount tax\n- RQST: Requested  : Requested amount\n- OTHP: OtherPrivate  : Grace period unit type\n- OTHN: OtherNational  : Grace period unit type\n- OTHC: OtherCharges  : Other amounts\n- INSU: Insurance  : Insurance amount\n- FUNA: Funded  : Funded amount\n- FEES: Fees  : Fees amount\n- EXPN: Expense  : Expense Amount\n- AFCO: AnnualFinancingCost  : Total financing cost per annum.\n",
			"type": "string",
			"enum": [
				"TAXX",
				"RQST",
				"OTHP",
				"OTHN",
				"OTHC",
				"INSU",
				"FUNA",
				"FEES",
				"EXPN",
				"AFCO"
			]
		},
		"InstalmentPeriod1Code": {
			"description": "Instalment period.\n- MNTH: Monthly  : Monthly instalment period.\n- ANNU: Annual  : Annual instalment period.\n",
			"type": "string",
			"enum": [
				"MNTH",
				"ANNU"
			]
		},
		"InstalmentPlan1Code": {
			"description": "Type of instalment plan.\n- EQPM: EqualPayment  : The payment is split in several instalments of equal amounts.\n- NQPM: InequalPayment  : The payment is split in several instalments of different amounts.\n- DFRI: DeferredInstalment  : The first instalment is deferred.\n",
			"type": "string",
			"enum": [
				"EQPM",
				"NQPM",
				"DFRI"
			]
		},
		"InterestRate1Code": {
			"description": "Contains the list of interest rates.\n- GSRT: GrossRate  : Gross interest rate of the instalment\n- NTRT: NetRate  : Net interest rate of the instalment\n- OTHN: OtherNational  : Other interest rate of the instalment\n- OTHP: OtherPrivate  : Other interest rate of the instalment\n",
			"type": "string",
			"enum": [
				"GSRT",
				"NTRT",
				"OTHN",
				"OTHP"
			]
		},
		"InterestRateDetails1": {
			"description": "Details of the interest rate\n",
			"type": "object",
			"properties": {
				"OtherType": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Period": {
					"description": "Instalment period.\n- MNTH: Monthly  : Monthly instalment period.\n- ANNU: Annual  : Annual instalment period.\n",
					"$ref": "#/$defs/InstalmentPeriod1Code"
				},
				"Rate": {
					"description": "Rate expressed as a decimal, for example, 0.7 is 7/10 and 70%.\n",
					"$ref": "#/$defs/BaseOneRate"
				},
				"Type": {
					"description": "Contains the list of interest rates.\n- GSRT: GrossRate  : Gross interest rate of the instalment\n- NTRT: NetRate  : Net interest rate of the instalment\n- OTHN: OtherNational  : Other interest rate of the instalment\n- OTHP: OtherPrivate  : Other interest rate of the instalment\n",
					"$ref": "#/$defs/InterestRate1Code"
				}
			},
			"required": [
				"Period",
				"Rate"
			],
			"additionalProperties": false
		},
		"IssuerAndSerialNumber2": {
			"description": "Certificate issuer name and serial number (see X.509).\n",
			"type": "object",
			"properties": {
				"Issuer": {
					"description": "Certificate issuer name (see X.509).\n",
					"$ref": "#/$defs/CertificateIssuer1"
				},
				"SerialNumber": {
					"description": "Specifies a binary string with a maximum length of 500 binary bytes.\n",
					"$ref": "#/$defs/Max500Binary"
				}
			},
			"required": [
				"Issuer",
				"SerialNumber"
			],
			"additionalProperties": false
		},
		"KEK9": {
			"description": "Key encryption key (KEK), using previously distributed symmetric key.\n",
			"type": "object",
			"properties": {
				"KEKIdentification": {
					"description": "Identification of a key encryption key (KEK), using previously distributed symmetric key.\n",
					"$ref": "#/$defs/KEKIdentifier7"
				},
				"KeyEncryptionAlgorithm": {
					"description": "Cryptographic algorithm and parameters for the protection of the transported key.\n",
					"$ref": "#/$defs/AlgorithmIdentification32"
				},
				"EncryptedKey": {
					"description": "Specifies a binary string with a maximum length of 500 binary bytes.\n",
					"$ref": "#/$defs/Max500Binary"
				},
				"Version": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				}
			},
			"required": [
				"KEKIdentification",
				"KeyEncryptionAlgorithm"
			],
			"additionalProperties": false
		},
		"KEKIdentifier7": {
			"description": "Identification of a key encryption key (KEK), using previously distributed symmetric key.\n",
			"type": "object",
			"properties": {
				"DerivationIdentification": {
					"description": "Specifies a binary string with a maximum length of 500 binary bytes.\n",
					"$ref": "#/$defs/Max500Binary"
				},
				"KeyIdentification": {
					"description": "Specifies a character string with a maximum length of 140 characters.\n",
					"$ref": "#/$defs/Max140Text"
				},
				"KeyVersion": {
					"description": "Specifies a character string with a maximum length of 140 characters.\n",
					"$ref": "#/$defs/Max140Text"
				},
				"SequenceNumber": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				}
			},
			"required": [
				"KeyIdentification",
				"KeyVersion"
			],
			"additionalProperties": false
		},
		"KeyTransport10": {
			"description": "Key encryption key (KEK), encrypted with a previously distributed asymmetric public key.\n",
			"type": "object",
			"properties": {
				"KeyEncryptionAlgorithm": {
					"description": "Cryptographic algorithms and parameters for the protection of transported keys by an asymmetric key.\n",
					"$ref": "#/$defs/AlgorithmIdentification35"
				},
				"EncryptedKey": {
					"description": "Specifies a binary string with a maximum length of 5000 binary bytes.\n",
					"$ref": "#/$defs/Max5000Binary"
				},
				"RecipientIdentification": {
					"description": "Identification of a cryptographic asymmetric key.\n",
					"$ref": "#/$defs/Recipient13Choice"
				},
				"Version": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				}
			},
			"required": [
				"KeyEncryptionAlgorithm",
				"EncryptedKey",
				"RecipientIdentification"
			],
			"additionalProperties": false
		},
		"KeyUsage1Code": {
			"description": "Allowed usages of the key.\n- ENCR: Encryption  : Key may encrypt.\n- DCPT: Decryption  : Key may decrypt.\n- DENC: DataEncryption  : Key may encrypt data.\n- DDEC: DataDecryption  : Key may decrypt data.\n- TRNI: TranslateInput  : Key may encrypt information before translation.\n- TRNX: TranslateOutput  : Key may encrypt information after translation.\n- MACG: MessageAuthenticationCodeGeneration  : Key may generate message authentication codes (MAC).\n- MACV: MessageAuthenticationCodeVerification  : Key may verify message authentication codes (MAC).\n- SIGG: SignatureGeneration  : Key may generate digital signatures.\n- SUGV: SignatureVerification  : Key may verify digital signatures.\n- PINE: PINEncryption  : Key may encrypt personal identification numbers (PIN).\n- PIND: PINDecryption  : Key may decrypt personal identification numbers (PIN).\n- PINV: PINVerification  : Key may verify personal identification numbers (PIN).\n- KEYG: KeyGeneration  : Key may generate keys.\n- KEYI: KeyImport  : Key may import keys.\n- KEYX: KeyExport  : Key may export keys.\n- KEYD: KeyDerivation  : Key may derive keys.\n",
			"type": "string",
			"enum": [
				"ENCR",
				"DCPT",
				"DENC",
				"DDEC",
				"TRNI",
				"TRNX",
				"MACG",
				"MACV",
				"SIGG",
				"SUGV",
				"PINE",
				"PIND",
				"PINV",
				"KEYG",
				"KEYI",
				"KEYX",
				"KEYD"
			],
			"example": "ENCR"
		},
		"LanguageCode": {
			"description": "Specifies a language.\n",
			"type": "string",
			"example": "ENG"
		},
		"LocationCategory3Code": {
			"description": "Indicates the type of integration of the POI terminal in the sale environment.\n- INDR: Indoor  : Indoor terminal.\n- IPMP: InsidePump  : Terminal incorporated in the pump dispensing petrol.\n- MPOI: MultiplePOITerminal  : Multiple terminals linked to a unique sale terminal.\n- MPMP: MultiplePump  : Outdoor terminal serving several petrol pumps.\n- MSLE: MultipleSaleTerminal  : Terminal serving multiple sale terminals.\n- SSLE: SingleSaleTerminal  : Terminal linked to a unique sale terminal.\n- VNDG: VendingMachine  : Terminal integrated in a vending machine.\n",
			"type": "string",
			"enum": [
				"INDR",
				"IPMP",
				"MPOI",
				"MPMP",
				"MSLE",
				"SSLE",
				"VNDG"
			]
		},
		"LocationCategory4Code": {
			"description": "Indicates the type of integration of the POI terminal in the sale environment.\n- ABRD: Aboard  : Aboard is used when the sale is done in a vehicle (e.g a bus, train, ship, airplane,\r\ntaxi, etc).\n- NMDC: Nomadic  : Nomadic is used when the merchant is traveling to different locations (e.g fair or\r\nsport events, home delivery, food truck).\n- FIXD: PhysicalShop  : Fixed location, for example in a shop.\n- VIRT: VirtualShop  : Virtual Shop is used for any ecommerce solution.\n",
			"type": "string",
			"enum": [
				"ABRD",
				"NMDC",
				"FIXD",
				"VIRT"
			]
		},
		"LoyaltyAccount3": {
			"description": "Loyalty Account description.\n",
			"type": "object",
			"properties": {
				"Balance": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"Brand": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Currency": {
					"description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".\n",
					"$ref": "#/$defs/ActiveCurrencyCode"
				},
				"IdentificationType": {
					"description": "Type of account identification.\n- ACCT: AccountNumber  : Account identification.\n- BARC: BarCode  : Bar-code with a specific form of identification.\n- ISO2: ISOTrack2  : ISO Track 2 including identification.\n- PHON: PhoneNumber  : A phone number identifies the account on which the phone card is assigned.\n- CPAN: PrimaryAccountNumber  : Standard card identification (card number).\n- PRIV: PrivativeNumbering  : An identification set by a privative application.\n- UUID: UniversalUniqueIdentification  : A Universal Unique Identification code is set for identification.\n",
					"$ref": "#/$defs/CardIdentificationType1Code"
				},
				"LoyaltyIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"EntryMode": {
					"description": "Type of reading of the card data.\n- TAGC: Tag  : Tag reading capabilities (RFID, etc.).\n- PHYS: Physical  : Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.\n- BRCD: BarCode  : Bar code.\n- MGST: MagneticStripe  : Magnetic stripe.\n- CICC: ICC  : ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.\n- DFLE: AccountData  : Account data on file.\n- CTLS: ProximityReader  : Contactless proximity reader.\n- ECTL: EMVProximityReader  : Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).\n- CDFL: CardOnFile  : Card information are stored on a file.\n- SICC: SynchronousIntegratedCircuitCard  : Synchronous ICC - (Integrated Circuit Card) with contact.\n- UNKW: Unknown  : Unknown card reading capability.\n- QRCD: QRCode  : Quick response code.\n- OPTC: OpticalCode  : Optical coded reading capabilities (e.g. barcode, QR code, etc.)\n",
					"$ref": "#/$defs/CardDataReading8Code"
				},
				"OwnerName": {
					"description": "Specifies a character string with a maximum length of 45 characters.\n",
					"$ref": "#/$defs/Max45Text"
				},
				"Provider": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Unit": {
					"description": "Unit of a amount (for loyalty or account).\n- MONE: Monetary  : The amount is expressed in a monetary value in a currency.\n- POIN: Point  : The amount is expressed in point.\n",
					"$ref": "#/$defs/AmountUnit1Code"
				}
			},
			"required": [
				"LoyaltyIdentification"
			],
			"additionalProperties": false
		},
		"LoyaltyAccountRequest3": {
			"description": "Data related to a requested Loyalty program or account.\n",
			"type": "object",
			"properties": {
				"Account": {
					"description": "Loyalty Account description.\n",
					"$ref": "#/$defs/LoyaltyAccount3"
				},
				"CustomerOrder": {
					"description": "Customer order attached to a customer, recorded in the POI system.\n",
					"$ref": "#/$defs/CustomerOrder1"
				}
			},
			"additionalProperties": false
		},
		"LoyaltyAmount1": {
			"description": "Loyalty amount to apply to an Loyalty account.\n",
			"type": "object",
			"properties": {
				"Amount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"Currency": {
					"description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".\n",
					"$ref": "#/$defs/ActiveCurrencyCode"
				},
				"Unit": {
					"description": "Unit of a amount (for loyalty or account).\n- MONE: Monetary  : The amount is expressed in a monetary value in a currency.\n- POIN: Point  : The amount is expressed in point.\n",
					"$ref": "#/$defs/AmountUnit1Code"
				}
			},
			"required": [
				"Amount"
			],
			"additionalProperties": false
		},
		"LoyaltyHandling1Code": {
			"description": "Possible types of Loyalty processing.\n- ALLO: Allowed  : The loyalty is accepted, but the POI has not to require or ask a loyalty card. The loyalty is involved by the payment card (e.g. an hybrid or linked card). \n- DENY: Forbidden  : No loyalty card to read and loyalty transaction to process. \tAny attempt to enter a pure loyalty card is rejected.\n- PRCS: Processed  : The loyalty transaction is already processed, no loyalty card or loyalty transaction to process.\n- PROP: Proposed  : The loyalty is accepted, and the POI has to ask a loyalty card. If the Customer does not enter a loyalty card, no loyalty transaction is realised.\n- REQU: Required  : The loyalty is required, and the POI refuses the processing \tof the message request if the cardholder does not enter a loyalty card.\n",
			"type": "string",
			"enum": [
				"ALLO",
				"DENY",
				"PRCS",
				"PROP",
				"REQU"
			]
		},
		"LoyaltyRequest6": {
			"description": "Data to request a loyalty service. A loyalty request contents : the loyalty transaction request and the loyalty data if any.\n",
			"type": "object",
			"properties": {
				"CustomerOrder": {
					"description": "Customer order attached to a customer, recorded in the POI system.\n",
					"$ref": "#/$defs/CustomerOrder1"
				},
				"Data": {
					"description": "Data related to a Loyalty program or account.",
					"anyOf": [
						{
							"$ref": "#/$defs/LoyaltyRequestData3"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/LoyaltyRequestData3"
							}
						}
					]
				},
				"Transaction": {
					"description": "Data related to the loyalty transaction.\n",
					"$ref": "#/$defs/LoyaltyTransaction6"
				}
			},
			"required": [
				"Transaction"
			],
			"additionalProperties": false
		},
		"LoyaltyRequestData3": {
			"description": "Data linked to card loyalty during payment.\n",
			"type": "object",
			"properties": {
				"Account": {
					"description": "Loyalty Account description.\n",
					"$ref": "#/$defs/LoyaltyAccount3"
				},
				"Amount": {
					"description": "Loyalty amount to apply to an Loyalty account.\n",
					"$ref": "#/$defs/LoyaltyAmount1"
				},
				"CustomerOrder": {
					"description": "Customer order attached to a customer, recorded in the POI system.\n",
					"$ref": "#/$defs/CustomerOrder1"
				}
			},
			"additionalProperties": false
		},
		"LoyaltyTransaction6": {
			"description": "Data related to the loyalty transaction.\n",
			"type": "object",
			"properties": {
				"Currency": {
					"description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".\n",
					"$ref": "#/$defs/ActiveCurrencyCode"
				},
				"LoyaltyTransactionType": {
					"description": "Type of loyalty transaction.\n- AWRD: Award  : Direct or payment related award on a loyalty account. Award alone, award associated to a payment (may be with an additional award alone), award because of \ta payment resulting on rebates.\n- AWRR: AwardRefund  : Refund of a loyalty award transaction.\n- REBR: RebateRefund  : Refund of a loyalty rebate transaction.\n- REBA: Rebate  : Rebate on a total amount, sale item amount, or sale items.\n- REDE: Redemption  : Redemption on a loyalty account.\n- REDR: RedemptionRefund  : Refund of a loyalty redemption transaction.\n",
					"$ref": "#/$defs/LoyaltyTransactionType1Code"
				},
				"OriginalPOITransaction": {
					"description": "Data associated with the transaction for a potential currency conversion.\n",
					"$ref": "#/$defs/CardPaymentTransaction136"
				},
				"SaleItem": {
					"description": "Item purchased with the transaction.",
					"anyOf": [
						{
							"$ref": "#/$defs/Product6"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Product6"
							}
						}
					]
				},
				"SaleTransactionIdentification": {
					"description": "Identification of the transaction in an unambiguous way.\n",
					"$ref": "#/$defs/TransactionIdentifier1"
				},
				"TotalAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				}
			},
			"required": [
				"LoyaltyTransactionType"
			],
			"additionalProperties": false
		},
		"LoyaltyTransactionType1Code": {
			"description": "Type of loyalty transaction.\n- AWRD: Award  : Direct or payment related award on a loyalty account. Award alone, award associated to a payment (may be with an additional award alone), award because of \ta payment resulting on rebates.\n- AWRR: AwardRefund  : Refund of a loyalty award transaction.\n- REBR: RebateRefund  : Refund of a loyalty rebate transaction.\n- REBA: Rebate  : Rebate on a total amount, sale item amount, or sale items.\n- REDE: Redemption  : Redemption on a loyalty account.\n- REDR: RedemptionRefund  : Refund of a loyalty redemption transaction.\n",
			"type": "string",
			"enum": [
				"AWRD",
				"AWRR",
				"REBR",
				"REBA",
				"REDE",
				"REDR"
			]
		},
		"MandateRelatedInformation13": {
			"description": "Provides further details related to a direct debit mandate signed between the creditor and the debtor.\n",
			"type": "object",
			"properties": {
				"DateOfSignature": {
					"description": "A particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format. This representation is defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\n",
					"$ref": "#/$defs/ISODate"
				},
				"MandateIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"MandateImage": {
					"description": "Binary data of 2MB maximum.\n",
					"$ref": "#/$defs/Max2MBBinary"
				}
			},
			"required": [
				"MandateIdentification"
			],
			"additionalProperties": false
		},
		"Max10000Binary": {
			"description": "Specifies a binary string with a maximum length of 10000 binary bytes.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 10000
		},
		"Max100KBinary": {
			"description": "Binary data of 100K maximum.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 102400
		},
		"Max1025Text": {
			"description": "Specifies a character string with a maximum length of 1025 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 1025
		},
		"Max104Text": {
			"description": "Specifies a character string with a maximum length of 104 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 104
		},
		"Max10KBinary": {
			"description": "Binary data of 10K maximum.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 10240
		},
		"Max10Text": {
			"description": "Specifies a character string with a maximum length of 10 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 10
		},
		"Max11NumericText": {
			"description": "Specifies a numeric string with a maximum length of 11 digits.\n",
			"type": "string",
			"pattern": "^([0-9]{1,11})$"
		},
		"Max140Binary": {
			"description": "Specifies a binary string with a maximum length of 140 binary bytes.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 140
		},
		"Max140Text": {
			"description": "Specifies a character string with a maximum length of 140 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 140
		},
		"Max15NumericText": {
			"description": "Specifies a numeric string with a maximum length of 15 digits.\n",
			"type": "string",
			"pattern": "^([0-9]{1,15})$"
		},
		"Max16Text": {
			"description": "Specifies a character string with a maximum length of 16 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 16
		},
		"Max19NumericText": {
			"description": "Specifies a numeric string with a maximum length of 19 digits.\n",
			"type": "string",
			"pattern": "^([0-9]{1,19})$"
		},
		"Max20000Text": {
			"description": "Specifies a character string with a maximum length of 20, 000 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 20000
		},
		"Max256Text": {
			"description": "Specifies a character string with a maximum length of 256 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 256
		},
		"Max2KBinary": {
			"description": "Binary data of 2K maximum.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 2048
		},
		"Max2MBBinary": {
			"description": "Binary data of 2MB maximum.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 2097152
		},
		"Max2NumericText": {
			"description": "Specifies a numeric string with a maximum length of 2 digits.\n",
			"type": "string",
			"pattern": "^([0-9]{1,2})$"
		},
		"Max3000Binary": {
			"description": "Specifies a binary string with a maximum length of 3000 binary bytes.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 3000
		},
		"Max30Text": {
			"description": "Specifies a character string with a maximum length of 30 characters.\n",
			"type": "string",
			"maxLength": 30
		},
		"Max350Text": {
			"description": "Specifies a character string with a maximum length of 350 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 350
		},
		"Max35Binary": {
			"description": "Specifies a binary string with a maximum length of 35 binary bytes.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 35
		},
		"Max35NumericText": {
			"description": "Specifies a numeric string with a maximum length of 35 digits.\n",
			"type": "string",
			"pattern": "^([0-9]{1,35})$"
		},
		"Max35Text": {
			"description": "Specifies a character string with a maximum length of 35 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 35
		},
		"Max37Text": {
			"description": "Specifies a character string with a maximum length of 37 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 37
		},
		"Max3NumericText": {
			"description": "Specifies a numeric string with a maximum length of 3 digits.\n",
			"type": "string",
			"pattern": "^([0-9]{1,3})$"
		},
		"Max3Text": {
			"description": "Specifies a character string with a maximum length of 3 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 3
		},
		"Max45Text": {
			"description": "Specifies a character string with a maximum length of 45 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 45
		},
		"Max5000Binary": {
			"description": "Specifies a binary string with a maximum length of 5000 binary bytes.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 5000
		},
		"Max500Binary": {
			"description": "Specifies a binary string with a maximum length of 500 binary bytes.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 500
		},
		"Max500Text": {
			"description": "Specifies a character string with a maximum length of 500 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 500
		},
		"Max5NumericText": {
			"description": "Specifies a numeric string with a maximum length of 5 digits.\n",
			"type": "string",
			"pattern": "^([0-9]{1,5})$"
		},
		"Max6Text": {
			"description": "Specifies a character string with a maximum length of 6 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 6
		},
		"Max70Text": {
			"description": "Specifies a character string with a maximum length of 70characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 70
		},
		"Max76Text": {
			"description": "Specifies a character string with a maximum length of 76 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 76
		},
		"Max8000Text": {
			"description": "Specifies a character string with a maximum length of 8000 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 8000
		},
		"Max8Text": {
			"description": "Specifies a character string with a maximum length of 8 characters.\n",
			"type": "string",
			"minLength": 1,
			"maxLength": 8
		},
		"MemoryCharacteristics1": {
			"description": "Characteristics of a hardware memory module.\n",
			"type": "object",
			"properties": {
				"FreeSize": {
					"description": "Number of objects represented as a decimal number, for example 0.75 or 45.6.\n",
					"$ref": "#/$defs/DecimalNumber"
				},
				"Identification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"TotalSize": {
					"description": "Number of objects represented as a decimal number, for example 0.75 or 45.6.\n",
					"$ref": "#/$defs/DecimalNumber"
				},
				"Unit": {
					"description": "Unit of the memory size.\n- BYTE: Byte  : Byte.\n- EXAB: ExaByte  : Exa byte.\n- GIGA: GigaByte  : Giga byte.\n- KILO: KiloByte  : Kilo byte.\n- MEGA: MegaByte  : Mega byte.\n- PETA: PetaByte  : Peta byte.\n- TERA: TeraByte  : Tera byte.\n",
					"$ref": "#/$defs/MemoryUnit1Code"
				}
			},
			"required": [
				"FreeSize",
				"Identification",
				"TotalSize",
				"Unit"
			],
			"additionalProperties": false
		},
		"MemoryUnit1Code": {
			"description": "Unit of the memory size.\n- BYTE: Byte  : Byte.\n- EXAB: ExaByte  : Exa byte.\n- GIGA: GigaByte  : Giga byte.\n- KILO: KiloByte  : Kilo byte.\n- MEGA: MegaByte  : Mega byte.\n- PETA: PetaByte  : Peta byte.\n- TERA: TeraByte  : Tera byte.\n",
			"type": "string",
			"enum": [
				"BYTE",
				"EXAB",
				"GIGA",
				"KILO",
				"MEGA",
				"PETA",
				"TERA"
			],
			"example": "BYTE"
		},
		"MerchantToken2": {
			"description": "Merchant token information.\n",
			"type": "object",
			"properties": {
				"Token": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"TokenAssuranceData": {
					"description": "Specifies a binary string with a maximum length of 500 binary bytes.\n",
					"$ref": "#/$defs/Max500Binary"
				},
				"TokenAssuranceLevel": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				},
				"TokenAssuranceMethod": {
					"description": "Specifies a numeric string with a maximum length of 2 digits.\n",
					"$ref": "#/$defs/Max2NumericText"
				},
				"TokenCharacteristic": {
					"description": "Additional payment token information.",
					"anyOf": [
						{
							"$ref": "#/$defs/Max35Text"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Max35Text"
							}
						}
					]
				},
				"TokenInitiatedIndicator": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"TokenRequestor": {
					"description": "Identifier of a token provider requestor.\n",
					"$ref": "#/$defs/PaymentTokenIdentifiers1"
				},
				"TokenExpiryDate": {
					"description": "Specifies a character string with a maximum length of 10 characters.\n",
					"$ref": "#/$defs/Max10Text"
				}
			},
			"additionalProperties": false
		},
		"Min2Max3AlphaText": {
			"description": "Specifies an alpha string with a minimum length of 2 characters and a maximum length of 3 characters.\n",
			"type": "string",
			"pattern": "^([A-Za-z]{2,3})$"
		},
		"Min2Max3NumericText": {
			"description": "Specifies a numeric string with a minimum length of 2 digits, and a maximum length of 3 digits.\n",
			"type": "string",
			"pattern": "^([0-9]{2,3})$"
		},
		"Min3Max4Text": {
			"description": "Specifies a character string with a minimum length of 3 characters, and a maximum length of 4 characters.\n",
			"type": "string",
			"minLength": 3,
			"maxLength": 4
		},
		"Min8Max28NumericText": {
			"description": "Specifies a numeric string with a minimum length of 8 digits, and a maximum length of 28 digits.\n",
			"type": "string",
			"pattern": "^([0-9]{8,28})$"
		},
		"MobileData6": {
			"description": "Data related to the mobile of stakeholder.\n",
			"type": "object",
			"properties": {
				"Geolocation": {
					"description": "Geographic location specified by geographic or UTM coordinates.\n",
					"$ref": "#/$defs/Geolocation1"
				},
				"MobileCountryCode": {
					"description": "Specifies an alpha string with a minimum length of 2 characters and a maximum length of 3 characters.\n",
					"$ref": "#/$defs/Min2Max3AlphaText"
				},
				"MobileMaskedMSISDN": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"MobileNetworkCode": {
					"description": "Specifies a numeric string with a minimum length of 2 digits, and a maximum length of 3 digits.\n",
					"$ref": "#/$defs/Min2Max3NumericText"
				},
				"ProtectedMobileData": {
					"description": "General cryptographic message syntax (CMS) containing encrypted data.\n",
					"$ref": "#/$defs/ContentInformationType40"
				},
				"SensitiveMobileData": {
					"description": "Sensitive information related to the mobile phone.\n",
					"$ref": "#/$defs/SensitiveMobileData1"
				}
			},
			"additionalProperties": false
		},
		"NameAndAddress6": {
			"description": "Name and address of an institution.\n",
			"type": "object",
			"properties": {
				"Address": {
					"description": "Address of a party expressed in a formal structure, usually according to the country's postal services specifications.\n",
					"$ref": "#/$defs/PostalAddress2"
				},
				"Name": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				}
			},
			"required": [
				"Address",
				"Name"
			],
			"additionalProperties": false
		},
		"NetworkParameters7": {
			"description": "Parameters to communicate with a host.\n",
			"type": "object",
			"properties": {
				"AccessCode": {
					"description": "Specifies a binary string with a maximum length of 35 binary bytes.\n",
					"$ref": "#/$defs/Max35Binary"
				},
				"Address": {
					"description": "Network addresses of the host.",
					"anyOf": [
						{
							"$ref": "#/$defs/NetworkParameters9"
						},
						{
							"type": "array",
							"minItems": 1,
							"items": {
								"$ref": "#/$defs/NetworkParameters9"
							}
						}
					]
				},
				"ClientCertificate": {
					"description": "X.509 Certificate required to authenticate the client.",
					"anyOf": [
						{
							"$ref": "#/$defs/Max10KBinary"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Max10KBinary"
							}
						}
					]
				},
				"SecurityProfile": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"ServerCertificate": {
					"description": "X.509 Certificate required to authenticate the server.",
					"anyOf": [
						{
							"$ref": "#/$defs/Max10KBinary"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Max10KBinary"
							}
						}
					]
				},
				"ServerCertificateIdentifier": {
					"description": "Identification of the X.509 Certificates required to authenticate the server, for instance a digest of the certificate.",
					"anyOf": [
						{
							"$ref": "#/$defs/Max140Binary"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Max140Binary"
							}
						}
					]
				},
				"UserName": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"Address"
			],
			"additionalProperties": false
		},
		"NetworkParameters9": {
			"description": "Parameters to communicate with a host.\n",
			"type": "object",
			"properties": {
				"AddressValue": {
					"description": "Specifies a character string with a maximum length of 500 characters.\n",
					"$ref": "#/$defs/Max500Text"
				},
				"NetworkType": {
					"description": "Type of communication network.\n- IPNW: InternetProtocol  : Protocol of an IP network.\n- PSTN: PublicTelephone  : Protocol of a Public Switched Telephone Network (PSTN).\n",
					"$ref": "#/$defs/NetworkType1Code"
				}
			},
			"required": [
				"AddressValue",
				"NetworkType"
			],
			"additionalProperties": false
		},
		"NetworkType1Code": {
			"description": "Type of communication network.\n- IPNW: InternetProtocol  : Protocol of an IP network.\n- PSTN: PublicTelephone  : Protocol of a Public Switched Telephone Network (PSTN).\n",
			"type": "string",
			"enum": [
				"IPNW",
				"PSTN"
			]
		},
		"Number": {
			"description": "Number of objects represented as an integer.\n",
			"type": "number",
			"example": "123456789012345678"
		},
		"OnLineCapability1Code": {
			"description": "On-line and off-line capabilities of the POI (Point Of Interaction).\n- OFLN: OffLine  : Off-line only capable.\n- ONLN: OnLine  : On-line only capable.\n- SMON: SemiOffLine  : Off-line capable with possible on-line requests to the acquirer.\n",
			"type": "string",
			"enum": [
				"OFLN",
				"ONLN",
				"SMON"
			],
			"example": "OFLN"
		},
		"OnLinePIN11": {
			"description": "Encrypted personal identification number (PIN) and related information.\n",
			"type": "object",
			"properties": {
				"AdditionalInput": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"EncryptedPINBlock": {
					"description": "General cryptographic message syntax (CMS) containing encrypted data.\n",
					"$ref": "#/$defs/ContentInformationType40"
				},
				"PINFormat": {
					"description": "PIN (Personal Identification Number) format used before encryption.\n- ISO0: ISO0  : PIN diversified with the card account number, conforming to the standard ISO 9564-2.\n- ISO1: ISO1  : PIN completed with random padding characters, conforming to the standard ISO 9564-2.\n- ISO2: ISO2  : PIN without diversification characters, conforming to the standard ISO 9564-2.\n- ISO3: ISO3  : PIN diversified with the card account number and random characters, conforming to the standard ISO 9564-2.\n- ISO4: ISO4  : PIN format used with AES encryption, conforming to the new ISO SC2 format.\n- ISO5: ISO5  : Alternative PIN format used with AES encryption, conforming to the new ISO SC2 format.\n",
					"$ref": "#/$defs/PINFormat3Code"
				}
			},
			"required": [
				"EncryptedPINBlock",
				"PINFormat"
			],
			"additionalProperties": false
		},
		"OnLineReason2Code": {
			"description": "Reason to process an online authorisation.\n- RNDM: RandomSelection  : Transaction random selection to go online.\n- ICCF: ICCForced  : Payment application in the Integrated Circuit Card forces to go on-line.\n- MERF: MerchantForced  : On line forced by card acceptor.\n- TRMF: TerminalForced  : Terminal random selection to go online.\n- ISSF: IssuerForced  : On line forced by card issuer.\n- FRLT: FloorLimit  : Over floor limit.\n- EXFL: ExceptionFile  : Card appears on terminal exception file.\n- TAMT: TotalAmount  : Total amount of purchases per cardholder and per application above floor limit.\n- CBIN: ControlledBIN  : Bank Identification Number under control.\n- UBIN: UnknownBIN  : Unknown Bank Identification Number.\n- CPAN: ControlledPAN  : Primary account number (card number) under control.\n- FLOW: FlowControl  : Flow control.\n- CRCY: UnavailableCurrency  : Unknown currency code or foreign currency.\n- IFPR: IssuerForcedPINRequest  : Request Cardholder Authentication througth PIN insertion\n",
			"type": "string",
			"enum": [
				"RNDM",
				"ICCF",
				"MERF",
				"TRMF",
				"ISSF",
				"FRLT",
				"EXFL",
				"TAMT",
				"CBIN",
				"UBIN",
				"CPAN",
				"FLOW",
				"CRCY",
				"IFPR"
			],
			"example": "RNDM"
		},
		"Organisation26": {
			"description": "Merchant performing the transaction.\n",
			"type": "object",
			"properties": {
				"Address": {
					"description": "Specifies a character string with a maximum length of 140 characters.\n",
					"$ref": "#/$defs/Max140Text"
				},
				"CommonName": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"CountryCode": {
					"description": "Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Numeric-3 code). The code is checked against the list of country names coded with three digit characters, defined in the standard.\n",
					"$ref": "#/$defs/ISO3NumericCountryCode"
				},
				"MerchantCategoryCode": {
					"description": "Specifies a character string with a minimum length of 3 characters, and a maximum length of 4 characters.\n",
					"$ref": "#/$defs/Min3Max4Text"
				},
				"RegisteredIdentifier": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"CommonName",
				"CountryCode",
				"MerchantCategoryCode",
				"RegisteredIdentifier"
			],
			"additionalProperties": false
		},
		"Organisation41": {
			"description": "Merchant performing the transaction.\n",
			"type": "object",
			"properties": {
				"CommonName": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"Identification": {
					"description": "Identification of an entity.\n",
					"$ref": "#/$defs/GenericIdentification32"
				},
				"LocationAndContact": {
					"description": "Communication information.\n",
					"$ref": "#/$defs/CommunicationAddress9"
				},
				"LocationCategory": {
					"description": "Indicates the type of integration of the POI terminal in the sale environment.\n- ABRD: Aboard  : Aboard is used when the sale is done in a vehicle (e.g a bus, train, ship, airplane,\r\ntaxi, etc).\n- NMDC: Nomadic  : Nomadic is used when the merchant is traveling to different locations (e.g fair or\r\nsport events, home delivery, food truck).\n- FIXD: PhysicalShop  : Fixed location, for example in a shop.\n- VIRT: VirtualShop  : Virtual Shop is used for any ecommerce solution.\n",
					"$ref": "#/$defs/LocationCategory4Code"
				},
				"SchemeData": {
					"description": "Specifies a character string with a maximum length of 140 characters.\n",
					"$ref": "#/$defs/Max140Text"
				}
			},
			"additionalProperties": false
		},
		"OriginalAmountDetails1": {
			"description": "The OriginalAmountDetails contains all amount information in the acceptor currency code necessary to manage currency conversion in the cardholder currency code.\n",
			"type": "object",
			"properties": {
				"ActualAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"MaximumAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"MinimumAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				}
			},
			"additionalProperties": false
		},
		"OriginatorInformation1": {
			"description": "Provides information about the originator. It is present only if required by the key management algorithm.\n",
			"type": "object",
			"properties": {
				"Certificate": {
					"description": "It may contain originator certificates associated with several different key management algorithms.",
					"anyOf": [
						{
							"$ref": "#/$defs/Max5000Binary"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Max5000Binary"
							}
						}
					]
				}
			},
			"additionalProperties": false
		},
		"OutputBarcode2": {
			"description": "Barcode content to display or print.\n",
			"type": "object",
			"properties": {
				"BarcodeType": {
					"description": "Type of BarCode coding.\n- COQR: BarcodeEncodedAs2DQRCode  : Barcode encoded according to the 2Dimensions Quick Response Code Standard.\n- C128: BarcodeEncodedAsCode128  : Barcode encoded according to the Code 128 standard.\n- C025: BarcodeEncodedAsCode25  : Barcode encoded according to the Code 25 standard.\n- C039: BarcodeEncodedAsCode39  : Barcode encoded according to the Code 39 standard.\n- EA13: BarcodeEncodedAsEA13  : Barcode encoded according to the EAN13 standard.\n- EAN8: BarcodeEncodedAsEAN8  : Barcode encoded according to the EAN8 standard.\n- P417: BarcodeEncodedAsPDF417  : Barcode encoded according to the PDF417 standard.\n- UPCA: BarcodeEncodedAsUPCA  : Barcode encoded according to the UPCA standard.\n",
					"$ref": "#/$defs/BarcodeType1Code"
				},
				"BarcodeValue": {
					"description": "Specifies a character string with a maximum length of 8000 characters.\n",
					"$ref": "#/$defs/Max8000Text"
				},
				"QRCodeBinaryValue": {
					"description": "Specifies a binary string with a maximum length of 3000 binary bytes.\n",
					"$ref": "#/$defs/Max3000Binary"
				},
				"QRCodeErrorCorrection": {
					"description": "Error Correction mode of Quick Response Code.\n- M015: ErrorCorrection15Percent  : Reed-Solomon error correction 15%\n- Q025: ErrorCorrection25Percent  : Reed-Solomon error correction 25%\n- H030: ErrorCorrection30Percent  : Reed-Solomon error correction 30%\n- L007: ErrorCorrection7Percent  : Reed-Solomon error correction  7%\n",
					"$ref": "#/$defs/QRCodeErrorCorrection1Code"
				},
				"QRCodeEncodingMode": {
					"description": "Encoding Mode of Quick Response Code.\n- ALFA: Alphanumeric  : Alphanumeric value provided in Barcode field.\n- BINA: Binary  : Binary value provided in Quick Response Code Binary Value.\n- KANJ: Kanji  : Kanji value provided in Quick Response Code Binary Value.\n- NUME: Numeric  : Numeric value provided in Barcode field.\n",
					"$ref": "#/$defs/QRCodeEncodingMode1Code"
				},
				"QRCodeVersion": {
					"description": "Specifies a character string with a maximum length of 16 characters.\n",
					"$ref": "#/$defs/Max16Text"
				}
			},
			"required": [
				"BarcodeType"
			],
			"additionalProperties": false
		},
		"OutputFormat1Code": {
			"description": "Message format.\n- MREF: MessageReference  : Predefined configured messages, identified by a reference.\n- TEXT: SimpleText  : Text without format attributes.\n- HTML: XHTML  : XHTML document which includes a subset of the XHTML output tag.\n",
			"type": "string",
			"enum": [
				"MREF",
				"TEXT",
				"HTML"
			]
		},
		"OutputFormat3Code": {
			"description": "Type of output format.\n- BARC: Barcode  : Barcode to output in several possible format.\n- MENT: MenuEntry  : A text to display as a menu before requesting an input.\n- MREF: MessageReference  : Predefined configured messages, identified by a reference.\n- SREF: ScreenReference  : Screen to display identified by a reference.\n- TEXT: SimpleText  : Text without format attributes.\n- HTML: XHTML  : XHTML document which includes a subset of the XHTML output tag.\n",
			"type": "string",
			"enum": [
				"BARC",
				"MENT",
				"MREF",
				"SREF",
				"TEXT",
				"HTML"
			]
		},
		"PINFormat3Code": {
			"description": "PIN (Personal Identification Number) format used before encryption.\n- ISO0: ISO0  : PIN diversified with the card account number, conforming to the standard ISO 9564-2.\n- ISO1: ISO1  : PIN completed with random padding characters, conforming to the standard ISO 9564-2.\n- ISO2: ISO2  : PIN without diversification characters, conforming to the standard ISO 9564-2.\n- ISO3: ISO3  : PIN diversified with the card account number and random characters, conforming to the standard ISO 9564-2.\n- ISO4: ISO4  : PIN format used with AES encryption, conforming to the new ISO SC2 format.\n- ISO5: ISO5  : Alternative PIN format used with AES encryption, conforming to the new ISO SC2 format.\n",
			"type": "string",
			"enum": [
				"ISO0",
				"ISO1",
				"ISO2",
				"ISO3",
				"ISO4",
				"ISO5"
			],
			"example": "ISO0"
		},
		"POICommunicationType2Code": {
			"description": "Low level communication of the hardware or software component toward another component or an external entity.\n- BLTH: Bluetooth  : Communication with a host using Bluetooth.\n- ETHR: Ethernet  : Ethernet port to communicate.\n- GPRS: GPRS  : Communication with a host using GPRS.\n- GSMF: GSM  : Communication with a host using GSM.\n- PSTN: PSTN  : Communication with a host using Public Switching Telephone Network.\n- RS23: RS232  : Serial port to communicate.\n- USBD: USBDevice  : Communication with a USB stick or any USB device.\n- USBH: USBHost  : Communication with a host from an USB port.\n- WIFI: Wifi  : Wifi communication with another component.\n- WT2G: WirelessTechnology2G  : Includes all communication technologies which can be qualified as being part of the 2G technology (e.g EDGE or PDC).\n- WT3G: WirelessTechnology3G  : Includes all communication technologies which can be qualified as being part of the 3G technology.\n- WT4G: WirelessTechnology4G  : Includes all communication technologies which can be qualified as being part of the 4G technology.\n- WT5G: WirelessTechnology5G  : Includes all communication technologies which can be qualified as being part of the 5G technology.\n",
			"type": "string",
			"enum": [
				"BLTH",
				"ETHR",
				"GPRS",
				"GSMF",
				"PSTN",
				"RS23",
				"USBD",
				"USBH",
				"WIFI",
				"WT2G",
				"WT3G",
				"WT4G",
				"WT5G"
			],
			"example": "BLTH"
		},
		"POIComponentAssessment1Code": {
			"description": "Type of assessment of a POI component (Point of Interaction).\n- APPL: Approval  : Approval number delivered by an approval centre.\n- CERT: Certification  : Certification number delivered by a certification body.\n- EVAL: Evaluation  : Evaluation by a lab or a tool.\n",
			"type": "string",
			"enum": [
				"APPL",
				"CERT",
				"EVAL"
			],
			"example": "APPL"
		},
		"POIComponentStatus1Code": {
			"description": "Status of a component belonging to a POI Terminal (Point of Interaction).\n- WAIT: WaitingActivation  : Component not yet activated.\n- OUTD: OutOfOrder  : Component not working properly.\n- OPER: InOperation  : Component activated and in operation.\n- DACT: Deactivated  : Component has been deactivated.\n",
			"type": "string",
			"enum": [
				"WAIT",
				"OUTD",
				"OPER",
				"DACT"
			],
			"example": "WAIT"
		},
		"POIComponentType6Code": {
			"description": "Type of component belonging to a POI (Point of Interaction) Terminal.\n- AQPP: AcquirerProtocolParameters  : Parameters for acquirer interface of the point of interaction, including acquirer host configuration parameters.\n- APPR: ApplicationParameters  : Parameters of a payment application running on the point of interaction.\n- TLPR: TerminalParameters  : Manufacturer configuration parameters of the point of interaction.\n- SCPR: SecurityParameters  : Security parameters of the point of interaction.\n- SERV: Server  : Payment server of a point of interaction system.\n- TERM: Terminal  : Payment terminal point of interaction.\n- DVCE: Device  : Device sub-component of a component of the point of interaction.\n- SECM: SecureModule  : Security module.\n- APLI: PaymentApplication  : Payment application software.\n- EMVK: EMVKernel  : EMV application kernel (EMV is the chip card specifications initially defined by Eurocard, Mastercard and Visa).\n- EMVO: EMVLevel1  : EMV physical interface (EMV is the chip card specifications initially defined by Eurocard, Mastercard and Visa).\n- MDWR: Middleware  : Software module of the point of interaction.\n- DRVR: Driver  : Driver module of the point of interaction.\n- OPST: OperatingSystem  : Software that manages hardware to provide common services to the applications.\n- MRPR: MerchantParameters  : Merchant configuration parameters for the point of interaction (POI).\n- CRTF: CertificateParameters  : Certificate provided by a terminal manager.\n- TMSP: TMSProtocolParameters  : Configuration parameters for the TMS protocol.\n- SACP: SaleComponent  : Component of the Sale system.\n- SAPR: SaleToPOIProtocolParameters  : Parameters related to the Sale to POI protocol.\n- LOGF: LogFile  : Any repository used for recording log traces.\n- MDFL: MediaFile  : Media file managed by an application of the POI.\n- SOFT: Soft  : Payment or other software application.\n- CONF: ConfigurationFile  : Configuration file relevant for the POI.\n- RPFL: ReportFile  : Report file generated by the POI.\n",
			"type": "string",
			"enum": [
				"AQPP",
				"APPR",
				"TLPR",
				"SCPR",
				"SERV",
				"TERM",
				"DVCE",
				"SECM",
				"APLI",
				"EMVK",
				"EMVO",
				"MDWR",
				"DRVR",
				"OPST",
				"MRPR",
				"CRTF",
				"TMSP",
				"SACP",
				"SAPR",
				"LOGF",
				"MDFL",
				"SOFT",
				"CONF",
				"RPFL"
			],
			"example": "AQPP"
		},
		"PackageType5": {
			"description": "Chunk of a software package.\n",
			"type": "object",
			"properties": {
				"OffsetEnd": {
					"description": "Number of objects represented as a positive integer.\n",
					"$ref": "#/$defs/PositiveNumber"
				},
				"OffsetStart": {
					"description": "Number of objects represented as a positive integer.\n",
					"$ref": "#/$defs/PositiveNumber"
				},
				"PackageBlock": {
					"description": "Consecutive slices of the full software package identified through PackageIdentification starting with first slice at the place identified with OffsetStart and ending with the last slice at the previous place identified with OffsetEnd.",
					"anyOf": [
						{
							"$ref": "#/$defs/ExternallyDefinedData5"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/ExternallyDefinedData5"
							}
						}
					]
				},
				"PackageIdentification": {
					"description": "Identification of an entity.\n",
					"$ref": "#/$defs/GenericIdentification176"
				},
				"PackageLength": {
					"description": "Number of objects represented as a positive integer.\n",
					"$ref": "#/$defs/PositiveNumber"
				}
			},
			"additionalProperties": false
		},
		"Parameter12": {
			"description": "Parameters associated to a cryptographic encryption algorithm.\n",
			"type": "object",
			"properties": {
				"BytePadding": {
					"description": "Byte padding for a cypher block chaining mode encryption, if the padding is not implicit.\n- LNGT: LengthPadding  : Message to encrypt is completed by a byte value containing the total number of added bytes.\n- NUL8: Null80Padding  : Message to encrypt is completed by one bit of value 1, followed by null bits until the encryption block length is reached.\n- NULG: NullLengthPadding  : Message to encrypt is completed by null byte values, the last byte containing the total number of added bytes.\n- NULL: NullPadding  : Message to encrypt is completed by null bytes.\n- RAND: RandomPadding  : Message to encrypt is completed by random value, the last byte containing the total number of added bytes.\n",
					"$ref": "#/$defs/BytePadding1Code"
				},
				"InitialisationVector": {
					"description": "Specifies a binary string with a maximum length of 500 binary bytes.\n",
					"$ref": "#/$defs/Max500Binary"
				},
				"EncryptionFormat": {
					"description": "Format of data before encryption, if the format is not plaintext or implicit.\n- TR31: TR31  : Format of a cryptographic key specified by the ANSI X9 TR-31 standard.\n- TR34: TR34  : Format of a cryptographic key specified by the ANSI X9 TR-34 standard.\n- I238: ISO20038KeyWrap  : Format of a cryptographic key specified by the ISO20038 standard.\n",
					"$ref": "#/$defs/EncryptionFormat2Code"
				}
			},
			"additionalProperties": false
		},
		"Parameter16": {
			"description": "Parameters of the RSASSA-PSS digital signature algorithm (RSA signature algorithm with appendix: Probabilistic Signature Scheme).\n",
			"type": "object",
			"properties": {
				"DigestAlgorithm": {
					"description": "Identification of a digest algorithm.\n- HS25: SHA256  : Message digest algorithm SHA-256 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha256).\n- HS38: SHA384  : Message digest algorithm SHA-384 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha384).\n- HS51: SHA512  : Message digest algorithm SHA-512 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha512).\n- HS01: SHA1  : The DEPRECATED Message digest algorithm SHA-1 as defined in FIPS 180-1 - (ASN.1 Object Identifier: id-sha1).\n- SH31: SHA3-224  : Message digest algorithm SHA3-224 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-224).\n- SH32: SHA3-256  : Message digest algorithm SHA3-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-256).\n- SH33: SHA3-384  : Message digest algorithm SHA3-384 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-384).\n- SH35: SHA3-512  : Message digest algorithm SHA3-512 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-512).\n- SHK1: SHAKE128  : Message digest algorithm SHAKE-128 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake128).\n- SHK2: SHAKE256  : Message digest algorithm SHAKE-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake256).\n- SMS3: SM3  : ShangMi 3 hash function as defined by ISO/IEC 10118-3:2018.\n",
					"$ref": "#/$defs/Algorithm26Code"
				},
				"MaskGeneratorAlgorithm": {
					"description": "Mask generator function cryptographic algorithm and parameters.\n",
					"$ref": "#/$defs/AlgorithmIdentification34"
				},
				"OIDCurveName": {
					"description": "Specifies a character string with a maximum length of 140 characters.\n",
					"$ref": "#/$defs/Max140Text"
				},
				"SaltLength": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				},
				"TrailerField": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				}
			},
			"additionalProperties": false
		},
		"Parameter17": {
			"description": "Parameters of the asymmetric encryption algorithm.\n",
			"type": "object",
			"properties": {
				"DigestAlgorithm": {
					"description": "Identification of a digest algorithm.\n- HS25: SHA256  : Message digest algorithm SHA-256 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha256).\n- HS38: SHA384  : Message digest algorithm SHA-384 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha384).\n- HS51: SHA512  : Message digest algorithm SHA-512 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha512).\n- HS01: SHA1  : The DEPRECATED Message digest algorithm SHA-1 as defined in FIPS 180-1 - (ASN.1 Object Identifier: id-sha1).\n- SH31: SHA3-224  : Message digest algorithm SHA3-224 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-224).\n- SH32: SHA3-256  : Message digest algorithm SHA3-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-256).\n- SH33: SHA3-384  : Message digest algorithm SHA3-384 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-384).\n- SH35: SHA3-512  : Message digest algorithm SHA3-512 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-512).\n- SHK1: SHAKE128  : Message digest algorithm SHAKE-128 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake128).\n- SHK2: SHAKE256  : Message digest algorithm SHAKE-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake256).\n- SMS3: SM3  : ShangMi 3 hash function as defined by ISO/IEC 10118-3:2018.\n",
					"$ref": "#/$defs/Algorithm26Code"
				},
				"MaskGeneratorAlgorithm": {
					"description": "Mask generator function cryptographic algorithm and parameters.\n",
					"$ref": "#/$defs/AlgorithmIdentification34"
				},
				"EncryptionFormat": {
					"description": "Format of data before encryption, if the format is not plaintext or implicit.\n- TR31: TR31  : Format of a cryptographic key specified by the ANSI X9 TR-31 standard.\n- TR34: TR34  : Format of a cryptographic key specified by the ANSI X9 TR-34 standard.\n- I238: ISO20038KeyWrap  : Format of a cryptographic key specified by the ISO20038 standard.\n",
					"$ref": "#/$defs/EncryptionFormat2Code"
				}
			},
			"additionalProperties": false
		},
		"Parameter18": {
			"description": "Parameters associated to a mask generator cryptographic function.\n",
			"type": "object",
			"properties": {
				"DigestAlgorithm": {
					"description": "Identification of a digest algorithm.\n- HS25: SHA256  : Message digest algorithm SHA-256 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha256).\n- HS38: SHA384  : Message digest algorithm SHA-384 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha384).\n- HS51: SHA512  : Message digest algorithm SHA-512 as defined in FIPS 180-1 and 2 - (ASN.1 Object Identifier: id-sha512).\n- HS01: SHA1  : The DEPRECATED Message digest algorithm SHA-1 as defined in FIPS 180-1 - (ASN.1 Object Identifier: id-sha1).\n- SH31: SHA3-224  : Message digest algorithm SHA3-224 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-224).\n- SH32: SHA3-256  : Message digest algorithm SHA3-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-256).\n- SH33: SHA3-384  : Message digest algorithm SHA3-384 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-384).\n- SH35: SHA3-512  : Message digest algorithm SHA3-512 as defined in FIPS 202 - (ASN.1 Object Identifier: id-sha3-512).\n- SHK1: SHAKE128  : Message digest algorithm SHAKE-128 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake128).\n- SHK2: SHAKE256  : Message digest algorithm SHAKE-256 as defined in FIPS 202 - (ASN.1 Object Identifier: id-shake256).\n- SMS3: SM3  : ShangMi 3 hash function as defined by ISO/IEC 10118-3:2018.\n",
					"$ref": "#/$defs/Algorithm26Code"
				}
			},
			"additionalProperties": false
		},
		"Parameter7": {
			"description": "Parameters associated to the MAC algorithm.\n",
			"type": "object",
			"properties": {
				"BytePadding": {
					"description": "Byte padding for a cypher block chaining mode encryption, if the padding is not implicit.\n- LNGT: LengthPadding  : Message to encrypt is completed by a byte value containing the total number of added bytes.\n- NUL8: Null80Padding  : Message to encrypt is completed by one bit of value 1, followed by null bits until the encryption block length is reached.\n- NULG: NullLengthPadding  : Message to encrypt is completed by null byte values, the last byte containing the total number of added bytes.\n- NULL: NullPadding  : Message to encrypt is completed by null bytes.\n- RAND: RandomPadding  : Message to encrypt is completed by random value, the last byte containing the total number of added bytes.\n",
					"$ref": "#/$defs/BytePadding1Code"
				},
				"InitialisationVector": {
					"description": "Specifies a binary string with a maximum length of 500 binary bytes.\n",
					"$ref": "#/$defs/Max500Binary"
				}
			},
			"additionalProperties": false
		},
		"PartyIdentification178Choice": {
			"description": "Identification of a party.\n",
			"type": "object",
			"properties": {
				"AnyBIC": {
					"description": "Code allocated to a financial or non-financial institution by the ISO 9362 Registration Authority, as described in ISO 9362: 2014 - \"Banking - Banking telecommunication messages - Business identifier code (BIC)\".\n",
					"$ref": "#/$defs/AnyBICDec2014Identifier"
				},
				"NameAndAddress": {
					"description": "Name and address of an institution.\n",
					"$ref": "#/$defs/NameAndAddress6"
				},
				"ProprietaryIdentification": {
					"description": "Identification using a proprietary scheme.\n",
					"$ref": "#/$defs/GenericIdentification36"
				}
			},
			"additionalProperties": false
		},
		"PartyType14Code": {
			"description": "Identification of the type of entity involved in a transaction.\n- OPOI: OriginatingPOI  : Point Of Interaction initiating the card payment transaction.\n- MERC: Merchant  : Merchant providing goods and service in the card payment transaction.\n- ACCP: Acceptor  : Card acceptor, party accepting the card and presenting transaction data to the acquirer.\n- ITAG: IntermediaryAgent  : Party acting on behalf of other parties to process or forward data to other parties.\n- ACQR: Acquirer  : Entity acquiring card transactions.\n- CISS: CardIssuer  : Party that issues cards.\n- DLIS: DelegateIssuer  : Party to whom the card issuer delegates to authorise card payment transactions.\n- ICCA: CardApplication  : Application in the smart card.\n",
			"type": "string",
			"enum": [
				"OPOI",
				"MERC",
				"ACCP",
				"ITAG",
				"ACQR",
				"CISS",
				"DLIS",
				"ICCA"
			],
			"example": "OPOI"
		},
		"PartyType33Code": {
			"description": "Identification of the type of entity involved in a transaction.\n- OPOI: OriginatingPOI  : Point Of Interaction initiating the card payment transaction.\n- MERC: Merchant  : Merchant providing goods and service in the card payment transaction.\n- ACCP: Acceptor  : Card acceptor, party accepting the card and presenting transaction data to the acquirer.\n- ITAG: IntermediaryAgent  : Party acting on behalf of other parties to process or forward data to other parties.\n- ACQR: Acquirer  : Entity acquiring card transactions.\n- CISS: CardIssuer  : Party that issues cards.\n- DLIS: DelegateIssuer  : Party to whom the card issuer delegates to authorise card payment transactions.\n- MTMG: MasterTerminalManager  : Responsible for the maintenance of a card payment acceptance terminal.\n- TAXH: TaxAuthority  : Tax authority.\n- TMGT: TerminalManager  : Responsible for one or several maintenance functions of a card payment acceptance terminal.\n",
			"type": "string",
			"enum": [
				"OPOI",
				"MERC",
				"ACCP",
				"ITAG",
				"ACQR",
				"CISS",
				"DLIS",
				"MTMG",
				"TAXH",
				"TMGT"
			],
			"example": "OPOI"
		},
		"PartyType3Code": {
			"description": "Identification of the type of entity involved in a transaction.\n- OPOI: OriginatingPOI  : Point Of Interaction initiating the card payment transaction.\n- MERC: Merchant  : Merchant providing goods and service in the card payment transaction.\n- ACCP: Acceptor  : Card acceptor, party accepting the card and presenting transaction data to the acquirer.\n- ITAG: IntermediaryAgent  : Party acting on behalf of other parties to process or forward data to other parties.\n- ACQR: Acquirer  : Entity acquiring card transactions.\n- CISS: CardIssuer  : Party that issues cards.\n- DLIS: DelegateIssuer  : Party to whom the card issuer delegates to authorise card payment transactions.\n",
			"type": "string",
			"enum": [
				"OPOI",
				"MERC",
				"ACCP",
				"ITAG",
				"ACQR",
				"CISS",
				"DLIS"
			],
			"example": "OPOI"
		},
		"PartyType4Code": {
			"description": "Entity assigning an identification (for example merchant, acceptor, acquirer, tax authority, etc.).\n- MERC: Merchant  : Merchant providing goods and service in the card payment transaction.\n- ACCP: Acceptor  : Card acceptor, party accepting the card and presenting transaction data to the acquirer.\n- ITAG: IntermediaryAgent  : Party acting on behalf of other parties to process or forward data to other parties.\n- ACQR: Acquirer  : Entity acquiring card transactions.\n- CISS: CardIssuer  : Party that issues cards.\n- TAXH: TaxAuthority  : Tax authority.\n",
			"type": "string",
			"enum": [
				"MERC",
				"ACCP",
				"ITAG",
				"ACQR",
				"CISS",
				"TAXH"
			],
			"example": "MERC"
		},
		"PartyType7Code": {
			"description": "Party that communicate with a POI component (Point of Interaction), using a communication device.\n- ACQR: Acquirer  : Entity acquiring card transactions.\n- ITAG: IntermediaryAgent  : Party acting on behalf of other parties to process or forward data to other parties.\n- PCPT: POIComponent  : Party component of a POI system or POI terminal (Point of Interaction).\n- TMGT: TerminalManager  : Responsible for one or several maintenance functions of a card payment acceptance terminal.\n- SALE: SaleSystem  : Party selling goods and services.\n",
			"type": "string",
			"enum": [
				"ACQR",
				"ITAG",
				"PCPT",
				"TMGT",
				"SALE"
			],
			"example": "ACQR"
		},
		"PaymentAccountRequest1": {
			"description": "Data related to the account pointed by the payment card.\n",
			"type": "object",
			"properties": {
				"AccountReference": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"AccountType": {
					"description": "Type of cardholder account used for the transaction.\n- CTDP: CertificateOfDeposit  : Certificate of deposit saving account.\n- CHCK: Checking  : Checking account.\n- CRDT: CreditCard  : Credit card account.\n- CURR: Current  : Current account.\n- CDBT: DebitCard  : Debit card account.\n- DFLT: Default  : Default account.\n- EPRS: EpurseCard  : Electronic purse card account.\n- HEQL: HomeEquityLoan  : Home equity loan credit account.\n- ISTL: InstalmentLoan  : Instalment loan credit account.\n- INVS: Investment  : Investment account.\n- LCDT: LineOfCredit  : Line of credit account.\n- MBNW: MobilePhoneAccount  : Mobile Station Integrated Services Digital Network Number (MSISDN).\n- MNMK: MoneyMarket  : Money market saving account.\n- MNMC: MoneyMarketChecking  : Money market checking account.\n- MTGL: MortgageLoan  : Mortgage loan credit account.\n- RTRM: RetirementAccount  : Retirement account.\n- RVLV: RevolvingLoanAccount  : Revolving loan account.\n- SVNG: Savings  : Savings account.\n- STBD: StockOrBond  : Stock or bond investment account.\n- UVRL: Universal  : Universal account.\n- PRPD: PrePaid  : Pre-paid account.\n- FLTC: FleetCard  : Fleet card account.\n",
					"$ref": "#/$defs/CardAccountType3Code"
				},
				"CustomerOrder": {
					"description": "Customer order attached to a customer, recorded in the POI system.\n",
					"$ref": "#/$defs/CustomerOrder1"
				}
			},
			"additionalProperties": false
		},
		"PaymentCard35": {
			"description": "Payment card performing the transaction.\n",
			"type": "object",
			"properties": {
				"AdditionalCardData": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"AllowedProduct": {
					"description": "Product that can be purchased with the card.",
					"anyOf": [
						{
							"$ref": "#/$defs/Max70Text"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Max70Text"
							}
						}
					]
				},
				"CardBrand": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"CardCurrencyCode": {
					"description": "Specifies an alphanumeric string with a length of exact 3 characters.\n",
					"$ref": "#/$defs/Exact3AlphaNumericText"
				},
				"CardCountryCode": {
					"description": "Specifies a character string with a maximum length of 3 characters.\n",
					"$ref": "#/$defs/Max3Text"
				},
				"CardProductProfile": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"CardProductSubType": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"CardProductType": {
					"description": "Type of card product.\n- COMM: CommercialCard  : Cards issued as a means of business expenditure, for instance business card or corporate card. The user could be a company, an individual for business expenses or a self employed for business purposes.\n- CONS: ConsumerCard  : Cards issued as a means of personal expenditure. The user is always an individual.\n",
					"$ref": "#/$defs/CardProductType1Code"
				},
				"InternationalCard": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"IssuerBIN": {
					"description": "Specifies a numeric string with a maximum length of 15 digits.\n",
					"$ref": "#/$defs/Max15NumericText"
				},
				"MaskedPAN": {
					"description": "Specifies a character string with a maximum length of 30 characters.\n",
					"$ref": "#/$defs/Max30Text"
				},
				"PlainCardData": {
					"description": "Sensible data associated with the payment card performing the transaction.\n",
					"$ref": "#/$defs/PlainCardData22"
				},
				"PaymentAccountReference": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"ProtectedCardData": {
					"description": "General cryptographic message syntax (CMS) containing encrypted data.\n",
					"$ref": "#/$defs/ContentInformationType40"
				},
				"PrivateCardData": {
					"description": "Binary data of 100K maximum.\n",
					"$ref": "#/$defs/Max100KBinary"
				},
				"ServiceOption": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"additionalProperties": false
		},
		"PaymentContext29": {
			"description": "Payment context in which the transaction is performed.\n",
			"type": "object",
			"properties": {
				"AttendanceContext": {
					"description": "Human attendance at the POI location during the transaction.\n- ATTD: Attended  : Attended payment, with an attendant.\n- SATT: SemiAttended  : Semi-attended, including self checkout. An attendant supervises several payment, and could be called to help the cardholder.\n- UATT: Unattended  : Unattended payment, no attendant present.\n",
					"$ref": "#/$defs/AttendanceContext1Code"
				},
				"AttendantLanguage": {
					"description": "Specifies a language.\n",
					"$ref": "#/$defs/LanguageCode"
				},
				"AttendantMessageCapable": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"BusinessArea": {
					"description": "Specifies the business context of the transaction\n- AIBD: ArtificialIntelligenceBasedDecision  : The payment is initiated by an artificial intelligence based decision.\n- PPAY: PlainPayment  : The card is used to perform a plain payment.\n- TKNF: TransitKnownFare  : The card is used in a Transit business case where the fare amount is known when the transaction is initiated.\n- EOPT: EnergyOpenPayment  : Indicates when the card is used in an energy business case where the amount could not be assessed when the transaction is initiated.\n- TOPT: TransitOpenPayment  : Indicates when the card is used in a transit business case where the fare amount is not known when the transaction is initiated.\n",
					"$ref": "#/$defs/BusinessArea2Code"
				},
				"CardDataEntryMode": {
					"description": "Type of reading of the card data.\n- TAGC: Tag  : Tag reading capabilities (RFID, etc.).\n- PHYS: Physical  : Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.\n- BRCD: BarCode  : Bar code.\n- MGST: MagneticStripe  : Magnetic stripe.\n- CICC: ICC  : ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.\n- DFLE: AccountData  : Account data on file.\n- CTLS: ProximityReader  : Contactless proximity reader.\n- ECTL: EMVProximityReader  : Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).\n- CDFL: CardOnFile  : Card information are stored on a file.\n- SICC: SynchronousIntegratedCircuitCard  : Synchronous ICC - (Integrated Circuit Card) with contact.\n- UNKW: Unknown  : Unknown card reading capability.\n- QRCD: QRCode  : Quick response code.\n- OPTC: OpticalCode  : Optical coded reading capabilities (e.g. barcode, QR code, etc.)\n",
					"$ref": "#/$defs/CardDataReading8Code"
				},
				"CardPresent": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"CardholderPresent": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"FallbackIndicator": {
					"description": "Information about card entry mode fallback.\n- FFLB: FallbackAfterFailure  : Card fall-back occurred during the transaction in progress. The previous transaction on the terminal failed.\n- SFLB: FallbackAfterSuccess  : Card fall-back occurred during the transaction in progress. The previous transaction on the terminal was successful.\n- NFLB: NoFallback  : No card fall-back during the transaction in progress.\n",
					"$ref": "#/$defs/CardFallback1Code"
				},
				"OnLineContext": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"SupportedOption": {
					"description": "Payment options the card acceptor can support.",
					"anyOf": [
						{
							"$ref": "#/$defs/SupportedPaymentOption2Code"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/SupportedPaymentOption2Code"
							}
						}
					]
				},
				"TransactionChannel": {
					"description": "Identifies the type of the communication channels used by the cardholder to the acceptor system.\n- MAIL: MailOrder  : Mail order.\n- TLPH: TelephoneOrder  : Telephone order.\n- ECOM: ElectronicCommerce  : Electronic commerce.\n- TVPY: TelevisionPayment  : Payment on television.\n- SECM: SecuredElectronicCommerce  : Electronic commerce with cardholder authentication.\n- MOBL: MobilePayment  : Payment performed through a cardholder mobile device.\n- MPOS: MobilePOS  : Payment performed through a merchant mobile device.\n",
					"$ref": "#/$defs/TransactionChannel5Code"
				},
				"TransactionEnvironment": {
					"description": "Indicates the environment of the transaction.\n- MERC: Merchant  : Merchant environment.\n- PRIV: Private  : Private environment.\n- PUBL: Public  : Public environment.\n",
					"$ref": "#/$defs/TransactionEnvironment1Code"
				}
			},
			"additionalProperties": false
		},
		"PaymentRequest6": {
			"description": "Data required to request a Payment.\n",
			"type": "object",
			"properties": {
				"LoyaltyData": {
					"description": "Data linked to card loyalty during payment.",
					"anyOf": [
						{
							"$ref": "#/$defs/LoyaltyRequestData3"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/LoyaltyRequestData3"
							}
						}
					]
				},
				"PaymentTransaction": {
					"description": "Data associated with the transaction for a potential currency conversion.\n",
					"$ref": "#/$defs/CardPaymentTransaction136"
				}
			},
			"additionalProperties": false
		},
		"PaymentTokenIdentifiers1": {
			"description": "Identifier of a token provider requestor.\n",
			"type": "object",
			"properties": {
				"ProviderIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"RequestorIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"ProviderIdentification",
				"RequestorIdentification"
			],
			"additionalProperties": false
		},
		"PercentageRate": {
			"description": "Rate expressed as a percentage, that is, in hundredths, for example, 0.7 is 7/10 of a percent, and 7.0 is 7%.\n",
			"type": "number",
			"example": "35"
		},
		"PersonIdentification15": {
			"description": "Set of unique and unambiguous ways to identify a person.\n",
			"type": "object",
			"properties": {
				"AlienRegistrationNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"CustomerNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Department": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"DriverIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"DriverLicenseLocation": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"DriverLicenseNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"DriverLicenseName": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"DateAndPlaceOfBirth": {
					"description": "Date and place of birth of a person.\n",
					"$ref": "#/$defs/DateAndPlaceOfBirth1"
				},
				"EmailAddress": {
					"description": "Specifies a character string with a maximum length of 256 characters.\n",
					"$ref": "#/$defs/Max256Text"
				},
				"IdentityCardNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"JobNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"EmployeeIdentificationNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"EmployerIdentificationNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Other": {
					"description": "Unique identification of a person, as assigned by an institution, using an identification scheme.",
					"anyOf": [
						{
							"$ref": "#/$defs/GenericIdentification4"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/GenericIdentification4"
							}
						}
					]
				},
				"PassportNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"SocialSecurityNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"TaxIdentificationNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"additionalProperties": false
		},
		"PhoneNumber": {
			"description": "The collection of information which identifies a specific phone or FAX number as defined by telecom services.\nIt consists of a \"+\" followed by the country code (from 1 to 3 characters) then a \"-\" and finally, any combination of numbers, \"(\", \")\", \"+\" and \"-\" (up to 30 characters).\n",
			"type": "string",
			"pattern": "^(\\+[0-9]{1,3}\\-[\\(-\\)\\+\\-0-9]{1,30})$"
		},
		"PhysicalInterfaceParameter1": {
			"description": "Configuration parameters for physical interface.\n",
			"type": "object",
			"properties": {
				"AccessCode": {
					"description": "Specifies a binary string with a maximum length of 35 binary bytes.\n",
					"$ref": "#/$defs/Max35Binary"
				},
				"AdditionalParameters": {
					"description": "Binary data of 2K maximum.\n",
					"$ref": "#/$defs/Max2KBinary"
				},
				"InterfaceName": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"InterfaceType": {
					"description": "Low level communication of the hardware or software component toward another component or an external entity.\n- BLTH: Bluetooth  : Communication with a host using Bluetooth.\n- ETHR: Ethernet  : Ethernet port to communicate.\n- GPRS: GPRS  : Communication with a host using GPRS.\n- GSMF: GSM  : Communication with a host using GSM.\n- PSTN: PSTN  : Communication with a host using Public Switching Telephone Network.\n- RS23: RS232  : Serial port to communicate.\n- USBD: USBDevice  : Communication with a USB stick or any USB device.\n- USBH: USBHost  : Communication with a host from an USB port.\n- WIFI: Wifi  : Wifi communication with another component.\n- WT2G: WirelessTechnology2G  : Includes all communication technologies which can be qualified as being part of the 2G technology (e.g EDGE or PDC).\n- WT3G: WirelessTechnology3G  : Includes all communication technologies which can be qualified as being part of the 3G technology.\n- WT4G: WirelessTechnology4G  : Includes all communication technologies which can be qualified as being part of the 4G technology.\n- WT5G: WirelessTechnology5G  : Includes all communication technologies which can be qualified as being part of the 5G technology.\n",
					"$ref": "#/$defs/POICommunicationType2Code"
				},
				"SecurityProfile": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"UserName": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"InterfaceName"
			],
			"additionalProperties": false
		},
		"PlainCardData17": {
			"description": "Sensitive data associated with a payment card.\n",
			"type": "object",
			"properties": {
				"AdditionalCardData": {
					"description": "Additional card issuer specific data.",
					"anyOf": [
						{
							"$ref": "#/$defs/Max35Text"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Max35Text"
							}
						}
					]
				},
				"EntryMode": {
					"description": "Type of reading of the card data.\n- TAGC: Tag  : Tag reading capabilities (RFID, etc.).\n- PHYS: Physical  : Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.\n- BRCD: BarCode  : Bar code.\n- MGST: MagneticStripe  : Magnetic stripe.\n- CICC: ICC  : ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.\n- DFLE: AccountData  : Account data on file.\n- CTLS: ProximityReader  : Contactless proximity reader.\n- ECTL: EMVProximityReader  : Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).\n- CDFL: CardOnFile  : Card information are stored on a file.\n",
					"$ref": "#/$defs/CardDataReading5Code"
				},
				"PAN": {
					"description": "Specifies a numeric string with a minimum length of 8 digits, and a maximum length of 28 digits.\n",
					"$ref": "#/$defs/Min8Max28NumericText"
				},
				"Track1": {
					"description": "Specifies a character string with a maximum length of 76 characters.\n",
					"$ref": "#/$defs/Max76Text"
				},
				"Track2": {
					"description": "Specifies a character string with a maximum length of 37 characters.\n",
					"$ref": "#/$defs/Max37Text"
				},
				"Track3": {
					"description": "Specifies a character string with a maximum length of 104 characters.\n",
					"$ref": "#/$defs/Max104Text"
				}
			},
			"additionalProperties": false
		},
		"PlainCardData22": {
			"description": "Sensible data associated with the payment card performing the transaction.\n",
			"type": "object",
			"properties": {
				"CardSequenceNumber": {
					"description": "Specifies a numeric string with a minimum length of 2 digits, and a maximum length of 3 digits.\n",
					"$ref": "#/$defs/Min2Max3NumericText"
				},
				"CardholderName": {
					"description": "Specifies a character string with a maximum length of 45 characters.\n",
					"$ref": "#/$defs/Max45Text"
				},
				"EffectiveDate": {
					"description": "Specifies a character string with a maximum length of 10 characters.\n",
					"$ref": "#/$defs/Max10Text"
				},
				"PAN": {
					"description": "Specifies a numeric string with a minimum length of 8 digits, and a maximum length of 28 digits.\n",
					"$ref": "#/$defs/Min8Max28NumericText"
				},
				"ServiceCode": {
					"description": "Specifies a numeric string with an exact length of 3 digits.\n",
					"$ref": "#/$defs/Exact3NumericText"
				},
				"Track1": {
					"description": "Specifies a character string with a maximum length of 76 characters.\n",
					"$ref": "#/$defs/Max76Text"
				},
				"Track2": {
					"description": "Specifies a character string with a maximum length of 37 characters.\n",
					"$ref": "#/$defs/Max37Text"
				},
				"Track3": {
					"description": "Specifies a character string with a maximum length of 104 characters.\n",
					"$ref": "#/$defs/Max104Text"
				},
				"ExpiryDate": {
					"description": "Specifies a character string with a maximum length of 10 characters.\n",
					"$ref": "#/$defs/Max10Text"
				}
			},
			"required": [
				"PAN"
			],
			"additionalProperties": false
		},
		"PlanOwner1Code": {
			"description": "Contains list of plan owners\n- ACCP: Acceptor  : Plan owner is an acceptor.\n- ACQR: Acquirer  : Plan owner is an acquirer.\n- ISSR: Issuer  : Plan owner is an issuer.\n- OTHN: OtherNational  : plan owner type is other national.\n- OTHP: OtherPrivate  : plan owner type is other private.\n",
			"type": "string",
			"enum": [
				"ACCP",
				"ACQR",
				"ISSR",
				"OTHN",
				"OTHP"
			]
		},
		"PlusOrMinusIndicator": {
			"description": "Indicates a positive or negative value.\n",
			"type": "boolean"
		},
		"PointOfInteraction14": {
			"description": "Point of interaction (POI) performing the transaction.\n",
			"type": "object",
			"properties": {
				"Component": {
					"description": "Data related to a component of the POI (Point Of Interaction) performing the transaction.",
					"anyOf": [
						{
							"$ref": "#/$defs/PointOfInteractionComponent15"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/PointOfInteractionComponent15"
							}
						}
					]
				},
				"Capabilities": {
					"description": "Capabilities of the POI (Point Of Interaction) performing the transaction.\n",
					"$ref": "#/$defs/PointOfInteractionCapabilities9"
				},
				"GroupIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Identification": {
					"description": "Identification of an entity.\n",
					"$ref": "#/$defs/GenericIdentification177"
				},
				"SystemName": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"TerminalIntegration": {
					"description": "Indicates the type of integration of the POI terminal in the sale environment.\n- INDR: Indoor  : Indoor terminal.\n- IPMP: InsidePump  : Terminal incorporated in the pump dispensing petrol.\n- MPOI: MultiplePOITerminal  : Multiple terminals linked to a unique sale terminal.\n- MPMP: MultiplePump  : Outdoor terminal serving several petrol pumps.\n- MSLE: MultipleSaleTerminal  : Terminal serving multiple sale terminals.\n- SSLE: SingleSaleTerminal  : Terminal linked to a unique sale terminal.\n- VNDG: VendingMachine  : Terminal integrated in a vending machine.\n",
					"$ref": "#/$defs/LocationCategory3Code"
				},
				"TimeZone": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				}
			},
			"required": [
				"Identification"
			],
			"additionalProperties": false
		},
		"PointOfInteractionCapabilities9": {
			"description": "Capabilities of the POI (Point Of Interaction) performing the transaction.\n",
			"type": "object",
			"properties": {
				"ApprovalCodeLength": {
					"description": "Number of objects represented as a positive integer.\n",
					"$ref": "#/$defs/PositiveNumber"
				},
				"CardCaptureCapable": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"CardReadingCapabilities": {
					"description": "Card reading capabilities of the POI (Point Of Interaction) performing the transaction.",
					"anyOf": [
						{
							"$ref": "#/$defs/CardDataReading8Code"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/CardDataReading8Code"
							}
						}
					]
				},
				"CardholderVerificationCapabilities": {
					"description": "Cardholder verification capabilities of the POI (Point Of Interaction) performing the transaction.",
					"anyOf": [
						{
							"$ref": "#/$defs/CardholderVerificationCapability4Code"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/CardholderVerificationCapability4Code"
							}
						}
					]
				},
				"MessageCapabilities": {
					"description": "Capabilities of the terminal to display or print message to the cardholder and the merchant.",
					"anyOf": [
						{
							"$ref": "#/$defs/DisplayCapabilities4"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/DisplayCapabilities4"
							}
						}
					]
				},
				"MaxScriptLength": {
					"description": "Number of objects represented as a positive integer.\n",
					"$ref": "#/$defs/PositiveNumber"
				},
				"OnLineCapabilities": {
					"description": "On-line and off-line capabilities of the POI (Point Of Interaction).\n- OFLN: OffLine  : Off-line only capable.\n- ONLN: OnLine  : On-line only capable.\n- SMON: SemiOffLine  : Off-line capable with possible on-line requests to the acquirer.\n",
					"$ref": "#/$defs/OnLineCapability1Code"
				},
				"PINLengthCapabilities": {
					"description": "Number of objects represented as a positive integer.\n",
					"$ref": "#/$defs/PositiveNumber"
				}
			},
			"additionalProperties": false
		},
		"PointOfInteractionComponent15": {
			"description": "Data related to a component of the POI (Point Of Interaction) performing the transaction.\n",
			"type": "object",
			"properties": {
				"Assessment": {
					"description": "Assessments for the component of the point of interaction.",
					"anyOf": [
						{
							"$ref": "#/$defs/PointOfInteractionComponentAssessment1"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/PointOfInteractionComponentAssessment1"
							}
						}
					]
				},
				"Characteristics": {
					"description": "Physical and logical characteristics of a POI component (Point of Interaction).\n",
					"$ref": "#/$defs/PointOfInteractionComponentCharacteristics10"
				},
				"Identification": {
					"description": "Identification of a POI (Point of Interaction) component.\n",
					"$ref": "#/$defs/PointOfInteractionComponentIdentification2"
				},
				"Package": {
					"description": "Chunk of a software package.",
					"anyOf": [
						{
							"$ref": "#/$defs/PackageType5"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/PackageType5"
							}
						}
					]
				},
				"StandardCompliance": {
					"description": "Identification of the standard for which the component complies with.",
					"anyOf": [
						{
							"$ref": "#/$defs/GenericIdentification48"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/GenericIdentification48"
							}
						}
					]
				},
				"Status": {
					"description": "Status of a POI component (Point of Interaction).\n",
					"$ref": "#/$defs/PointOfInteractionComponentStatus3"
				},
				"SubTypeInformation": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"Type": {
					"description": "Type of component belonging to a POI (Point of Interaction) Terminal.\n- AQPP: AcquirerProtocolParameters  : Parameters for acquirer interface of the point of interaction, including acquirer host configuration parameters.\n- APPR: ApplicationParameters  : Parameters of a payment application running on the point of interaction.\n- TLPR: TerminalParameters  : Manufacturer configuration parameters of the point of interaction.\n- SCPR: SecurityParameters  : Security parameters of the point of interaction.\n- SERV: Server  : Payment server of a point of interaction system.\n- TERM: Terminal  : Payment terminal point of interaction.\n- DVCE: Device  : Device sub-component of a component of the point of interaction.\n- SECM: SecureModule  : Security module.\n- APLI: PaymentApplication  : Payment application software.\n- EMVK: EMVKernel  : EMV application kernel (EMV is the chip card specifications initially defined by Eurocard, Mastercard and Visa).\n- EMVO: EMVLevel1  : EMV physical interface (EMV is the chip card specifications initially defined by Eurocard, Mastercard and Visa).\n- MDWR: Middleware  : Software module of the point of interaction.\n- DRVR: Driver  : Driver module of the point of interaction.\n- OPST: OperatingSystem  : Software that manages hardware to provide common services to the applications.\n- MRPR: MerchantParameters  : Merchant configuration parameters for the point of interaction (POI).\n- CRTF: CertificateParameters  : Certificate provided by a terminal manager.\n- TMSP: TMSProtocolParameters  : Configuration parameters for the TMS protocol.\n- SACP: SaleComponent  : Component of the Sale system.\n- SAPR: SaleToPOIProtocolParameters  : Parameters related to the Sale to POI protocol.\n- LOGF: LogFile  : Any repository used for recording log traces.\n- MDFL: MediaFile  : Media file managed by an application of the POI.\n- SOFT: Soft  : Payment or other software application.\n- CONF: ConfigurationFile  : Configuration file relevant for the POI.\n- RPFL: ReportFile  : Report file generated by the POI.\n",
					"$ref": "#/$defs/POIComponentType6Code"
				}
			},
			"required": [
				"Identification",
				"Type"
			],
			"additionalProperties": false
		},
		"PointOfInteractionComponentAssessment1": {
			"description": "Assessments for the component of the point of interaction.\n",
			"type": "object",
			"properties": {
				"Assigner": {
					"description": "Body which has delivered the assessment.",
					"anyOf": [
						{
							"$ref": "#/$defs/Max35Text"
						},
						{
							"type": "array",
							"minItems": 1,
							"items": {
								"$ref": "#/$defs/Max35Text"
							}
						}
					]
				},
				"DeliveryDate": {
					"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
					"$ref": "#/$defs/ISODateTime"
				},
				"Number": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Type": {
					"description": "Type of assessment of a POI component (Point of Interaction).\n- APPL: Approval  : Approval number delivered by an approval centre.\n- CERT: Certification  : Certification number delivered by a certification body.\n- EVAL: Evaluation  : Evaluation by a lab or a tool.\n",
					"$ref": "#/$defs/POIComponentAssessment1Code"
				},
				"ExpirationDate": {
					"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
					"$ref": "#/$defs/ISODateTime"
				}
			},
			"required": [
				"Assigner",
				"Number",
				"Type"
			],
			"additionalProperties": false
		},
		"PointOfInteractionComponentCharacteristics10": {
			"description": "Physical and logical characteristics of a POI component (Point of Interaction).\n",
			"type": "object",
			"properties": {
				"Communication": {
					"description": "Low level communication of the hardware or software component toward another component or an external entity.",
					"anyOf": [
						{
							"$ref": "#/$defs/CommunicationCharacteristics5"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/CommunicationCharacteristics5"
							}
						}
					]
				},
				"Memory": {
					"description": "Memory characteristics of the component.",
					"anyOf": [
						{
							"$ref": "#/$defs/MemoryCharacteristics1"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/MemoryCharacteristics1"
							}
						}
					]
				},
				"SubscriberIdentityModules": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				},
				"SecurityAccessModules": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				},
				"SecurityElement": {
					"description": "Security characteristics of the component.",
					"anyOf": [
						{
							"$ref": "#/$defs/CryptographicKey18"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/CryptographicKey18"
							}
						}
					]
				}
			},
			"additionalProperties": false
		},
		"PointOfInteractionComponentIdentification2": {
			"description": "Identification of a POI (Point of Interaction) component.\n",
			"type": "object",
			"properties": {
				"Identification": {
					"description": "Specifies a character string with a maximum length of 256 characters.\n",
					"$ref": "#/$defs/Max256Text"
				},
				"ItemNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"ProviderIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"SerialNumber": {
					"description": "Specifies a character string with a maximum length of 256 characters.\n",
					"$ref": "#/$defs/Max256Text"
				}
			},
			"additionalProperties": false
		},
		"PointOfInteractionComponentStatus3": {
			"description": "Status of a POI component (Point of Interaction).\n",
			"type": "object",
			"properties": {
				"Status": {
					"description": "Status of a component belonging to a POI Terminal (Point of Interaction).\n- WAIT: WaitingActivation  : Component not yet activated.\n- OUTD: OutOfOrder  : Component not working properly.\n- OPER: InOperation  : Component activated and in operation.\n- DACT: Deactivated  : Component has been deactivated.\n",
					"$ref": "#/$defs/POIComponentStatus1Code"
				},
				"VersionNumber": {
					"description": "Specifies a character string with a maximum length of 256 characters.\n",
					"$ref": "#/$defs/Max256Text"
				},
				"ExpiryDate": {
					"description": "A particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format. This representation is defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\n",
					"$ref": "#/$defs/ISODate"
				}
			},
			"additionalProperties": false
		},
		"PositiveNumber": {
			"description": "Number of objects represented as a positive integer.\n",
			"type": "number",
			"minimum": 1,
			"example": "123456789012345678"
		},
		"PostalAddress2": {
			"description": "Address of a party expressed in a formal structure, usually according to the country's postal services specifications.\n",
			"type": "object",
			"properties": {
				"Country": {
					"description": "Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).\n",
					"$ref": "#/$defs/CountryCode"
				},
				"CountrySubDivision": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"PostCodeIdentification": {
					"description": "Specifies a character string with a maximum length of 16 characters.\n",
					"$ref": "#/$defs/Max16Text"
				},
				"StreetName": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"TownName": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"Country",
				"PostCodeIdentification",
				"TownName"
			],
			"additionalProperties": false
		},
		"PostalAddress22": {
			"description": "Information that locates and identifies a specific address, as defined by postal services.\n",
			"type": "object",
			"properties": {
				"AddressLine": {
					"description": "Information that locates and identifies a specific address, as defined by postal services, presented in free format text.",
					"anyOf": [
						{
							"$ref": "#/$defs/Max70Text"
						},
						{
							"type": "array",
							"maxItems": 2,
							"items": {
								"$ref": "#/$defs/Max70Text"
							}
						}
					]
				},
				"AddressType": {
					"description": "Specifies the type of address.\n- ADDR: Postal  : Address is the complete postal address.\n- PBOX: POBox  : Address is a postal office (PO) box.\n- HOME: Residential  : Address is the home address.\n- BIZZ: Business  : Address is the business address.\n- MLTO: MailTo  : Address is the address to which mail is sent.\n- DLVY: DeliveryTo  : Address is the address to which delivery is to take place.\n",
					"$ref": "#/$defs/AddressType2Code"
				},
				"BuildingNumber": {
					"description": "Specifies a character string with a maximum length of 16 characters.\n",
					"$ref": "#/$defs/Max16Text"
				},
				"CountryCode": {
					"description": "Specifies an alpha string with a minimum length of 2 characters and a maximum length of 3 characters.\n",
					"$ref": "#/$defs/Min2Max3AlphaText"
				},
				"CountrySubDivision": {
					"description": "Identifies a subdivision of a country such as state, region, county.",
					"anyOf": [
						{
							"$ref": "#/$defs/Max35Text"
						},
						{
							"type": "array",
							"maxItems": 2,
							"items": {
								"$ref": "#/$defs/Max35Text"
							}
						}
					]
				},
				"Department": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"PostCode": {
					"description": "Specifies a character string with a maximum length of 16 characters.\n",
					"$ref": "#/$defs/Max16Text"
				},
				"StreetName": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"SubDepartment": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"TownName": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				}
			},
			"additionalProperties": false
		},
		"Product6": {
			"description": "Purchased item.\n",
			"type": "object",
			"properties": {
				"AdditionalProductCode": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"AdditionalProductDescription": {
					"description": "Specifies a character string with a maximum length of 256 characters.\n",
					"$ref": "#/$defs/Max256Text"
				},
				"DeliveryLocation": {
					"description": "Specifies a character string with a maximum length of 10 characters.\n",
					"$ref": "#/$defs/Max10Text"
				},
				"DeliveryService": {
					"description": "Identify the method of delivery or distribution.\n- ATTL: AttendantDelivery  : Delivery by an attendant.\n- CARR: CarrierDelivery  : Delivery by a carrier.\n- CUST: CustomerDelivery  : Delivery by the customer.\n- FULL: FullServe  : Full service for fuel distribution.\n- SELF: SelfServe  : Self service for fuel distribution.\n",
					"$ref": "#/$defs/AttendanceContext2Code"
				},
				"ItemIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"ProductAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"ProductAmountSign": {
					"description": "Indicates a positive or negative value.\n",
					"$ref": "#/$defs/PlusOrMinusIndicator"
				},
				"ProductCode": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"ProductDescription": {
					"description": "Specifies a character string with a maximum length of 140 characters.\n",
					"$ref": "#/$defs/Max140Text"
				},
				"ProductQuantity": {
					"description": "Number of objects represented as a decimal number, for example 0.75 or 45.6.\n",
					"$ref": "#/$defs/DecimalNumber"
				},
				"SaleChannel": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"TaxType": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"UnitOfMeasure": {
					"description": "Unit of measure of the item purchased.\n- PIEC: Piece  : Standard length of cloth, wallpaper, as an item for sale or amount of a substance.\n- TONS: Ton  : Measure of weight, in Britain 2240lb (long ton)and in the US 2000lb (short ton).\n- FOOT: Foot  : Unit of length equal to 1/3 yard.\n- GBGA: GBGallon  : Unit of volume that is equal to 8 pints.\n- USGA: USGallon  : Unit of volume that is equal to 8 pints.\n- GRAM: Gram  : Unit of measure that is equal to a 1, 000th of a kilo.\n- INCH: Inch  : Measure of length equal to 2.54 cm.\n- KILO: Kilogram  : Basic unit of mass in the SI system, 1000 grams.\n- PUND: Pound  : Unit of weight equal to 0.454 kilograms.\n- METR: Metre  : Unit of length in the metric system, equal to 39.37 inches.\n- CMET: Centimetre  : Unit of measure that is equal to one hundredth of a metre.\n- MMET: Millimetre  : Unit of measure that is a thousandth of one metre.\n- LITR: Litre  : Unit of volume that is equal to a thousand cubic centimetres.\n- CELI: Centilitre  : Unit of volume that is equal to one hundredth of a litre.\n- MILI: MilliLitre  : Unit of volume that is equal to one thousandth of a litre.\n- GBOU: GBOunce  : Unit of weight equal to a sixteenth of a pound.\n- USOU: USOunce  : Unit of weight equal to a sixteenth of a pound.\n- GBQA: GBQuart  : Unit of volume that is equal to 2 pints.\n- USQA: USQuart  : Unit of volume that is equal to 2 pints.\n- GBPI: GBPint  : Unit of volume that is equal to 568 cubic centimetres.\n- USPI: USPint  : Unit of volume that is equal to 473 cubic centimetres.\n- MILE: Mile  : Unit of length equal to 1, 760 yards.\n- KMET: Kilometre  : Unit of measure that is equal to 1, 000 meters.\n- YARD: Yard  : Unit of length equal to 3 feet or 0.9144 metre.\n- SQKI: SquareKilometre  : Measure of a surface, one kilometre by one kilometre.\n- HECT: Hectare  : Unit of measure that is equal to 10, 000 square meters.\n- ARES: Are  : Unit of measure equal to a 100 square meters.\n- SMET: SquareMetre  : Measure of a surface, one metre by one metre.\n- SCMT: SquareCentimetre  : Measure of a surface, one centimetre by one centimetre.\n- SMIL: SquareMillimetre  : Measure of a surface, one millimetre by one millimetre.\n- SQMI: SquareMile  : Measure of a surface, one mile by one mile.\n- SQYA: SquareYard  : Measure of a surface, one yard by one yard.\n- SQFO: SquareFoot  : Measure of a surface, one foot by one foot.\n- SQIN: SquareInch  : Measure of a surface, one inch by one inch.\n- ACRE: Acre  : Unit of measure equal to 4, 840 square yards.\n- KWHO: KilowattHours  : Unit of measure that is equal to the power consumption of one kilowatt during one hour.\n- DGEU: DieselGallonEquivalent  : Amount of fuel alternative equal to one gallon of diesel.\n- GGEU: GasolineGallonEquivalent  : Amount of fuel alternative equal to one gallon of gasoline.\n",
					"$ref": "#/$defs/UnitOfMeasure6Code"
				},
				"UnitPrice": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"UnitPriceSign": {
					"description": "Indicates a positive or negative value.\n",
					"$ref": "#/$defs/PlusOrMinusIndicator"
				},
				"ValueAddedTax": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				}
			},
			"required": [
				"ProductAmount",
				"ProductCode"
			],
			"additionalProperties": false
		},
		"QRCodeEncodingMode1Code": {
			"description": "Encoding Mode of Quick Response Code.\n- ALFA: Alphanumeric  : Alphanumeric value provided in Barcode field.\n- BINA: Binary  : Binary value provided in Quick Response Code Binary Value.\n- KANJ: Kanji  : Kanji value provided in Quick Response Code Binary Value.\n- NUME: Numeric  : Numeric value provided in Barcode field.\n",
			"type": "string",
			"enum": [
				"ALFA",
				"BINA",
				"KANJ",
				"NUME"
			]
		},
		"QRCodeErrorCorrection1Code": {
			"description": "Error Correction mode of Quick Response Code.\n- M015: ErrorCorrection15Percent  : Reed-Solomon error correction 15%\n- Q025: ErrorCorrection25Percent  : Reed-Solomon error correction 25%\n- H030: ErrorCorrection30Percent  : Reed-Solomon error correction 30%\n- L007: ErrorCorrection7Percent  : Reed-Solomon error correction  7%\n",
			"type": "string",
			"enum": [
				"M015",
				"Q025",
				"H030",
				"L007"
			]
		},
		"Recipient13Choice": {
			"description": "Identification of a cryptographic asymmetric key.\n",
			"type": "object",
			"properties": {
				"IssuerAndSerialNumber": {
					"description": "Certificate issuer name and serial number (see X.509).\n",
					"$ref": "#/$defs/IssuerAndSerialNumber2"
				},
				"SubjectKeyIdentifier": {
					"description": "Specifies a binary string with a maximum length of 140 binary bytes.\n",
					"$ref": "#/$defs/Max140Binary"
				}
			},
			"additionalProperties": false
		},
		"Recipient15Choice": {
			"description": "Transport key or key encryption key (KEK) for the recipient.\n",
			"type": "object",
			"properties": {
				"KEK": {
					"description": "Key encryption key (KEK), using previously distributed symmetric key.\n",
					"$ref": "#/$defs/KEK9"
				},
				"KeyIdentifier": {
					"description": "Identification of a key encryption key (KEK), using previously distributed symmetric key.\n",
					"$ref": "#/$defs/KEKIdentifier7"
				},
				"KeyTransport": {
					"description": "Key encryption key (KEK), encrypted with a previously distributed asymmetric public key.\n",
					"$ref": "#/$defs/KeyTransport10"
				}
			},
			"additionalProperties": false
		},
		"RecurringTransaction6": {
			"description": "Element related to recurring transaction.\n",
			"type": "object",
			"properties": {
				"GracePeriod": {
					"description": "Contains grace period details.",
					"anyOf": [
						{
							"$ref": "#/$defs/GracePeriod1"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/GracePeriod1"
							}
						}
					]
				},
				"PlanIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"PlanNotice": {
					"description": "Notice related to the RecurringPlan.",
					"anyOf": [
						{
							"$ref": "#/$defs/ActionMessage11"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/ActionMessage11"
							}
						}
					]
				},
				"PeriodUnit": {
					"description": "Specifies the regularity of an event.\n- YEAR: Annual  : Event takes place every year or once a year.\n- MNTH: Monthly  : Event takes place every month or once a month.\n- QURT: Quarterly  : Event takes place every three months or four times a year.\n- MIAN: SemiAnnual  : Event takes place every six months or two times a year.\n- WEEK: Weekly  : Event takes place once a week.\n- DAIL: Daily  : Event takes place every day.\n- TEND: TenDays  : Event takes place every ten business days.\n",
					"$ref": "#/$defs/Frequency3Code"
				},
				"SequenceNumber": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				}
			},
			"additionalProperties": false
		},
		"RelativeDistinguishedName1": {
			"description": "Relative distinguished name defined by X.500 and X.509.\n",
			"type": "object",
			"properties": {
				"AttributeType": {
					"description": "Type of attribute of a distinguished name (DN).\n- CNAT: CommonName  : Common name of the attribute (ASN.1 Object Identifier: id-at-commonName).\n- LATT: Locality  : Locality of the attribute (ASN.1 Object Identifier: id-at-localityName).\n- OATT: OrganisationName  : Organization name of the attribute (ASN.1 Object Identifier: id-at-organizationName).\n- OUAT: OrganisationUnitName  : Organization unit name of the attribute (ASN.1 Object Identifier: id-at-organizationalUnitName).\n- CATT: CountryName  : Country name of the attribute (ASN.1 Object Identifier: id-at-countryName).\n",
					"$ref": "#/$defs/AttributeType1Code"
				},
				"AttributeValue": {
					"description": "Specifies a character string with a maximum length of 140 characters.\n",
					"$ref": "#/$defs/Max140Text"
				}
			},
			"required": [
				"AttributeType",
				"AttributeValue"
			],
			"additionalProperties": false
		},
		"Response9Code": {
			"description": "Result of the performed service.\n- APPR: Approved  : Service has been successfuly provided.\n- DECL: Declined  : Service is declined.\n- PART: PartialApproved  : Service has been partialy provided.\n- SUSP: Suspended  : Transaction has been received but hasn't been processed.\n- TECH: TechnicalError  : Service cannot be provided for technical reason (eg timeout contacting the Issuer, security problem).\n",
			"type": "string",
			"enum": [
				"APPR",
				"DECL",
				"PART",
				"SUSP",
				"TECH"
			]
		},
		"ResponseType10": {
			"description": "Response of a requested service.\n",
			"type": "object",
			"properties": {
				"AdditionalResponseInformation": {
					"description": "Specifies a character string with a maximum length of 140 characters.\n",
					"$ref": "#/$defs/Max140Text"
				},
				"Response": {
					"description": "Result of the performed service.\n- APPR: Approved  : Service has been successfuly provided.\n- DECL: Declined  : Service is declined.\n- PART: PartialApproved  : Service has been partialy provided.\n- SUSP: Suspended  : Transaction has been received but hasn't been processed.\n- TECH: TechnicalError  : Service cannot be provided for technical reason (eg timeout contacting the Issuer, security problem).\n",
					"$ref": "#/$defs/Response9Code"
				},
				"ResponseReason": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"Response"
			],
			"additionalProperties": false
		},
		"RetailerMessage1Code": {
			"description": "Identifies the type of process related to the message.\n- SSAB: Abort  : Abort the current process or the last request.\n- SAAQ: AdminRequest  : To select and start customised administrative services provided by the POI, using a \"menu\" for an interactive or software interface, initiated by the Sale system.\n- SAAP: AdminResponse  : Response to the Admin request.\n- SDDR: DeviceRequest  : Request one or several functions of the device, from user Interface or payment peripherals on the POI system or on the Sale system. Functions can be Display, Input, Print, play sound, Card reader capabilities or Transmit a message.\n- SDDP: DeviceResponse  : Response to a Device request.\n- SSEN: EventNotification  : Notify the other party of an event that occurs on its side.\n- SSMQ: MessageStatusRequest  : Request the status of a previous message for which the Sale system has no response.\n- SSMR: MessageStatusResponse  : Response to a Message Status request.\n- SSRJ: Rejection  : Reject a previous received message, for technical or functional reasons.\n- SARQ: ReportRequest  : To request, by the Sale System, a report on a list of transactions on the POI system, or the status of a transaction.\n- SARP: ReportResponse  : Response to a Report request.\n- SFRP: SaleFinancialReconciliationResponse  : Response to a Reconciliation Request.\n- SFRQ: SaleFinancialReconciliationRequest  : Request a reconciliation (different types) between Sale System and POI System.\n- SFSQ: SaleFinancialServiceRequest  : Request a financial service like payment, reversal, loyalty, Balance Inquiry, etc.\n- SFSP: SaleFinancialServiceResponse  : Response to a financial service request.\n- SASQ: SessionManagementRequest  : Request the management of a session: login, logout and diagnosis services. Initiated by the Sale system.\n- SASP: SessionManagementResponse  : Response to a session management request to initiate/terminate a session.\n",
			"type": "string",
			"enum": [
				"SSAB",
				"SAAQ",
				"SAAP",
				"SDDR",
				"SDDP",
				"SSEN",
				"SSMQ",
				"SSMR",
				"SSRJ",
				"SARQ",
				"SARP",
				"SFRP",
				"SFRQ",
				"SFSQ",
				"SFSP",
				"SASQ",
				"SASP"
			]
		},
		"RetailerSaleEnvironment2": {
			"description": "Environment of Retailer for this message.\n",
			"type": "object",
			"properties": {
				"Currency": {
					"description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".\n",
					"$ref": "#/$defs/ActiveCurrencyCode"
				},
				"DebitPreferredFlag": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"LoyaltyHandling": {
					"description": "Possible types of Loyalty processing.\n- ALLO: Allowed  : The loyalty is accepted, but the POI has not to require or ask a loyalty card. The loyalty is involved by the payment card (e.g. an hybrid or linked card). \n- DENY: Forbidden  : No loyalty card to read and loyalty transaction to process. \tAny attempt to enter a pure loyalty card is rejected.\n- PRCS: Processed  : The loyalty transaction is already processed, no loyalty card or loyalty transaction to process.\n- PROP: Proposed  : The loyalty is accepted, and the POI has to ask a loyalty card. If the Customer does not enter a loyalty card, no loyalty transaction is realised.\n- REQU: Required  : The loyalty is required, and the POI refuses the processing \tof the message request if the cardholder does not enter a loyalty card.\n",
					"$ref": "#/$defs/LoyaltyHandling1Code"
				},
				"MaximumCashBackAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"MinimumAmountToDeliver": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"MinimumSplitAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"SaleCapabilities": {
					"description": "Capabilities of the Sale system.",
					"anyOf": [
						{
							"$ref": "#/$defs/SaleCapabilities1Code"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/SaleCapabilities1Code"
							}
						}
					]
				}
			},
			"additionalProperties": false
		},
		"RetailerService2Code": {
			"description": "List of specific services for ServiceRequest\n- FSPQ: FinancialPaymentRequest  : The Sale System requests to the POI System to perform a payment(Purchase/Refund/PWCB/MOTO Payment/...).\n- FSRQ: FinancialReversalRequest  : The Sale System requests to the POI System to perform a reversal partial or complete to cancel a former payment service.\n- FSIQ: FinancialBalanceInquiryRequest  : The Sale System requests to the POI System to perform balance inquiry on the main account.\n- FSBQ: FinancialBatchRequest  : The Batch message pair is used to request or get the result of transactions (payment, loyalty and reversal) performed without connection to the Sale system (Payment delivery).\n- FSLQ: FinancialLoyaltyRequest  : The Sale System requests to the POI System a loyalty service like loading or redeem.\n- FSVQ: FinancialStoredValueRequest  : The Sale System requests to the POI System to manage a stored value card or account (eg. Load, Payment, Reimbursement).\n- FSEQ: FinancialEnableServiceRequest  : The Sale System requests to the POI System to enable a service on its side.\n- FSAQ: FinancialCardAcquisitionRequest  : The Sale System requests to the POI System to handle a card data acquisition on the card reader.\n- FSCQ: FinancialReconciliationRequest  : The Sale System request to the POI System different kinds of transaction reconciliation. \n",
			"type": "string",
			"enum": [
				"FSPQ",
				"FSRQ",
				"FSIQ",
				"FSBQ",
				"FSLQ",
				"FSVQ",
				"FSEQ",
				"FSAQ",
				"FSCQ"
			]
		},
		"ReversalReason1Code": {
			"description": "Reason of the payment or loyalty reversal.\n- CUSC: CustomerCancellation  : Customer cancels the transaction.\n- MALF: Malfuntion  : Reversal after a suspection of malfunction of the POI system.\n- MERC: MerchantCancellation  : Merchant or Cashier cancels the transaction.\n- UNAB: UnableToComplete  : POI System unable to complete transaction.\n",
			"type": "string",
			"enum": [
				"CUSC",
				"MALF",
				"MERC",
				"UNAB"
			]
		},
		"ReversalRequest6": {
			"description": "Data to request a reversal.\n",
			"type": "object",
			"properties": {
				"CustomerOrder": {
					"description": "Customer order attached to a customer, recorded in the POI system.\n",
					"$ref": "#/$defs/CustomerOrder1"
				},
				"LoyaltyData": {
					"description": "Data linked to card loyalty during payment.",
					"anyOf": [
						{
							"$ref": "#/$defs/LoyaltyRequestData3"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/LoyaltyRequestData3"
							}
						}
					]
				},
				"ReversedAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"ReversalReason": {
					"description": "Reason of the payment or loyalty reversal.\n- CUSC: CustomerCancellation  : Customer cancels the transaction.\n- MALF: Malfuntion  : Reversal after a suspection of malfunction of the POI system.\n- MERC: MerchantCancellation  : Merchant or Cashier cancels the transaction.\n- UNAB: UnableToComplete  : POI System unable to complete transaction.\n",
					"$ref": "#/$defs/ReversalReason1Code"
				},
				"ReversalTransaction": {
					"description": "Data associated with the transaction for a potential currency conversion.\n",
					"$ref": "#/$defs/CardPaymentTransaction136"
				}
			},
			"required": [
				"ReversalReason"
			],
			"additionalProperties": false
		},
		"SaleCapabilities1Code": {
			"description": "Hardware capabilities of the Sale Terminal.\n- CHDI: CashierDisplay  : Standard Cashier display interface (to ask question, or to show information). \n- CHER: CashierError  : To display to the Cashier information related to an error situation occurring on the POI.\n- CHIN: CashierInput  : Any kind of keyboard allowing all or part of the commands \tof the Input message request from the Sale System to the POI System (InputCommand data element). The output device attached to this input device is the CashierDisplay device.\n- CHST: CashierStatus  : To display to the Cashier a new state on which the POI is entering. \tFor instance, during a payment, the POI could display to the Cashier that POI request an authorisation to the host acquirer.\n- CUDI: CustomerDisplay  : Standard Customer display interface used by the POI System to ask question, or to show information to the Customer inside a Service dialogue.\n- CUAS: CustomerAssistance  : Input of the Cardholder POI interface which can be entered by the Cashier to assist the Customer.\n- CUER: CustomerError  : To display to the Customer information is related to an error situation occurring on the Sale Terminal during a Sale transaction.\n- CUIN: CustomerInput  : Any kind of keyboard allowing all or part of the commands \tof the Input message request from the Sale System to the POI System (InputCommand data element).\n- POIR: POIReplication  : Information displayed on the Cardholder POI interface, replicated on the Cashier interface.\n- PRDC: PrinterDocument  : When the POI System wants to print specific document (check, dynamic currency conversion ...).\n- PRRP: PrinterReceipt  : Printer for the Payment receipt.\n- PRVC: PrinterVoucher  : Coupons, voucher or special ticket generated by the POI and to be printed. \n",
			"type": "string",
			"enum": [
				"CHDI",
				"CHER",
				"CHIN",
				"CHST",
				"CUDI",
				"CUAS",
				"CUER",
				"CUIN",
				"POIR",
				"PRDC",
				"PRRP",
				"PRVC"
			]
		},
		"SaleContext4": {
			"description": "Sale context in which the transaction is performed.\n",
			"type": "object",
			"properties": {
				"AdditionalSaleData": {
					"description": "Specifies a character string with a maximum length of 70characters.\n",
					"$ref": "#/$defs/Max70Text"
				},
				"AllowedEntryMode": {
					"description": "Type of card data reading.",
					"anyOf": [
						{
							"$ref": "#/$defs/CardDataReading8Code"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/CardDataReading8Code"
							}
						}
					]
				},
				"CashierIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"CashierLanguage": {
					"description": "Languages used by the cashier.",
					"anyOf": [
						{
							"$ref": "#/$defs/LanguageCode"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/LanguageCode"
							}
						}
					]
				},
				"CustomerOrderRequestFlag": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"DeliveryNoteNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"ForceOnlineFlag": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"InvoiceNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"PurchaseOrderNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"ReuseCardDataFlag": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"RemainingAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"SaleIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"SaleReconciliationIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"SaleReferenceNumber": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"SaleTokenScope": {
					"description": "Scope of the token that identifies the payment mean of the customer.\n- MULT: MultipleUse  : The token is generated to recognise a customer for a longer period.\n- SNGL: SingleUse  : The token is generated to recognise  a customer during the lifetime of a transaction.\n",
					"$ref": "#/$defs/SaleTokenScope1Code"
				},
				"ShiftNumber": {
					"description": "Specifies a numeric string with a maximum length of 2 digits.\n",
					"$ref": "#/$defs/Max2NumericText"
				},
				"SplitPayment": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"SponsoredMerchant": {
					"description": "Merchant using the payment services of a payment facilitator, acting as a card acceptor.",
					"anyOf": [
						{
							"$ref": "#/$defs/Organisation26"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Organisation26"
							}
						}
					]
				}
			},
			"additionalProperties": false
		},
		"SaleToPOIServiceRequestV06": {
			"description": "This SaleToPOIServiceRequest message is sent by a sale system to trig a financial service on POI system.",
			"type": "object",
			"properties": {
				"Header": {
					"description": "Set of characteristics related to the protocol.\n",
					"$ref": "#/$defs/Header41"
				},
				"SecurityTrailer": {
					"description": "General cryptographic message syntax (CMS) containing data. protected by a MAC or a digital signature.\n",
					"$ref": "#/$defs/ContentInformationType38"
				},
				"ServiceRequest": {
					"description": "Defines the service to be called.\n",
					"$ref": "#/$defs/ServiceRequest7"
				}
			},
			"required": [
				"Header",
				"ServiceRequest"
			],
			"additionalProperties": false
		},
		"SaleTokenScope1Code": {
			"description": "Scope of the token that identifies the payment mean of the customer.\n- MULT: MultipleUse  : The token is generated to recognise a customer for a longer period.\n- SNGL: SingleUse  : The token is generated to recognise  a customer during the lifetime of a transaction.\n",
			"type": "string",
			"enum": [
				"MULT",
				"SNGL"
			]
		},
		"SensitiveMobileData1": {
			"description": "Sensitive information related to the mobile phone.\n",
			"type": "object",
			"properties": {
				"IMEI": {
					"description": "Specifies a numeric string with a maximum length of 35 digits.\n",
					"$ref": "#/$defs/Max35NumericText"
				},
				"IMSI": {
					"description": "Specifies a numeric string with a maximum length of 35 digits.\n",
					"$ref": "#/$defs/Max35NumericText"
				},
				"MSISDN": {
					"description": "Specifies a numeric string with a maximum length of 35 digits.\n",
					"$ref": "#/$defs/Max35NumericText"
				}
			},
			"required": [
				"MSISDN"
			],
			"additionalProperties": false
		},
		"ServiceRequest7": {
			"description": "Defines the service to be called.\n",
			"type": "object",
			"properties": {
				"BalanceInquiryRequest": {
					"description": "Specifies data element nexessary to request balance information.\n",
					"$ref": "#/$defs/BalanceInquiryRequest7"
				},
				"BatchRequest": {
					"description": "Data to request a batch service.\n",
					"$ref": "#/$defs/BatchRequest6"
				},
				"CardAcquisitionRequest": {
					"description": "Data to request to card data acquisition.\n",
					"$ref": "#/$defs/CardAcquisitionRequest3"
				},
				"Context": {
					"description": "Context in which the transaction is performed (payment and sale).\n",
					"$ref": "#/$defs/CardPaymentContext30"
				},
				"Environment": {
					"description": "Environment of the transaction.\n",
					"$ref": "#/$defs/CardPaymentEnvironment80"
				},
				"LoyaltyRequest": {
					"description": "Data to request a loyalty service. A loyalty request contents : the loyalty transaction request and the loyalty data if any.\n",
					"$ref": "#/$defs/LoyaltyRequest6"
				},
				"EnableServiceRequest": {
					"description": "Data to request to enable a service.\n",
					"$ref": "#/$defs/EnableServiceRequest6"
				},
				"PaymentRequest": {
					"description": "Data required to request a Payment.\n",
					"$ref": "#/$defs/PaymentRequest6"
				},
				"ReversalRequest": {
					"description": "Data to request a reversal.\n",
					"$ref": "#/$defs/ReversalRequest6"
				},
				"SupplementaryData": {
					"description": "Additional information incorporated as an extension to the message.",
					"anyOf": [
						{
							"$ref": "#/$defs/SupplementaryData1"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/SupplementaryData1"
							}
						}
					]
				},
				"StoredValueRequest": {
					"description": "Data to request a stored value service (prepaid card or account).\n",
					"$ref": "#/$defs/StoredValueRequest7"
				},
				"ServiceContent": {
					"description": "List of specific services for ServiceRequest\n- FSPQ: FinancialPaymentRequest  : The Sale System requests to the POI System to perform a payment(Purchase/Refund/PWCB/MOTO Payment/...).\n- FSRQ: FinancialReversalRequest  : The Sale System requests to the POI System to perform a reversal partial or complete to cancel a former payment service.\n- FSIQ: FinancialBalanceInquiryRequest  : The Sale System requests to the POI System to perform balance inquiry on the main account.\n- FSBQ: FinancialBatchRequest  : The Batch message pair is used to request or get the result of transactions (payment, loyalty and reversal) performed without connection to the Sale system (Payment delivery).\n- FSLQ: FinancialLoyaltyRequest  : The Sale System requests to the POI System a loyalty service like loading or redeem.\n- FSVQ: FinancialStoredValueRequest  : The Sale System requests to the POI System to manage a stored value card or account (eg. Load, Payment, Reimbursement).\n- FSEQ: FinancialEnableServiceRequest  : The Sale System requests to the POI System to enable a service on its side.\n- FSAQ: FinancialCardAcquisitionRequest  : The Sale System requests to the POI System to handle a card data acquisition on the card reader.\n- FSCQ: FinancialReconciliationRequest  : The Sale System request to the POI System different kinds of transaction reconciliation. \n",
					"$ref": "#/$defs/RetailerService2Code"
				}
			},
			"required": [
				"Context",
				"Environment",
				"ServiceContent"
			],
			"additionalProperties": false
		},
		"SignedData9": {
			"description": "Digital signatures of data from one or several signers.\n",
			"type": "object",
			"properties": {
				"Certificate": {
					"description": "Chain of X.509 certificates.",
					"anyOf": [
						{
							"$ref": "#/$defs/Max5000Binary"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Max5000Binary"
							}
						}
					]
				},
				"DigestAlgorithm": {
					"description": "Identification of digest algorithm applied before signature.",
					"anyOf": [
						{
							"$ref": "#/$defs/AlgorithmIdentification36"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/AlgorithmIdentification36"
							}
						}
					]
				},
				"EncapsulatedContent": {
					"description": "Data to authenticate.\n",
					"$ref": "#/$defs/EncapsulatedContent3"
				},
				"Signer": {
					"description": "Digital signature and identification of a signer.",
					"anyOf": [
						{
							"$ref": "#/$defs/Signer8"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Signer8"
							}
						}
					]
				},
				"Version": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				}
			},
			"additionalProperties": false
		},
		"Signer8": {
			"description": "Entity who has signed the data and its digital signature.\n",
			"type": "object",
			"properties": {
				"DigestAlgorithm": {
					"description": "Cryptographic algorithm and parameters of digests.\n",
					"$ref": "#/$defs/AlgorithmIdentification36"
				},
				"SignedAttributes": {
					"description": "Collection of attributes that are signed.",
					"anyOf": [
						{
							"$ref": "#/$defs/GenericInformation1"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/GenericInformation1"
							}
						}
					]
				},
				"SignerIdentification": {
					"description": "Identification of a cryptographic asymmetric key.\n",
					"$ref": "#/$defs/Recipient13Choice"
				},
				"Signature": {
					"description": "Specifies a binary string with a maximum length of 3000 binary bytes.\n",
					"$ref": "#/$defs/Max3000Binary"
				},
				"SignatureAlgorithm": {
					"description": "Identification of a cryptographic algorithm and parameters for digital signatures.\n",
					"$ref": "#/$defs/AlgorithmIdentification33"
				},
				"Version": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				}
			},
			"required": [
				"DigestAlgorithm",
				"Signature",
				"SignatureAlgorithm"
			],
			"additionalProperties": false
		},
		"SimpleIdentificationInformation4": {
			"description": "Information related to an identification, for example, party identification or account identification.\n",
			"type": "object",
			"properties": {
				"Identification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"Identification"
			],
			"additionalProperties": false
		},
		"StoredValueAccount2": {
			"description": "Identification of the stored value account or the stored value card (Prepaid card).\n",
			"type": "object",
			"properties": {
				"AccountType": {
					"description": "Type of stored value account.\n- BNKA: BankPrepaidAccount  : Prepaid account managed by a financial institution for low income customers.\n- CWVC: CarwashVoucher  : Car wash specific account.\n- CPYA: CompanyPrepaidAccount  : Specific prepaid account for companies or professionals expenses.\n- ELMY: ElectronicMoneyAccount  : Account supporting e-money issued by an electronic money issuer.\n- GIFT: GiftCard  : Payment mean issued by retailers or banks as a substitute to a non-monetary gift. Usually, this Stored Value item is used only once.\n- GCER: GiftCertificate  : Certificate to be given to a customer. Usually one shot voucher.\n- MLVC: MealVoucher  : Meal and check voucher for restaurants.\n- OLVC: OnlineVoucher  : Voucher that can be used online once or in several times.\n- MERC: MerchantAccount  : Prepaid account open with a merchant or big retailers.\n- OTHR: OtherPrepaidAccount  : Other non listed stored value instrument.\n- PHON: PhoneCard  : Stored value instrument used to pay telephone services (e.g. card or identifier).\n- CARD: SmartCardTag  : Stored value account hold on the chip of a smart card. \n- TRVL: Travel  : Travel prepaid account.\n",
					"$ref": "#/$defs/StoredValueAccountType1Code"
				},
				"Balance": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"Brand": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Currency": {
					"description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".\n",
					"$ref": "#/$defs/ActiveCurrencyCode"
				},
				"Identification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"IdentificationType": {
					"description": "Type of account identification.\n- ACCT: AccountNumber  : Account identification.\n- BARC: BarCode  : Bar-code with a specific form of identification.\n- ISO2: ISOTrack2  : ISO Track 2 including identification.\n- PHON: PhoneNumber  : A phone number identifies the account on which the phone card is assigned.\n- CPAN: PrimaryAccountNumber  : Standard card identification (card number).\n- PRIV: PrivativeNumbering  : An identification set by a privative application.\n- UUID: UniversalUniqueIdentification  : A Universal Unique Identification code is set for identification.\n",
					"$ref": "#/$defs/CardIdentificationType1Code"
				},
				"EntryMode": {
					"description": "Type of reading of the card data.\n- TAGC: Tag  : Tag reading capabilities (RFID, etc.).\n- PHYS: Physical  : Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.\n- BRCD: BarCode  : Bar code.\n- MGST: MagneticStripe  : Magnetic stripe.\n- CICC: ICC  : ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.\n- DFLE: AccountData  : Account data on file.\n- CTLS: ProximityReader  : Contactless proximity reader.\n- ECTL: EMVProximityReader  : Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).\n- CDFL: CardOnFile  : Card information are stored on a file.\n- SICC: SynchronousIntegratedCircuitCard  : Synchronous ICC - (Integrated Circuit Card) with contact.\n- UNKW: Unknown  : Unknown card reading capability.\n- QRCD: QRCode  : Quick response code.\n- OPTC: OpticalCode  : Optical coded reading capabilities (e.g. barcode, QR code, etc.)\n",
					"$ref": "#/$defs/CardDataReading8Code"
				},
				"OwnerName": {
					"description": "Specifies a character string with a maximum length of 45 characters.\n",
					"$ref": "#/$defs/Max45Text"
				},
				"Provider": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"ExpiryDate": {
					"description": "Specifies a character string with a maximum length of 10 characters.\n",
					"$ref": "#/$defs/Max10Text"
				}
			},
			"additionalProperties": false
		},
		"StoredValueAccountType1Code": {
			"description": "Type of stored value account.\n- BNKA: BankPrepaidAccount  : Prepaid account managed by a financial institution for low income customers.\n- CWVC: CarwashVoucher  : Car wash specific account.\n- CPYA: CompanyPrepaidAccount  : Specific prepaid account for companies or professionals expenses.\n- ELMY: ElectronicMoneyAccount  : Account supporting e-money issued by an electronic money issuer.\n- GIFT: GiftCard  : Payment mean issued by retailers or banks as a substitute to a non-monetary gift. Usually, this Stored Value item is used only once.\n- GCER: GiftCertificate  : Certificate to be given to a customer. Usually one shot voucher.\n- MLVC: MealVoucher  : Meal and check voucher for restaurants.\n- OLVC: OnlineVoucher  : Voucher that can be used online once or in several times.\n- MERC: MerchantAccount  : Prepaid account open with a merchant or big retailers.\n- OTHR: OtherPrepaidAccount  : Other non listed stored value instrument.\n- PHON: PhoneCard  : Stored value instrument used to pay telephone services (e.g. card or identifier).\n- CARD: SmartCardTag  : Stored value account hold on the chip of a smart card. \n- TRVL: Travel  : Travel prepaid account.\n",
			"type": "string",
			"enum": [
				"BNKA",
				"CWVC",
				"CPYA",
				"ELMY",
				"GIFT",
				"GCER",
				"MLVC",
				"OLVC",
				"MERC",
				"OTHR",
				"PHON",
				"CARD",
				"TRVL"
			]
		},
		"StoredValueData7": {
			"description": "Data related to the stored value card.\n",
			"type": "object",
			"properties": {
				"AccountIdentification": {
					"description": "Identification of the stored value account or the stored value card (Prepaid card).\n",
					"$ref": "#/$defs/StoredValueAccount2"
				},
				"Currency": {
					"description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".\n",
					"$ref": "#/$defs/ActiveCurrencyCode"
				},
				"EANUPC": {
					"description": "Specifies a numeric string with a maximum length of 35 digits.\n",
					"$ref": "#/$defs/Max35NumericText"
				},
				"HostTransactionIdentification": {
					"description": "Identification of the transaction in an unambiguous way.\n",
					"$ref": "#/$defs/TransactionIdentifier1"
				},
				"ItemAmount": {
					"description": "Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.\nNote: a zero amount is considered a positive amount.\n",
					"$ref": "#/$defs/ImpliedCurrencyAndAmount"
				},
				"OriginalPOITransaction": {
					"description": "Data associated with the transaction for a potential currency conversion.\n",
					"$ref": "#/$defs/CardPaymentTransaction136"
				},
				"ProductCode": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Provider": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"TransactionType": {
					"description": "Identification of operation to proceed on the stored value account or the stored value card.\n- ACTV: Activate  : Activate the account or the card.\n- DUPL: Duplicate  : Duplicate the code or number provided by the loading or activation.\n- LOAD: Load  : Load the account or the card with money.\n- RESV: Reserve  : Reserve the account (e.g. get an activation code).\n- REVS: Reverse  : Reverse an activation or loading.\n- ULOA: Unload  : Unload the account.\n- CLOS: CloseAccount  : Close the account.\n- DCTV: Deactivate  : Deactivate the account or the card.\n- OPEN: OpenAccount  : Open the account.\n- BALC: Balance  : Balance enquiry.\n",
					"$ref": "#/$defs/StoredValueTransactionType3Code"
				}
			},
			"required": [
				"TransactionType"
			],
			"additionalProperties": false
		},
		"StoredValueRequest7": {
			"description": "Data to request a stored value service (prepaid card or account).\n",
			"type": "object",
			"properties": {
				"Data": {
					"description": "Data related to the stored value card.",
					"anyOf": [
						{
							"$ref": "#/$defs/StoredValueData7"
						},
						{
							"type": "array",
							"minItems": 1,
							"items": {
								"$ref": "#/$defs/StoredValueData7"
							}
						}
					]
				},
				"SaleTransactionIdentification": {
					"description": "Identification of the transaction in an unambiguous way.\n",
					"$ref": "#/$defs/TransactionIdentifier1"
				}
			},
			"required": [
				"Data"
			],
			"additionalProperties": false
		},
		"StoredValueTransactionType3Code": {
			"description": "Identification of operation to proceed on the stored value account or the stored value card.\n- ACTV: Activate  : Activate the account or the card.\n- DUPL: Duplicate  : Duplicate the code or number provided by the loading or activation.\n- LOAD: Load  : Load the account or the card with money.\n- RESV: Reserve  : Reserve the account (e.g. get an activation code).\n- REVS: Reverse  : Reverse an activation or loading.\n- ULOA: Unload  : Unload the account.\n- CLOS: CloseAccount  : Close the account.\n- DCTV: Deactivate  : Deactivate the account or the card.\n- OPEN: OpenAccount  : Open the account.\n- BALC: Balance  : Balance enquiry.\n",
			"type": "string",
			"enum": [
				"ACTV",
				"DUPL",
				"LOAD",
				"RESV",
				"REVS",
				"ULOA",
				"CLOS",
				"DCTV",
				"OPEN",
				"BALC"
			]
		},
		"SupplementaryData1": {
			"description": "Additional information that can not be captured in the structured fields and/or any other specific block.\n",
			"type": "object",
			"properties": {
				"Envelope": {
					"description": "Technical component that contains the validated supplementary data information. This technical envelope allows to segregate the supplementary data information from any other information.\n",
					"$ref": "#/$defs/SupplementaryDataEnvelope1"
				},
				"PlaceAndName": {
					"description": "Specifies a character string with a maximum length of 350 characters.\n",
					"$ref": "#/$defs/Max350Text"
				}
			},
			"required": [
				"Envelope"
			],
			"additionalProperties": false
		},
		"SupplementaryDataEnvelope1": {
			"description": "Technical component that contains the validated supplementary data information. This technical envelope allows to segregate the supplementary data information from any other information.\n",
			"type": "object",
			"patternProperties": {
				"^\\w+$": {
				}
			},
			"additionalProperties": false
		},
		"SupportedPaymentOption2Code": {
			"description": "Specifies the options supported for a payment transaction.\n- PART: PartialApproval  : The entity supports a partial approval of the payment transaction.\n- MSRV: PaymentApprovalOnly  : The entity supports the approval of the payment service along with the decline of additional requested services (as cash-back).\n- INSI: IssuerInstalment  : The sender support IssuerInstalment proposals to the Cardholder.\n- PINQ: PINRequest  : The sender is able to support Single Tap transaction.\n",
			"type": "string",
			"enum": [
				"PART",
				"MSRV",
				"INSI",
				"PINQ"
			]
		},
		"Token1": {
			"description": "Unencrypted sensitive data of a token.\n",
			"type": "object",
			"properties": {
				"PaymentToken": {
					"description": "Specifies a numeric string with a maximum length of 19 digits.\n",
					"$ref": "#/$defs/Max19NumericText"
				},
				"TokenAssuranceData": {
					"description": "Specifies a character string with a maximum length of 140 characters.\n",
					"$ref": "#/$defs/Max140Text"
				},
				"TokenAssuranceMethod": {
					"description": "Specifies a numeric string with a maximum length of 2 digits.\n",
					"$ref": "#/$defs/Max2NumericText"
				},
				"TokenInitiatedIndicator": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"TokenRequestorIdentification": {
					"description": "Specifies a numeric string with a maximum length of 11 digits.\n",
					"$ref": "#/$defs/Max11NumericText"
				},
				"TokenExpiryDate": {
					"description": "Specifies a numeric string with an exact length of 4 digits.\n",
					"$ref": "#/$defs/Exact4NumericText"
				}
			},
			"additionalProperties": false
		},
		"Traceability8": {
			"description": "Identification of partners involved in exchange from the merchant to the issuer, with the relative timestamp of their exchanges.\n",
			"type": "object",
			"properties": {
				"ProtocolName": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"ProtocolVersion": {
					"description": "Specifies a character string with a maximum length of 6 characters.\n",
					"$ref": "#/$defs/Max6Text"
				},
				"RelayIdentification": {
					"description": "Identification of an entity.\n",
					"$ref": "#/$defs/GenericIdentification177"
				},
				"TraceDateTimeIn": {
					"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
					"$ref": "#/$defs/ISODateTime"
				},
				"TraceDateTimeOut": {
					"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
					"$ref": "#/$defs/ISODateTime"
				}
			},
			"required": [
				"RelayIdentification",
				"TraceDateTimeIn",
				"TraceDateTimeOut"
			],
			"additionalProperties": false
		},
		"TrackData2": {
			"description": "Magnetic track or equivalent payment card data.\n",
			"type": "object",
			"properties": {
				"TrackFormat": {
					"description": "Use to identify format of a track on a card or other documents like checks.\n- AAMV: AAMVAFormat  : American driver license.\n- CMC7: CMC7CheckFormat  : Magnetic Ink Character Recognition, using the CMC-7 font - ISO 1004 Line at the bottom of a check containing the bank account and the check number.\n- E13B: E13BCheckFormat  : Magnetic Ink Character Recognition, using the E-13B font) Line at the bottom of a check containing the bank account and the check number.\n- ISOF: ISOFormat  : ISO card track format - ISO 7813 - ISO 4909.\n- JIS1: JISIFormat  : Japanese track format I.\n- JIS2: JISIIFormat  : Japanese track format II.\n",
					"$ref": "#/$defs/TrackFormat1Code"
				},
				"TrackNumber": {
					"description": "Number of objects represented as an integer.\n",
					"$ref": "#/$defs/Number"
				},
				"TrackValue": {
					"description": "Specifies a character string with a maximum length of 140 characters.\n",
					"$ref": "#/$defs/Max140Text"
				}
			},
			"required": [
				"TrackValue"
			],
			"additionalProperties": false
		},
		"TrackFormat1Code": {
			"description": "Use to identify format of a track on a card or other documents like checks.\n- AAMV: AAMVAFormat  : American driver license.\n- CMC7: CMC7CheckFormat  : Magnetic Ink Character Recognition, using the CMC-7 font - ISO 1004 Line at the bottom of a check containing the bank account and the check number.\n- E13B: E13BCheckFormat  : Magnetic Ink Character Recognition, using the E-13B font) Line at the bottom of a check containing the bank account and the check number.\n- ISOF: ISOFormat  : ISO card track format - ISO 7813 - ISO 4909.\n- JIS1: JISIFormat  : Japanese track format I.\n- JIS2: JISIIFormat  : Japanese track format II.\n",
			"type": "string",
			"enum": [
				"AAMV",
				"CMC7",
				"E13B",
				"ISOF",
				"JIS1",
				"JIS2"
			]
		},
		"TransactionAction1Code": {
			"description": "Action to realise on a transaction.\n- STAR: StartTransaction  : Start a transaction by a swipe ahead mechanism, with the services which are enabled.\n- STOP: Stop  : Keep quite after a swipe ahead mechanism.\n",
			"type": "string",
			"enum": [
				"STAR",
				"STOP"
			]
		},
		"TransactionChannel5Code": {
			"description": "Identifies the type of the communication channels used by the cardholder to the acceptor system.\n- MAIL: MailOrder  : Mail order.\n- TLPH: TelephoneOrder  : Telephone order.\n- ECOM: ElectronicCommerce  : Electronic commerce.\n- TVPY: TelevisionPayment  : Payment on television.\n- SECM: SecuredElectronicCommerce  : Electronic commerce with cardholder authentication.\n- MOBL: MobilePayment  : Payment performed through a cardholder mobile device.\n- MPOS: MobilePOS  : Payment performed through a merchant mobile device.\n",
			"type": "string",
			"enum": [
				"MAIL",
				"TLPH",
				"ECOM",
				"TVPY",
				"SECM",
				"MOBL",
				"MPOS"
			],
			"example": "MAIL"
		},
		"TransactionEnvironment1Code": {
			"description": "Indicates the environment of the transaction.\n- MERC: Merchant  : Merchant environment.\n- PRIV: Private  : Private environment.\n- PUBL: Public  : Public environment.\n",
			"type": "string",
			"enum": [
				"MERC",
				"PRIV",
				"PUBL"
			],
			"example": "MERC"
		},
		"TransactionIdentifier1": {
			"description": "Identification of the transaction in an unambiguous way.\n",
			"type": "object",
			"properties": {
				"TransactionDateTime": {
					"description": "A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.\n",
					"$ref": "#/$defs/ISODateTime"
				},
				"TransactionReference": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"TransactionDateTime",
				"TransactionReference"
			],
			"additionalProperties": false
		},
		"TransactionToPerform6Choice": {
			"description": "Content of the batch request message.\n",
			"type": "object",
			"properties": {
				"LoyaltyRequest": {
					"description": "Data to request a loyalty service. A loyalty request contents : the loyalty transaction request and the loyalty data if any.\n",
					"$ref": "#/$defs/LoyaltyRequest6"
				},
				"PaymentRequest": {
					"description": "Data required to request a Payment.\n",
					"$ref": "#/$defs/PaymentRequest6"
				},
				"ReversalRequest": {
					"description": "Data to request a reversal.\n",
					"$ref": "#/$defs/ReversalRequest6"
				}
			},
			"additionalProperties": false
		},
		"TransactionVerificationResult4": {
			"description": "Result of performed verifications for the transaction.\n",
			"type": "object",
			"properties": {
				"AdditionalResult": {
					"description": "Specifies a character string with a maximum length of 500 characters.\n",
					"$ref": "#/$defs/Max500Text"
				},
				"Method": {
					"description": "Methods used to authenticate a person or a card.\n- NPIN: OnLinePIN  : On-line PIN authentication (Personal Identification Number).\n- PPSG: PaperSignature  : Handwritten paper signature.\n- PSWD: Password  : Authentication by a password.\n- SCRT: SecureCertificate  : Electronic commerce transaction secured with the X.509 certificate of a customer.\n- SCNL: SecuredChannel  : Channel-encrypted transaction.\n- SNCT: SecureNoCertificate  : Secure electronic transaction without cardholder certificate.\n- CPSG: SignatureCapture  : Electronic signature capture (handwritten signature).\n- ADDB: BillingAddressVerification  : Cardholder billing address verification.\n- BIOM: Biometry  : Biometric authentication of the cardholder.\n- CDHI: CardholderIdentificationData  : Cardholder data provided for verification, for instance social security number, driver license number, passport number.\n- CRYP: CryptogramVerification  : Verification of a cryptogram generated by a chip card or another device, for instance ARQC (Authorisation Request Cryptogram).\n- CSCV: CSCVerification  : Verification of Card Security Code.\n- PSVE: PassiveAuthentication  : Authentication based on statistical cardholder behaviour.\n- CSEC: SecureElectronicCommerce  : Authentication performed during a secure electronic commerce transaction.\n- ADDS: ShippingAddressVerification  : Cardholder shipping address verification.\n- MANU: ManualVerification  : Manual verification, for example passport or drivers license.\n- FPIN: OfflinePIN  : Off-line PIN authentication (Personal Identification Number).\n- TOKP: PaymentToken  : Verification or authentication related to the use of a payment token, for instance the validation of the authorised use of a token.\n",
					"$ref": "#/$defs/AuthenticationMethod6Code"
				},
				"Result": {
					"description": "Result of the verification.\n- FAIL: Failed  : Verification failed.\n- MISS: Missing  : Information required to perform the verification was missing.\n- NOVF: NotPerformed  : Verification has not been performed.\n- PART: PartialMatch  : Verification was partially successful.\n- SUCC: Successful  : Verification was successful.\n- ERRR: TechnicalError  : Device or entity to perform the verification was unavailable.\n",
					"$ref": "#/$defs/Verification1Code"
				},
				"VerificationEntity": {
					"description": "Entity or device that has performed the verification.\n- ICCD: ICC  : Application in the chip card (Integrated Circuit Card), for instance an offline PIN verification.\n- AGNT: AuthorisedAgent  : Authorisation agent of the issuer.\n- MERC: Merchant  : Merchant (for example signature verification by the attendant).\n- ACQR: Acquirer  : Acquirer of the transaction.\n- ISSR: Issuer  : Card issuer.\n- TRML: Terminal  : Secure application in the terminal.\n",
					"$ref": "#/$defs/AuthenticationEntity2Code"
				}
			},
			"required": [
				"Method"
			],
			"additionalProperties": false
		},
		"TrueFalseIndicator": {
			"description": "A flag indicating a True or False value.\n",
			"type": "boolean"
		},
		"TypeOfAmount8Code": {
			"description": "Qualifies the amount associated with the transaction.\n- ACTL: Actual  : Actual amount.\n- ESTM: Estimated  : Estimated amount (the final amount could be above or below).\n- MAXI: Maximum  : Maximum amount (the final amount must be less or equal).\n- DFLT: Default  : Default amount.\n- RPLT: Replacement  : Replacement amount.\n- INCR: Incremental  : Incremental amount for reservation.\n- DECR: Decremental  : Decremental amount for reservation.\n- RESD: Reserved  : Reserved or updated reserved amount for reservation.\n",
			"type": "string",
			"enum": [
				"ACTL",
				"ESTM",
				"MAXI",
				"DFLT",
				"RPLT",
				"INCR",
				"DECR",
				"RESD"
			],
			"example": "ACTL"
		},
		"UPICIdentifier": {
			"description": "Universal Payment Identification Code (UPIC). Identifier used by the New York Clearing House to mask confidential data, such as bank accounts and bank routing numbers. UPIC numbers remain with business customers, regardless of banking relationship changes.\n",
			"type": "string",
			"pattern": "^([0-9]{8,17})$",
			"example": "12345678"
		},
		"UnitOfMeasure6Code": {
			"description": "Unit of measure of the item purchased.\n- PIEC: Piece  : Standard length of cloth, wallpaper, as an item for sale or amount of a substance.\n- TONS: Ton  : Measure of weight, in Britain 2240lb (long ton)and in the US 2000lb (short ton).\n- FOOT: Foot  : Unit of length equal to 1/3 yard.\n- GBGA: GBGallon  : Unit of volume that is equal to 8 pints.\n- USGA: USGallon  : Unit of volume that is equal to 8 pints.\n- GRAM: Gram  : Unit of measure that is equal to a 1, 000th of a kilo.\n- INCH: Inch  : Measure of length equal to 2.54 cm.\n- KILO: Kilogram  : Basic unit of mass in the SI system, 1000 grams.\n- PUND: Pound  : Unit of weight equal to 0.454 kilograms.\n- METR: Metre  : Unit of length in the metric system, equal to 39.37 inches.\n- CMET: Centimetre  : Unit of measure that is equal to one hundredth of a metre.\n- MMET: Millimetre  : Unit of measure that is a thousandth of one metre.\n- LITR: Litre  : Unit of volume that is equal to a thousand cubic centimetres.\n- CELI: Centilitre  : Unit of volume that is equal to one hundredth of a litre.\n- MILI: MilliLitre  : Unit of volume that is equal to one thousandth of a litre.\n- GBOU: GBOunce  : Unit of weight equal to a sixteenth of a pound.\n- USOU: USOunce  : Unit of weight equal to a sixteenth of a pound.\n- GBQA: GBQuart  : Unit of volume that is equal to 2 pints.\n- USQA: USQuart  : Unit of volume that is equal to 2 pints.\n- GBPI: GBPint  : Unit of volume that is equal to 568 cubic centimetres.\n- USPI: USPint  : Unit of volume that is equal to 473 cubic centimetres.\n- MILE: Mile  : Unit of length equal to 1, 760 yards.\n- KMET: Kilometre  : Unit of measure that is equal to 1, 000 meters.\n- YARD: Yard  : Unit of length equal to 3 feet or 0.9144 metre.\n- SQKI: SquareKilometre  : Measure of a surface, one kilometre by one kilometre.\n- HECT: Hectare  : Unit of measure that is equal to 10, 000 square meters.\n- ARES: Are  : Unit of measure equal to a 100 square meters.\n- SMET: SquareMetre  : Measure of a surface, one metre by one metre.\n- SCMT: SquareCentimetre  : Measure of a surface, one centimetre by one centimetre.\n- SMIL: SquareMillimetre  : Measure of a surface, one millimetre by one millimetre.\n- SQMI: SquareMile  : Measure of a surface, one mile by one mile.\n- SQYA: SquareYard  : Measure of a surface, one yard by one yard.\n- SQFO: SquareFoot  : Measure of a surface, one foot by one foot.\n- SQIN: SquareInch  : Measure of a surface, one inch by one inch.\n- ACRE: Acre  : Unit of measure equal to 4, 840 square yards.\n- KWHO: KilowattHours  : Unit of measure that is equal to the power consumption of one kilowatt during one hour.\n- DGEU: DieselGallonEquivalent  : Amount of fuel alternative equal to one gallon of diesel.\n- GGEU: GasolineGallonEquivalent  : Amount of fuel alternative equal to one gallon of gasoline.\n",
			"type": "string",
			"enum": [
				"PIEC",
				"TONS",
				"FOOT",
				"GBGA",
				"USGA",
				"GRAM",
				"INCH",
				"KILO",
				"PUND",
				"METR",
				"CMET",
				"MMET",
				"LITR",
				"CELI",
				"MILI",
				"GBOU",
				"USOU",
				"GBQA",
				"USQA",
				"GBPI",
				"USPI",
				"MILE",
				"KMET",
				"YARD",
				"SQKI",
				"HECT",
				"ARES",
				"SMET",
				"SCMT",
				"SMIL",
				"SQMI",
				"SQYA",
				"SQFO",
				"SQIN",
				"ACRE",
				"KWHO",
				"DGEU",
				"GGEU"
			],
			"example": "PIEC"
		},
		"UserInterface4Code": {
			"description": "Destination of the message.\n- CDSP: CardholderDisplay  : Cardholder display or interface.\n- CRCP: CardholderReceipt  : Cardholder receipt.\n- MDSP: MerchantDisplay  : Merchant display or interface.\n- MRCP: MerchantReceipt  : Merchant receipt.\n- CRDO: OtherCardholderInterface  : Other interface of the cardholder, for instance e-mail or smartphone message.\n",
			"type": "string",
			"enum": [
				"CDSP",
				"CRCP",
				"MDSP",
				"MRCP",
				"CRDO"
			]
		},
		"Vehicle1": {
			"description": "Information related to a vehicle used during a transaction.\n",
			"type": "object",
			"properties": {
				"AdditionalVehicleData": {
					"description": "Additional information related to the vehicle.",
					"anyOf": [
						{
							"$ref": "#/$defs/Vehicle2"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Vehicle2"
							}
						}
					]
				},
				"DriverOrVehicleCard": {
					"description": "Sensitive data associated with a payment card.\n",
					"$ref": "#/$defs/PlainCardData17"
				},
				"Hubometer": {
					"description": "Number of objects represented as a decimal number, for example 0.75 or 45.6.\n",
					"$ref": "#/$defs/DecimalNumber"
				},
				"MaintenanceIdentification": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"Odometer": {
					"description": "Number of objects represented as a decimal number, for example 0.75 or 45.6.\n",
					"$ref": "#/$defs/DecimalNumber"
				},
				"ReferHours": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"ReplacementCar": {
					"description": "A flag indicating a True or False value.\n",
					"$ref": "#/$defs/TrueFalseIndicator"
				},
				"TrailerHours": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"TrailerNumber": {
					"description": "Specifies a numeric string with a maximum length of 35 digits.\n",
					"$ref": "#/$defs/Max35NumericText"
				},
				"UnitNumber": {
					"description": "Specifies a numeric string with a maximum length of 35 digits.\n",
					"$ref": "#/$defs/Max35NumericText"
				},
				"VehicleNumber": {
					"description": "Specifies a numeric string with a maximum length of 35 digits.\n",
					"$ref": "#/$defs/Max35NumericText"
				},
				"VehicleTag": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"VehicleTagEntryMode": {
					"description": "Type of reading of the card data.\n- TAGC: Tag  : Tag reading capabilities (RFID, etc.).\n- PHYS: Physical  : Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.\n- BRCD: BarCode  : Bar code.\n- MGST: MagneticStripe  : Magnetic stripe.\n- CICC: ICC  : ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.\n- DFLE: AccountData  : Account data on file.\n- CTLS: ProximityReader  : Contactless proximity reader.\n- ECTL: EMVProximityReader  : Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).\n- CDFL: CardOnFile  : Card information are stored on a file.\n",
					"$ref": "#/$defs/CardDataReading5Code"
				}
			},
			"additionalProperties": false
		},
		"Vehicle2": {
			"description": "Additional information related to a vehicle.\n",
			"type": "object",
			"properties": {
				"Data": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				},
				"EntryMode": {
					"description": "Type of reading of the card data.\n- TAGC: Tag  : Tag reading capabilities (RFID, etc.).\n- PHYS: Physical  : Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.\n- BRCD: BarCode  : Bar code.\n- MGST: MagneticStripe  : Magnetic stripe.\n- CICC: ICC  : ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.\n- DFLE: AccountData  : Account data on file.\n- CTLS: ProximityReader  : Contactless proximity reader.\n- ECTL: EMVProximityReader  : Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).\n- CDFL: CardOnFile  : Card information are stored on a file.\n",
					"$ref": "#/$defs/CardDataReading5Code"
				},
				"Type": {
					"description": "Specifies a character string with a maximum length of 35 characters.\n",
					"$ref": "#/$defs/Max35Text"
				}
			},
			"required": [
				"Data"
			],
			"additionalProperties": false
		},
		"Verification1Code": {
			"description": "Result of the verification.\n- FAIL: Failed  : Verification failed.\n- MISS: Missing  : Information required to perform the verification was missing.\n- NOVF: NotPerformed  : Verification has not been performed.\n- PART: PartialMatch  : Verification was partially successful.\n- SUCC: Successful  : Verification was successful.\n- ERRR: TechnicalError  : Device or entity to perform the verification was unavailable.\n",
			"type": "string",
			"enum": [
				"FAIL",
				"MISS",
				"NOVF",
				"PART",
				"SUCC",
				"ERRR"
			]
		}
	}
}