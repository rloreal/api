/**
* nexo retailer API
* API defining resources for interactions between POI and POS, using underlying nexo messages # Summary The **nexo retailer** *Protocol Version 8* offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to exchange data securely, between a Point Of sale System (POS) and Point Of Interaction (POI) System. The nexo retailer protocol reduces sale to payment terminal communication complexity and costs,  addresses the problem of multiple private standards, aligned with the goals of nexo association, enables point of sale system providers to use a single interface with multiple payment systems,  for multiple payment instruments, and payment methods,  with a clear delimitation between with the retail world and the payment world.  The possible approaches are:   * Multiple POS to Multiple POI    * One to One POS to POI   * App 2 App when POS and POI are embedded in a single device    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a nexo compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the nexo retailer message usage guide if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Message Usage Guide of the nexo retailer protocol.**    It is not a replacement in any sense.   The main specification is always the nexo Message Usage Guide, with ISO20022 definitions of the protocol (MDR Part 1 and 2).   It is highly recommended to read through the standards documentations in conjunction with this API definition.    Namely regarding :     * The rules regarding dialogue initiation, termination and combination      * The rules and constraints applied to data fields, depending on the use case     * The error management on Sale system and POI system sides     * The security that can be applied to the protocol * **This API definition contains the messages for all different approaches defined in the Message Usage Guide.**  * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.1.md]        \"If in is \"header\"and the name field is \"Accept\", \"Content-Type\"or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\"will not be defined in this file at any place.      The elements \"Content-Type\"and \"Authorization\"are implicitly defined by the OpenApi tags \"content\"and \"security\".     * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a nexo complient API in addition to the elements defined in this file. 
*
* The version of the OpenAPI document: 2025-01
* Contact: romain.loreal@lorealconsulting.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.lorealconsulting.nexoretail.kotlin.models

import com.lorealconsulting.nexoretail.kotlin.models.MessageContent
import com.lorealconsulting.nexoretail.kotlin.models.MessageContentSignature
import com.lorealconsulting.nexoretail.kotlin.models.OutputBarcode

import kotlinx.serialization.Serializable
/**
 * Message to be displayed to the cardholder or the cashier. MessageToPresent
 * @param msgDstn Destination of the message. MessageDestination\\n\\n- ***CDSP*** : **CardholderDisplay** Definition: Cardholder display or interface.  \\n\\n- ***CRCP*** : **CardholderReceipt** Definition: Cardholder receipt.  \\n\\n- ***MDSP*** : **MerchantDisplay** Definition: Merchant display or interface.  \\n\\n- ***MRCP*** : **MerchantReceipt** Definition: Merchant receipt.  \\n\\n- ***CRDO*** : **OtherCardholderInterface** Definition: Other interface of the cardholder, for instance e-mail or smartphone message.  
 * @param atId 
 * @param frmt Message format. Format\\n\\n- ***BARC*** : **Barcode** Definition: Barcode to output in several possible format.  \\n\\n- ***MENT*** : **MenuEntry** Definition: A text to display as a menu before requesting an input.  \\n\\n- ***MREF*** : **MessageReference** Definition: Predefined configured messages, identified by a reference.  \\n\\n- ***SREF*** : **ScreenReference** Definition: Screen to display identified by a reference.  \\n\\n- ***TEXT*** : **SimpleText** Definition: Text without format attributes.  \\n\\n- ***HTML*** : **XHTML** Definition: XHTML document which includes a subset of the XHTML output tag.  
 * @param infQlfr Qualification of the information to sent to an output logical device. InformationQualifier\\n\\n- ***CUSA*** : **CustomerAssistance** Definition: Input of the Cardholder POI interface which can be entered by the Cashier to assist the Customer.  \\n\\n- ***DISP*** : **Display** Definition: Standard display interface.  \\n\\n- ***DOCT*** : **Document** Definition: When the POI System wants to print specific document (check, dynamic currency conversion ...). Used by the Sale System when the printer is not located on the Sale System.  \\n\\n- ***ERRO*** : **Error** Definition: The information is related to an error situation occurring on the message sender.  \\n\\n- ***INPT*** : **Input** Definition: Answer to a question or information to be entered by the Cashier or the Customer, at the request of the POI Terminal or the Sale Terminal.  \\n\\n- ***POIR*** : **POIReplication** Definition: Information displayed on the Cardholder POI interface, replicated on the Cashier interface.  \\n\\n- ***RCPT*** : **Receipt** Definition: Where you print the Payment receipt that could be located on the Sale System or in some cases a restricted Sale ticket on the POI Terminal.  \\n\\n- ***SOND*** : **Sound** Definition: Standard sound interface.  \\n\\n- ***STAT*** : **Status** Definition: The information is a new state on which the message sender is entering. For instance, during a payment, the POI could display to the Cashier that POI request an authorisation to the host acquirer.  \\n\\n- ***VCHR*** : **Voucher** Definition: Coupons, voucher or special ticket generated by the POI or the Sale System and to be printed.  
 * @param minDispTm Number of seconds the message has to be displayed. MinimumDisplayTime
 * @param msgCntt 
 * @param msgCnttSgntr 
 * @param outptBrcd 
 * @param rspnReqrdFlg Flag to request a message response. ResponseRequiredFlag
 */
@Serializable
data class MessageToPresent(
    /* Destination of the message. MessageDestination\\n\\n- ***CDSP*** : **CardholderDisplay** Definition: Cardholder display or interface.  \\n\\n- ***CRCP*** : **CardholderReceipt** Definition: Cardholder receipt.  \\n\\n- ***MDSP*** : **MerchantDisplay** Definition: Merchant display or interface.  \\n\\n- ***MRCP*** : **MerchantReceipt** Definition: Merchant receipt.  \\n\\n- ***CRDO*** : **OtherCardholderInterface** Definition: Other interface of the cardholder, for instance e-mail or smartphone message.   */
    val msgDstn: MessageToPresent.MsgDstn,
    /*  */
    val atId: kotlin.String? = null,
    /* Message format. Format\\n\\n- ***BARC*** : **Barcode** Definition: Barcode to output in several possible format.  \\n\\n- ***MENT*** : **MenuEntry** Definition: A text to display as a menu before requesting an input.  \\n\\n- ***MREF*** : **MessageReference** Definition: Predefined configured messages, identified by a reference.  \\n\\n- ***SREF*** : **ScreenReference** Definition: Screen to display identified by a reference.  \\n\\n- ***TEXT*** : **SimpleText** Definition: Text without format attributes.  \\n\\n- ***HTML*** : **XHTML** Definition: XHTML document which includes a subset of the XHTML output tag.   */
    val frmt: MessageToPresent.Frmt? = null,
    /* Qualification of the information to sent to an output logical device. InformationQualifier\\n\\n- ***CUSA*** : **CustomerAssistance** Definition: Input of the Cardholder POI interface which can be entered by the Cashier to assist the Customer.  \\n\\n- ***DISP*** : **Display** Definition: Standard display interface.  \\n\\n- ***DOCT*** : **Document** Definition: When the POI System wants to print specific document (check, dynamic currency conversion ...). Used by the Sale System when the printer is not located on the Sale System.  \\n\\n- ***ERRO*** : **Error** Definition: The information is related to an error situation occurring on the message sender.  \\n\\n- ***INPT*** : **Input** Definition: Answer to a question or information to be entered by the Cashier or the Customer, at the request of the POI Terminal or the Sale Terminal.  \\n\\n- ***POIR*** : **POIReplication** Definition: Information displayed on the Cardholder POI interface, replicated on the Cashier interface.  \\n\\n- ***RCPT*** : **Receipt** Definition: Where you print the Payment receipt that could be located on the Sale System or in some cases a restricted Sale ticket on the POI Terminal.  \\n\\n- ***SOND*** : **Sound** Definition: Standard sound interface.  \\n\\n- ***STAT*** : **Status** Definition: The information is a new state on which the message sender is entering. For instance, during a payment, the POI could display to the Cashier that POI request an authorisation to the host acquirer.  \\n\\n- ***VCHR*** : **Voucher** Definition: Coupons, voucher or special ticket generated by the POI or the Sale System and to be printed.   */
    val infQlfr: MessageToPresent.InfQlfr? = null,
    /* Number of seconds the message has to be displayed. MinimumDisplayTime */
    val minDispTm: java.math.BigDecimal? = null,
    val msgCntt: MessageContent? = null,
    val msgCnttSgntr: MessageContentSignature? = null,
    val outptBrcd: OutputBarcode? = null,
    /* Flag to request a message response. ResponseRequiredFlag */
    val rspnReqrdFlg: kotlin.Boolean? = null
)
{
    /**
    * Destination of the message. MessageDestination\\n\\n- ***CDSP*** : **CardholderDisplay** Definition: Cardholder display or interface.  \\n\\n- ***CRCP*** : **CardholderReceipt** Definition: Cardholder receipt.  \\n\\n- ***MDSP*** : **MerchantDisplay** Definition: Merchant display or interface.  \\n\\n- ***MRCP*** : **MerchantReceipt** Definition: Merchant receipt.  \\n\\n- ***CRDO*** : **OtherCardholderInterface** Definition: Other interface of the cardholder, for instance e-mail or smartphone message.  
    * Values: CDSP,CRCP,MDSP,MRCP,CRDO
    */
    enum class MsgDstn(val value: kotlin.String){
        CDSP("CDSP"),
        CRCP("CRCP"),
        MDSP("MDSP"),
        MRCP("MRCP"),
        CRDO("CRDO");
    }
    /**
    * Message format. Format\\n\\n- ***BARC*** : **Barcode** Definition: Barcode to output in several possible format.  \\n\\n- ***MENT*** : **MenuEntry** Definition: A text to display as a menu before requesting an input.  \\n\\n- ***MREF*** : **MessageReference** Definition: Predefined configured messages, identified by a reference.  \\n\\n- ***SREF*** : **ScreenReference** Definition: Screen to display identified by a reference.  \\n\\n- ***TEXT*** : **SimpleText** Definition: Text without format attributes.  \\n\\n- ***HTML*** : **XHTML** Definition: XHTML document which includes a subset of the XHTML output tag.  
    * Values: BARC,MENT,MREF,SREF,TEXT,HTML
    */
    enum class Frmt(val value: kotlin.String){
        BARC("BARC"),
        MENT("MENT"),
        MREF("MREF"),
        SREF("SREF"),
        TEXT("TEXT"),
        HTML("HTML");
    }
    /**
    * Qualification of the information to sent to an output logical device. InformationQualifier\\n\\n- ***CUSA*** : **CustomerAssistance** Definition: Input of the Cardholder POI interface which can be entered by the Cashier to assist the Customer.  \\n\\n- ***DISP*** : **Display** Definition: Standard display interface.  \\n\\n- ***DOCT*** : **Document** Definition: When the POI System wants to print specific document (check, dynamic currency conversion ...). Used by the Sale System when the printer is not located on the Sale System.  \\n\\n- ***ERRO*** : **Error** Definition: The information is related to an error situation occurring on the message sender.  \\n\\n- ***INPT*** : **Input** Definition: Answer to a question or information to be entered by the Cashier or the Customer, at the request of the POI Terminal or the Sale Terminal.  \\n\\n- ***POIR*** : **POIReplication** Definition: Information displayed on the Cardholder POI interface, replicated on the Cashier interface.  \\n\\n- ***RCPT*** : **Receipt** Definition: Where you print the Payment receipt that could be located on the Sale System or in some cases a restricted Sale ticket on the POI Terminal.  \\n\\n- ***SOND*** : **Sound** Definition: Standard sound interface.  \\n\\n- ***STAT*** : **Status** Definition: The information is a new state on which the message sender is entering. For instance, during a payment, the POI could display to the Cashier that POI request an authorisation to the host acquirer.  \\n\\n- ***VCHR*** : **Voucher** Definition: Coupons, voucher or special ticket generated by the POI or the Sale System and to be printed.  
    * Values: CUSA,DISP,DOCT,ERRO,INPT,POIR,RCPT,SOND,STAT,VCHR
    */
    enum class InfQlfr(val value: kotlin.String){
        CUSA("CUSA"),
        DISP("DISP"),
        DOCT("DOCT"),
        ERRO("ERRO"),
        INPT("INPT"),
        POIR("POIR"),
        RCPT("RCPT"),
        SOND("SOND"),
        STAT("STAT"),
        VCHR("VCHR");
    }
}

