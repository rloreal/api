/**
* nexo retailer API
* API defining resources for interactions between POI and POS, using underlying nexo messages # Summary The **nexo retailer** *Protocol Version 8* offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to exchange data securely, between a Point Of sale System (POS) and Point Of Interaction (POI) System. The nexo retailer protocol reduces sale to payment terminal communication complexity and costs,  addresses the problem of multiple private standards, aligned with the goals of nexo association, enables point of sale system providers to use a single interface with multiple payment systems,  for multiple payment instruments, and payment methods,  with a clear delimitation between with the retail world and the payment world.  The possible approaches are:   * Multiple POS to Multiple POI    * One to One POS to POI   * App 2 App when POS and POI are embedded in a single device    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a nexo compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the nexo retailer message usage guide if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Message Usage Guide of the nexo retailer protocol.**    It is not a replacement in any sense.   The main specification is always the nexo Message Usage Guide, with ISO20022 definitions of the protocol (MDR Part 1 and 2).   It is highly recommended to read through the standards documentations in conjunction with this API definition.    Namely regarding :     * The rules regarding dialogue initiation, termination and combination      * The rules and constraints applied to data fields, depending on the use case     * The error management on Sale system and POI system sides     * The security that can be applied to the protocol * **This API definition contains the messages for all different approaches defined in the Message Usage Guide.**  * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.1.md]        \"If in is \"header\"and the name field is \"Accept\", \"Content-Type\"or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\"will not be defined in this file at any place.      The elements \"Content-Type\"and \"Authorization\"are implicitly defined by the OpenApi tags \"content\"and \"security\".     * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a nexo complient API in addition to the elements defined in this file. 
*
* The version of the OpenAPI document: 2025-01
* Contact: romain.loreal@lorealconsulting.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.lorealconsulting.nexoretail.kotlin.models

import com.lorealconsulting.nexoretail.kotlin.models.SupportedOption

import kotlinx.serialization.Serializable
/**
 * Context of the card payment transaction. PaymentContext
 * @param atId 
 * @param attndncCntxt Human attendance at the POI (Point Of Interaction) location during the transaction. AttendanceContext\\n\\n- ***ATTD*** : **Attended** Definition: Attended payment, with an attendant.  \\n\\n- ***SATT*** : **SemiAttended** Definition: Semi-attended, including self checkout. An attendant supervises several payment, and could be called to help the cardholder.  \\n\\n- ***UATT*** : **Unattended** Definition: Unattended payment, no attendant present.  
 * @param attndntLang Language used to display messages to the attendant.  Reference ISO 639-1 (alpha-2) et ISO 639-2 (alpha-3). AttendantLanguage
 * @param attndntMsgCpbl Indicates whether a message can be sent or not on an attendant display (attendant display present or not). AttendantMessageCapable
 * @param bizArea Defines the business context of this transaction that could imply specific scheme rules. BusinessArea\\n\\n- ***AIBD*** : **ArtificialIntelligenceBasedDecision** Definition: The payment is initiated by an artificial intelligence based decision.  \\n\\n- ***PPAY*** : **PlainPayment** Definition: The card is used to perform a plain payment.  \\n\\n- ***TKNF*** : **TransitKnownFare** Definition: The card is used in a Transit business case where the fare amount is known when the transaction is initiated.  \\n\\n- ***EOPT*** : **EnergyOpenPayment** Definition: Indicates when the card is used in an energy business case where the amount could not be assessed when the transaction is initiated.  \\n\\n- ***TOPT*** : **TransitOpenPayment** Definition: Indicates when the card is used in a transit business case where the fare amount is not known when the transaction is initiated.  
 * @param cardDataNtryMd Entry mode of the card data. CardDataEntryMode\\n\\n- ***TAGC*** : **Tag** Definition: Tag reading capabilities (RFID, etc.).  \\n\\n- ***PHYS*** : **Physical** Definition: Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.  \\n\\n- ***BRCD*** : **BarCode** Definition: Bar code.  \\n\\n- ***MGST*** : **MagneticStripe** Definition: Magnetic stripe.  \\n\\n- ***CICC*** : **ICC** Definition: ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.  \\n\\n- ***DFLE*** : **AccountData** Definition: Account data on file.  \\n\\n- ***CTLS*** : **ProximityReader** Definition: Contactless proximity reader.  \\n\\n- ***ECTL*** : **EMVProximityReader** Definition: Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).  \\n\\n- ***CDFL*** : **CardOnFile** Definition: Card information are stored on a file.  \\n\\n- ***SICC*** : **SynchronousIntegratedCircuitCard** Definition: Synchronous ICC - (Integrated Circuit Card) with contact.  \\n\\n- ***UNKW*** : **Unknown** Definition: Unknown card reading capability.  \\n\\n- ***QRCD*** : **QRCode** Definition: Quick response code.  \\n\\n- ***OPTC*** : **OpticalCode** Definition: Optical coded reading capabilities (e.g. barcode, QR code, etc.)  
 * @param cardPres Indicates whether the transaction has been initiated by a card physically present or not. CardPresent
 * @param crdhldrPres Indicates whether the transaction has been initiated in presence of the cardholder or not. CardholderPresent
 * @param fllbckInd Indicator of a card entry mode fallback. FallbackIndicator\\n\\n- ***FFLB*** : **FallbackAfterFailure** Definition: Card fall-back occurred during the transaction in progress. The previous transaction on the terminal failed.  \\n\\n- ***SFLB*** : **FallbackAfterSuccess** Definition: Card fall-back occurred during the transaction in progress. The previous transaction on the terminal was successful.  \\n\\n- ***NFLB*** : **NoFallback** Definition: No card fall-back during the transaction in progress.  
 * @param onLineCntxt On-line or off-line context of the transaction. OnLineContext
 * @param spprtdOptn 
 * @param txChanl Identifies the type of the communication channels used by the cardholder to the acceptor system. TransactionChannel\\n\\n- ***MAIL*** : **MailOrder** Definition: Mail order.  \\n\\n- ***TLPH*** : **TelephoneOrder** Definition: Telephone order.  \\n\\n- ***ECOM*** : **ElectronicCommerce** Definition: Electronic commerce.  \\n\\n- ***TVPY*** : **TelevisionPayment** Definition: Payment on television.  \\n\\n- ***SECM*** : **SecuredElectronicCommerce** Definition: Electronic commerce with cardholder authentication.  \\n\\n- ***MOBL*** : **MobilePayment** Definition: Payment performed through a cardholder mobile device.  \\n\\n- ***MPOS*** : **MobilePOS** Definition: Payment performed through a merchant mobile device.  
 * @param txEnvt Indicates the environment of the transaction. TransactionEnvironment\\n\\n- ***MERC*** : **Merchant** Definition: Merchant environment.  \\n\\n- ***PRIV*** : **Private** Definition: Private environment.  \\n\\n- ***PUBL*** : **Public** Definition: Public environment.  
 */
@Serializable
data class PaymentContext(
    /*  */
    val atId: kotlin.String? = null,
    /* Human attendance at the POI (Point Of Interaction) location during the transaction. AttendanceContext\\n\\n- ***ATTD*** : **Attended** Definition: Attended payment, with an attendant.  \\n\\n- ***SATT*** : **SemiAttended** Definition: Semi-attended, including self checkout. An attendant supervises several payment, and could be called to help the cardholder.  \\n\\n- ***UATT*** : **Unattended** Definition: Unattended payment, no attendant present.   */
    val attndncCntxt: PaymentContext.AttndncCntxt? = null,
    /* Language used to display messages to the attendant.  Reference ISO 639-1 (alpha-2) et ISO 639-2 (alpha-3). AttendantLanguage */
    val attndntLang: kotlin.String? = null,
    /* Indicates whether a message can be sent or not on an attendant display (attendant display present or not). AttendantMessageCapable */
    val attndntMsgCpbl: kotlin.Boolean? = null,
    /* Defines the business context of this transaction that could imply specific scheme rules. BusinessArea\\n\\n- ***AIBD*** : **ArtificialIntelligenceBasedDecision** Definition: The payment is initiated by an artificial intelligence based decision.  \\n\\n- ***PPAY*** : **PlainPayment** Definition: The card is used to perform a plain payment.  \\n\\n- ***TKNF*** : **TransitKnownFare** Definition: The card is used in a Transit business case where the fare amount is known when the transaction is initiated.  \\n\\n- ***EOPT*** : **EnergyOpenPayment** Definition: Indicates when the card is used in an energy business case where the amount could not be assessed when the transaction is initiated.  \\n\\n- ***TOPT*** : **TransitOpenPayment** Definition: Indicates when the card is used in a transit business case where the fare amount is not known when the transaction is initiated.   */
    val bizArea: PaymentContext.BizArea? = null,
    /* Entry mode of the card data. CardDataEntryMode\\n\\n- ***TAGC*** : **Tag** Definition: Tag reading capabilities (RFID, etc.).  \\n\\n- ***PHYS*** : **Physical** Definition: Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.  \\n\\n- ***BRCD*** : **BarCode** Definition: Bar code.  \\n\\n- ***MGST*** : **MagneticStripe** Definition: Magnetic stripe.  \\n\\n- ***CICC*** : **ICC** Definition: ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.  \\n\\n- ***DFLE*** : **AccountData** Definition: Account data on file.  \\n\\n- ***CTLS*** : **ProximityReader** Definition: Contactless proximity reader.  \\n\\n- ***ECTL*** : **EMVProximityReader** Definition: Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).  \\n\\n- ***CDFL*** : **CardOnFile** Definition: Card information are stored on a file.  \\n\\n- ***SICC*** : **SynchronousIntegratedCircuitCard** Definition: Synchronous ICC - (Integrated Circuit Card) with contact.  \\n\\n- ***UNKW*** : **Unknown** Definition: Unknown card reading capability.  \\n\\n- ***QRCD*** : **QRCode** Definition: Quick response code.  \\n\\n- ***OPTC*** : **OpticalCode** Definition: Optical coded reading capabilities (e.g. barcode, QR code, etc.)   */
    val cardDataNtryMd: PaymentContext.CardDataNtryMd? = null,
    /* Indicates whether the transaction has been initiated by a card physically present or not. CardPresent */
    val cardPres: kotlin.Boolean? = null,
    /* Indicates whether the transaction has been initiated in presence of the cardholder or not. CardholderPresent */
    val crdhldrPres: kotlin.Boolean? = null,
    /* Indicator of a card entry mode fallback. FallbackIndicator\\n\\n- ***FFLB*** : **FallbackAfterFailure** Definition: Card fall-back occurred during the transaction in progress. The previous transaction on the terminal failed.  \\n\\n- ***SFLB*** : **FallbackAfterSuccess** Definition: Card fall-back occurred during the transaction in progress. The previous transaction on the terminal was successful.  \\n\\n- ***NFLB*** : **NoFallback** Definition: No card fall-back during the transaction in progress.   */
    val fllbckInd: PaymentContext.FllbckInd? = null,
    /* On-line or off-line context of the transaction. OnLineContext */
    val onLineCntxt: kotlin.Boolean? = null,
    val spprtdOptn: SupportedOption? = null,
    /* Identifies the type of the communication channels used by the cardholder to the acceptor system. TransactionChannel\\n\\n- ***MAIL*** : **MailOrder** Definition: Mail order.  \\n\\n- ***TLPH*** : **TelephoneOrder** Definition: Telephone order.  \\n\\n- ***ECOM*** : **ElectronicCommerce** Definition: Electronic commerce.  \\n\\n- ***TVPY*** : **TelevisionPayment** Definition: Payment on television.  \\n\\n- ***SECM*** : **SecuredElectronicCommerce** Definition: Electronic commerce with cardholder authentication.  \\n\\n- ***MOBL*** : **MobilePayment** Definition: Payment performed through a cardholder mobile device.  \\n\\n- ***MPOS*** : **MobilePOS** Definition: Payment performed through a merchant mobile device.   */
    val txChanl: PaymentContext.TxChanl? = null,
    /* Indicates the environment of the transaction. TransactionEnvironment\\n\\n- ***MERC*** : **Merchant** Definition: Merchant environment.  \\n\\n- ***PRIV*** : **Private** Definition: Private environment.  \\n\\n- ***PUBL*** : **Public** Definition: Public environment.   */
    val txEnvt: PaymentContext.TxEnvt? = null
)
{
    /**
    * Human attendance at the POI (Point Of Interaction) location during the transaction. AttendanceContext\\n\\n- ***ATTD*** : **Attended** Definition: Attended payment, with an attendant.  \\n\\n- ***SATT*** : **SemiAttended** Definition: Semi-attended, including self checkout. An attendant supervises several payment, and could be called to help the cardholder.  \\n\\n- ***UATT*** : **Unattended** Definition: Unattended payment, no attendant present.  
    * Values: ATTD,SATT,UATT
    */
    enum class AttndncCntxt(val value: kotlin.String){
        ATTD("ATTD"),
        SATT("SATT"),
        UATT("UATT");
    }
    /**
    * Defines the business context of this transaction that could imply specific scheme rules. BusinessArea\\n\\n- ***AIBD*** : **ArtificialIntelligenceBasedDecision** Definition: The payment is initiated by an artificial intelligence based decision.  \\n\\n- ***PPAY*** : **PlainPayment** Definition: The card is used to perform a plain payment.  \\n\\n- ***TKNF*** : **TransitKnownFare** Definition: The card is used in a Transit business case where the fare amount is known when the transaction is initiated.  \\n\\n- ***EOPT*** : **EnergyOpenPayment** Definition: Indicates when the card is used in an energy business case where the amount could not be assessed when the transaction is initiated.  \\n\\n- ***TOPT*** : **TransitOpenPayment** Definition: Indicates when the card is used in a transit business case where the fare amount is not known when the transaction is initiated.  
    * Values: AIBD,PPAY,TKNF,EOPT,TOPT
    */
    enum class BizArea(val value: kotlin.String){
        AIBD("AIBD"),
        PPAY("PPAY"),
        TKNF("TKNF"),
        EOPT("EOPT"),
        TOPT("TOPT");
    }
    /**
    * Entry mode of the card data. CardDataEntryMode\\n\\n- ***TAGC*** : **Tag** Definition: Tag reading capabilities (RFID, etc.).  \\n\\n- ***PHYS*** : **Physical** Definition: Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.  \\n\\n- ***BRCD*** : **BarCode** Definition: Bar code.  \\n\\n- ***MGST*** : **MagneticStripe** Definition: Magnetic stripe.  \\n\\n- ***CICC*** : **ICC** Definition: ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.  \\n\\n- ***DFLE*** : **AccountData** Definition: Account data on file.  \\n\\n- ***CTLS*** : **ProximityReader** Definition: Contactless proximity reader.  \\n\\n- ***ECTL*** : **EMVProximityReader** Definition: Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).  \\n\\n- ***CDFL*** : **CardOnFile** Definition: Card information are stored on a file.  \\n\\n- ***SICC*** : **SynchronousIntegratedCircuitCard** Definition: Synchronous ICC - (Integrated Circuit Card) with contact.  \\n\\n- ***UNKW*** : **Unknown** Definition: Unknown card reading capability.  \\n\\n- ***QRCD*** : **QRCode** Definition: Quick response code.  \\n\\n- ***OPTC*** : **OpticalCode** Definition: Optical coded reading capabilities (e.g. barcode, QR code, etc.)  
    * Values: TAGC,PHYS,BRCD,MGST,CICC,DFLE,CTLS,ECTL,CDFL,SICC,UNKW,QRCD,OPTC
    */
    enum class CardDataNtryMd(val value: kotlin.String){
        TAGC("TAGC"),
        PHYS("PHYS"),
        BRCD("BRCD"),
        MGST("MGST"),
        CICC("CICC"),
        DFLE("DFLE"),
        CTLS("CTLS"),
        ECTL("ECTL"),
        CDFL("CDFL"),
        SICC("SICC"),
        UNKW("UNKW"),
        QRCD("QRCD"),
        OPTC("OPTC");
    }
    /**
    * Indicator of a card entry mode fallback. FallbackIndicator\\n\\n- ***FFLB*** : **FallbackAfterFailure** Definition: Card fall-back occurred during the transaction in progress. The previous transaction on the terminal failed.  \\n\\n- ***SFLB*** : **FallbackAfterSuccess** Definition: Card fall-back occurred during the transaction in progress. The previous transaction on the terminal was successful.  \\n\\n- ***NFLB*** : **NoFallback** Definition: No card fall-back during the transaction in progress.  
    * Values: FFLB,SFLB,NFLB
    */
    enum class FllbckInd(val value: kotlin.String){
        FFLB("FFLB"),
        SFLB("SFLB"),
        NFLB("NFLB");
    }
    /**
    * Identifies the type of the communication channels used by the cardholder to the acceptor system. TransactionChannel\\n\\n- ***MAIL*** : **MailOrder** Definition: Mail order.  \\n\\n- ***TLPH*** : **TelephoneOrder** Definition: Telephone order.  \\n\\n- ***ECOM*** : **ElectronicCommerce** Definition: Electronic commerce.  \\n\\n- ***TVPY*** : **TelevisionPayment** Definition: Payment on television.  \\n\\n- ***SECM*** : **SecuredElectronicCommerce** Definition: Electronic commerce with cardholder authentication.  \\n\\n- ***MOBL*** : **MobilePayment** Definition: Payment performed through a cardholder mobile device.  \\n\\n- ***MPOS*** : **MobilePOS** Definition: Payment performed through a merchant mobile device.  
    * Values: MAIL,TLPH,ECOM,TVPY,SECM,MOBL,MPOS
    */
    enum class TxChanl(val value: kotlin.String){
        MAIL("MAIL"),
        TLPH("TLPH"),
        ECOM("ECOM"),
        TVPY("TVPY"),
        SECM("SECM"),
        MOBL("MOBL"),
        MPOS("MPOS");
    }
    /**
    * Indicates the environment of the transaction. TransactionEnvironment\\n\\n- ***MERC*** : **Merchant** Definition: Merchant environment.  \\n\\n- ***PRIV*** : **Private** Definition: Private environment.  \\n\\n- ***PUBL*** : **Public** Definition: Public environment.  
    * Values: MERC,PRIV,PUBL
    */
    enum class TxEnvt(val value: kotlin.String){
        MERC("MERC"),
        PRIV("PRIV"),
        PUBL("PUBL");
    }
}

