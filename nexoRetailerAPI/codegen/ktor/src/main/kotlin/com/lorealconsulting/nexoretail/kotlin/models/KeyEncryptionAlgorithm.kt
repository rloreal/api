/**
* nexo retailer API
* API defining resources for interactions between POI and POS, using underlying nexo messages # Summary The **nexo retailer** *Protocol Version 8* offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to exchange data securely, between a Point Of sale System (POS) and Point Of Interaction (POI) System. The nexo retailer protocol reduces sale to payment terminal communication complexity and costs,  addresses the problem of multiple private standards, aligned with the goals of nexo association, enables point of sale system providers to use a single interface with multiple payment systems,  for multiple payment instruments, and payment methods,  with a clear delimitation between with the retail world and the payment world.  The possible approaches are:   * Multiple POS to Multiple POI    * One to One POS to POI   * App 2 App when POS and POI are embedded in a single device    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a nexo compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the nexo retailer message usage guide if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Message Usage Guide of the nexo retailer protocol.**    It is not a replacement in any sense.   The main specification is always the nexo Message Usage Guide, with ISO20022 definitions of the protocol (MDR Part 1 and 2).   It is highly recommended to read through the standards documentations in conjunction with this API definition.    Namely regarding :     * The rules regarding dialogue initiation, termination and combination      * The rules and constraints applied to data fields, depending on the use case     * The error management on Sale system and POI system sides     * The security that can be applied to the protocol * **This API definition contains the messages for all different approaches defined in the Message Usage Guide.**  * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.1.md]        \"If in is \"header\"and the name field is \"Accept\", \"Content-Type\"or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\"will not be defined in this file at any place.      The elements \"Content-Type\"and \"Authorization\"are implicitly defined by the OpenApi tags \"content\"and \"security\".     * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a nexo complient API in addition to the elements defined in this file. 
*
* The version of the OpenAPI document: 2025-01
* Contact: romain.loreal@lorealconsulting.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.lorealconsulting.nexoretail.kotlin.models

import com.lorealconsulting.nexoretail.kotlin.models.Parameter1

import kotlinx.serialization.Serializable
/**
 * Algorithm to encrypt the key encryption key (KEK). KeyEncryptionAlgorithm
 * @param algo Identification of the algorithm. Algorithm\\n\\n- ***EA2C*** : **AES128CBC** Definition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***E3DC*** : **DES112CBC** Definition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with double length key (112 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc).  \\n\\n- ***DKP9*** : **DUKPT2009** Definition: DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2009 Annex A.  \\n\\n- ***UKPT*** : **UKPT** Definition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption - (ASN.1 Object Identifier: id-ukpt-wrap).  \\n\\n- ***UKA2*** : **UKPTwithAES192** Definition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***EA9C*** : **AES192CBC** Definition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***EA5C*** : **AES256CBC** Definition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***DA12*** : **AESDUKPT128ECB** Definition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A, With key length of 128 bits.  \\n\\n- ***DA19*** : **AESDUKPT192ECB** Definition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 192 bits.  \\n\\n- ***DA25*** : **AESDUKPT256ECB** Definition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 256 bits.  \\n\\n- ***N108*** : **Nist800-108KeyDerivation** Definition: Key Derivation according to the Special Publication from the NIST entitled 800-108.  \\n\\n- ***EA5R*** : **AES256CTR** Definition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***EA9R*** : **AES192CTR** Definition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***EA2R*** : **AES128CTR** Definition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***E3DR*** : **DES112CTR** Definition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with double length key (112 Bit) as defined in FIPS SP 800-38a.  \\n\\n- ***E36C*** : **DES168CBC** Definition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with triple length key (168 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc).  \\n\\n- ***E36R*** : **DES168CTR** Definition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with triple length key (168 Bit) as defined in FIPS SP 800-38a.  \\n\\n- ***SD5C*** : **SDE056CBC** Definition: The DEPRECATED Simple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with simple length key (56 Bit) as defined in FIPS PUB 81 - (ASN.1 Object Identifier: des-cbc).  \\n\\n- ***UKA1*** : **UKPTwithAES128** Definition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***UKA3*** : **UKPTwithAES256** Definition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***SM4C*** : **SM4CBC** Definition: ShangMi 4 enciphering method used in CBC mode.  \\n\\n- ***SM4R*** : **SM4CTR** Definition: ShangMi 4 enciphering method used in CTR mode.  
 * @param atId 
 * @param `param` 
 */
@Serializable
data class KeyEncryptionAlgorithm(
    /* Identification of the algorithm. Algorithm\\n\\n- ***EA2C*** : **AES128CBC** Definition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***E3DC*** : **DES112CBC** Definition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with double length key (112 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc).  \\n\\n- ***DKP9*** : **DUKPT2009** Definition: DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2009 Annex A.  \\n\\n- ***UKPT*** : **UKPT** Definition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption - (ASN.1 Object Identifier: id-ukpt-wrap).  \\n\\n- ***UKA2*** : **UKPTwithAES192** Definition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***EA9C*** : **AES192CBC** Definition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***EA5C*** : **AES256CBC** Definition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***DA12*** : **AESDUKPT128ECB** Definition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A, With key length of 128 bits.  \\n\\n- ***DA19*** : **AESDUKPT192ECB** Definition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 192 bits.  \\n\\n- ***DA25*** : **AESDUKPT256ECB** Definition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 256 bits.  \\n\\n- ***N108*** : **Nist800-108KeyDerivation** Definition: Key Derivation according to the Special Publication from the NIST entitled 800-108.  \\n\\n- ***EA5R*** : **AES256CTR** Definition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***EA9R*** : **AES192CTR** Definition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***EA2R*** : **AES128CTR** Definition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***E3DR*** : **DES112CTR** Definition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with double length key (112 Bit) as defined in FIPS SP 800-38a.  \\n\\n- ***E36C*** : **DES168CBC** Definition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with triple length key (168 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc).  \\n\\n- ***E36R*** : **DES168CTR** Definition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with triple length key (168 Bit) as defined in FIPS SP 800-38a.  \\n\\n- ***SD5C*** : **SDE056CBC** Definition: The DEPRECATED Simple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with simple length key (56 Bit) as defined in FIPS PUB 81 - (ASN.1 Object Identifier: des-cbc).  \\n\\n- ***UKA1*** : **UKPTwithAES128** Definition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***UKA3*** : **UKPTwithAES256** Definition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***SM4C*** : **SM4CBC** Definition: ShangMi 4 enciphering method used in CBC mode.  \\n\\n- ***SM4R*** : **SM4CTR** Definition: ShangMi 4 enciphering method used in CTR mode.   */
    val algo: KeyEncryptionAlgorithm.Algo,
    /*  */
    val atId: kotlin.String? = null,
    val `param`: Parameter1? = null
)
{
    /**
    * Identification of the algorithm. Algorithm\\n\\n- ***EA2C*** : **AES128CBC** Definition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***E3DC*** : **DES112CBC** Definition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with double length key (112 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc).  \\n\\n- ***DKP9*** : **DUKPT2009** Definition: DUKPT (Derived Unique Key Per Transaction) algorithm, as specified in ANSI X9.24-2009 Annex A.  \\n\\n- ***UKPT*** : **UKPT** Definition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption - (ASN.1 Object Identifier: id-ukpt-wrap).  \\n\\n- ***UKA2*** : **UKPTwithAES192** Definition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***EA9C*** : **AES192CBC** Definition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***EA5C*** : **AES256CBC** Definition: AES (Advanced Encryption Standard) CBC (Chaining Block Cypher) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 – November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***DA12*** : **AESDUKPT128ECB** Definition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A, With key length of 128 bits.  \\n\\n- ***DA19*** : **AESDUKPT192ECB** Definition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 192 bits.  \\n\\n- ***DA25*** : **AESDUKPT256ECB** Definition: AES DUKPT (Derived Unique Key Per Transaction) ECB algorithm, as specified in ANSI X9.24-3-2017 Annex A.With key length of 256 bits.  \\n\\n- ***N108*** : **Nist800-108KeyDerivation** Definition: Key Derivation according to the Special Publication from the NIST entitled 800-108.  \\n\\n- ***EA5R*** : **AES256CTR** Definition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 256 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***EA9R*** : **AES192CTR** Definition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 192 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***EA2R*** : **AES128CTR** Definition: AES (Advanced Encryption Standard) CTR (Counter) encryption with a 128 bits cryptographic key as defined by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***E3DR*** : **DES112CTR** Definition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with double length key (112 Bit) as defined in FIPS SP 800-38a.  \\n\\n- ***E36C*** : **DES168CBC** Definition: Triple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with triple length key (168 Bit) as defined in FIPS PUB 46-3 - (ASN.1 Object Identifier: des-ede3-cbc).  \\n\\n- ***E36R*** : **DES168CTR** Definition: Triple DES (Data Encryption Standard) CTR (Counter) encryption with triple length key (168 Bit) as defined in FIPS SP 800-38a.  \\n\\n- ***SD5C*** : **SDE056CBC** Definition: The DEPRECATED Simple DES (Data Encryption Standard) CBC (Chaining Block Cypher) encryption with simple length key (56 Bit) as defined in FIPS PUB 81 - (ASN.1 Object Identifier: des-cbc).  \\n\\n- ***UKA1*** : **UKPTwithAES128** Definition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***UKA3*** : **UKPTwithAES256** Definition: UKPT (Unique Key Per Transaction) or Master Session Key key encryption, using Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).  \\n\\n- ***SM4C*** : **SM4CBC** Definition: ShangMi 4 enciphering method used in CBC mode.  \\n\\n- ***SM4R*** : **SM4CTR** Definition: ShangMi 4 enciphering method used in CTR mode.  
    * Values: EA2C,E3DC,DKP9,UKPT,UKA2,EA9C,EA5C,DA12,DA19,DA25,N108,EA5R,EA9R,EA2R,E3DR,E36C,E36R,SD5C,UKA1,UKA3,SM4C,SM4R
    */
    enum class Algo(val value: kotlin.String){
        EA2C("EA2C"),
        E3DC("E3DC"),
        DKP9("DKP9"),
        UKPT("UKPT"),
        UKA2("UKA2"),
        EA9C("EA9C"),
        EA5C("EA5C"),
        DA12("DA12"),
        DA19("DA19"),
        DA25("DA25"),
        N108("N108"),
        EA5R("EA5R"),
        EA9R("EA9R"),
        EA2R("EA2R"),
        E3DR("E3DR"),
        E36C("E36C"),
        E36R("E36R"),
        SD5C("SD5C"),
        UKA1("UKA1"),
        UKA3("UKA3"),
        SM4C("SM4C"),
        SM4R("SM4R");
    }
}

