/**
* nexo retailer API
* API defining resources for interactions between POI and POS, using underlying nexo messages # Summary The **nexo retailer** *Protocol Version 8* offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to exchange data securely, between a Point Of sale System (POS) and Point Of Interaction (POI) System. The nexo retailer protocol reduces sale to payment terminal communication complexity and costs,  addresses the problem of multiple private standards, aligned with the goals of nexo association, enables point of sale system providers to use a single interface with multiple payment systems,  for multiple payment instruments, and payment methods,  with a clear delimitation between with the retail world and the payment world.  The possible approaches are:   * Multiple POS to Multiple POI    * One to One POS to POI   * App 2 App when POS and POI are embedded in a single device    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a nexo compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the nexo retailer message usage guide if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Message Usage Guide of the nexo retailer protocol.**    It is not a replacement in any sense.   The main specification is always the nexo Message Usage Guide, with ISO20022 definitions of the protocol (MDR Part 1 and 2).   It is highly recommended to read through the standards documentations in conjunction with this API definition.    Namely regarding :     * The rules regarding dialogue initiation, termination and combination      * The rules and constraints applied to data fields, depending on the use case     * The error management on Sale system and POI system sides     * The security that can be applied to the protocol * **This API definition contains the messages for all different approaches defined in the Message Usage Guide.**  * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.1.md]        \"If in is \"header\"and the name field is \"Accept\", \"Content-Type\"or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\"will not be defined in this file at any place.      The elements \"Content-Type\"and \"Authorization\"are implicitly defined by the OpenApi tags \"content\"and \"security\".     * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a nexo complient API in addition to the elements defined in this file. 
*
* The version of the OpenAPI document: 2025-01
* Contact: romain.loreal@lorealconsulting.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.lorealconsulting.nexoretail.kotlin.models

import com.lorealconsulting.nexoretail.kotlin.models.OutputContent1
import com.lorealconsulting.nexoretail.kotlin.models.Receipt4AnyOf

import kotlinx.serialization.Serializable
/**
 * 
 * @param docQlfr Qualification of the document to print to the Cashier or the Customer. DocumentQualifier\\n\\n- ***JNRL*** : **Journal** Definition: When the POI or the Sale System wants to store a message on the journal printer or electronic journal of the Sale Terminal (it is sometimes a Sale Logging/Journal Printer).  \\n\\n- ***CRCP*** : **CustomerReceipt** Definition: When the Sale System requires the POI system to print the Customer receipt.  \\n\\n- ***HRCP*** : **CashierReceipt** Definition: When the Sale system print the Cashier copy of the Payment receipt.  \\n\\n- ***SRCP*** : **SaleReceipt** Definition: When the Sale System requires the POI system to print the Sale receipt.  \\n\\n- ***RPIN*** : **RelatedPaymentInstruction** Definition: Document is a linked payment instruction to which the current payment instruction is related, for example, in a cover scenario.  \\n\\n- ***VCHR*** : **Voucher** Definition: Document is an electronic payment document.  
 * @param outptCntt 
 * @param atId 
 * @param intgrtdPrtFlg Flag is the print is integrated to other prints. IntegratedPrintFlag
 * @param reqrdSgntrFlg Flag to indicate that the cardholder payment receipt requires a signature by the customer. RequiredSignatureFlag
 */
@Serializable
data class Receipt4(
    /* Qualification of the document to print to the Cashier or the Customer. DocumentQualifier\\n\\n- ***JNRL*** : **Journal** Definition: When the POI or the Sale System wants to store a message on the journal printer or electronic journal of the Sale Terminal (it is sometimes a Sale Logging/Journal Printer).  \\n\\n- ***CRCP*** : **CustomerReceipt** Definition: When the Sale System requires the POI system to print the Customer receipt.  \\n\\n- ***HRCP*** : **CashierReceipt** Definition: When the Sale system print the Cashier copy of the Payment receipt.  \\n\\n- ***SRCP*** : **SaleReceipt** Definition: When the Sale System requires the POI system to print the Sale receipt.  \\n\\n- ***RPIN*** : **RelatedPaymentInstruction** Definition: Document is a linked payment instruction to which the current payment instruction is related, for example, in a cover scenario.  \\n\\n- ***VCHR*** : **Voucher** Definition: Document is an electronic payment document.   */
    val docQlfr: Receipt4.DocQlfr,
    val outptCntt: OutputContent1,
    /*  */
    val atId: kotlin.String? = null,
    /* Flag is the print is integrated to other prints. IntegratedPrintFlag */
    val intgrtdPrtFlg: kotlin.Boolean? = null,
    /* Flag to indicate that the cardholder payment receipt requires a signature by the customer. RequiredSignatureFlag */
    val reqrdSgntrFlg: kotlin.Boolean? = null
)
{
    /**
    * Qualification of the document to print to the Cashier or the Customer. DocumentQualifier\\n\\n- ***JNRL*** : **Journal** Definition: When the POI or the Sale System wants to store a message on the journal printer or electronic journal of the Sale Terminal (it is sometimes a Sale Logging/Journal Printer).  \\n\\n- ***CRCP*** : **CustomerReceipt** Definition: When the Sale System requires the POI system to print the Customer receipt.  \\n\\n- ***HRCP*** : **CashierReceipt** Definition: When the Sale system print the Cashier copy of the Payment receipt.  \\n\\n- ***SRCP*** : **SaleReceipt** Definition: When the Sale System requires the POI system to print the Sale receipt.  \\n\\n- ***RPIN*** : **RelatedPaymentInstruction** Definition: Document is a linked payment instruction to which the current payment instruction is related, for example, in a cover scenario.  \\n\\n- ***VCHR*** : **Voucher** Definition: Document is an electronic payment document.  
    * Values: JNRL,CRCP,HRCP,SRCP,RPIN,VCHR
    */
    enum class DocQlfr(val value: kotlin.String){
        JNRL("JNRL"),
        CRCP("CRCP"),
        HRCP("HRCP"),
        SRCP("SRCP"),
        RPIN("RPIN"),
        VCHR("VCHR");
    }
}

