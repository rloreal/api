/**
* nexo retailer API
* API defining resources for interactions between POI and POS, using underlying nexo messages # Summary The **nexo retailer** *Protocol Version 8* offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to exchange data securely, between a Point Of sale System (POS) and Point Of Interaction (POI) System. The nexo retailer protocol reduces sale to payment terminal communication complexity and costs,  addresses the problem of multiple private standards, aligned with the goals of nexo association, enables point of sale system providers to use a single interface with multiple payment systems,  for multiple payment instruments, and payment methods,  with a clear delimitation between with the retail world and the payment world.  The possible approaches are:   * Multiple POS to Multiple POI    * One to One POS to POI   * App 2 App when POS and POI are embedded in a single device    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a nexo compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the nexo retailer message usage guide if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Message Usage Guide of the nexo retailer protocol.**    It is not a replacement in any sense.   The main specification is always the nexo Message Usage Guide, with ISO20022 definitions of the protocol (MDR Part 1 and 2).   It is highly recommended to read through the standards documentations in conjunction with this API definition.    Namely regarding :     * The rules regarding dialogue initiation, termination and combination      * The rules and constraints applied to data fields, depending on the use case     * The error management on Sale system and POI system sides     * The security that can be applied to the protocol * **This API definition contains the messages for all different approaches defined in the Message Usage Guide.**  * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.1.md]        \"If in is \"header\"and the name field is \"Accept\", \"Content-Type\"or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\"will not be defined in this file at any place.      The elements \"Content-Type\"and \"Authorization\"are implicitly defined by the OpenApi tags \"content\"and \"security\".     * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a nexo complient API in addition to the elements defined in this file. 
*
* The version of the OpenAPI document: 2025-01
* Contact: romain.loreal@lorealconsulting.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.lorealconsulting.nexoretail.kotlin.models

import com.lorealconsulting.nexoretail.kotlin.models.AddressVerification1
import com.lorealconsulting.nexoretail.kotlin.models.Authentication1AnyOf
import com.lorealconsulting.nexoretail.kotlin.models.AuthenticationAdditionalInformation1
import com.lorealconsulting.nexoretail.kotlin.models.AuthenticationLevel1
import com.lorealconsulting.nexoretail.kotlin.models.AuthenticationType1
import com.lorealconsulting.nexoretail.kotlin.models.CardholderIdentification1
import com.lorealconsulting.nexoretail.kotlin.models.CardholderOnLinePIN1
import com.lorealconsulting.nexoretail.kotlin.models.ProtectedAuthenticationValue1

import kotlinx.serialization.Serializable
/**
 * 
 * @param atId 
 * @param adrVrfctn 
 * @param authntcnAddtlInf 
 * @param authntcnLvl 
 * @param authntcnMtd Method and data intended to be used for this transaction to authenticate the cardholder or its card. AuthenticationMethod\\n\\n- ***TOKA*** : **AuthenticationToken** Definition: A token is used to verify an already performed authentication.  \\n\\n- ***ADDB*** : **BillingAddressVerification** Definition: Cardholder billing address verification.  \\n\\n- ***BYPS*** : **Bypass** Definition: Authentication bypassed by the merchant.  \\n\\n- ***BIOM*** : **Biometry** Definition: Biometric authentication of the cardholder.  \\n\\n- ***CDHI*** : **CardholderIdentificationData** Definition: Cardholder data provided for verification, for instance social security number, driver license number, passport number.  \\n\\n- ***CRYP*** : **CryptogramVerification** Definition: Verification of a cryptogram generated by a chip card or another device, for instance ARQC (Authorisation Request Cryptogram).  \\n\\n- ***CSCV*** : **CSCVerification** Definition: Verification of Card Security Code.  \\n\\n- ***MANU*** : **ManualVerification** Definition: Manual verification, for example passport or drivers license.  \\n\\n- ***MERC*** : **MerchantAuthentication** Definition: Merchant-related authentication.  \\n\\n- ***MOBL*** : **Mobile** Definition: Customer mobile device.  \\n\\n- ***FPIN*** : **OfflinePIN** Definition: Off-line PIN authentication (Personal Identification Number).  \\n\\n- ***NPIN*** : **OnLinePIN** Definition: On-line PIN authentication (Personal Identification Number).  \\n\\n- ***OTHR*** : **Other** Definition: Other customer authentication.  \\n\\n- ***PPSG*** : **PaperSignature** Definition: Handwritten paper signature.  \\n\\n- ***PSVE*** : **PassiveAuthentication** Definition: Authentication based on statistical cardholder behaviour.  \\n\\n- ***PSWD*** : **Password** Definition: Authentication by a password.  \\n\\n- ***TOKP*** : **PaymentToken** Definition: Verification or authentication related to the use of a payment token, for instance the validation of the authorised use of a token.  \\n\\n- ***SCRT*** : **SecureCertificate** Definition: Electronic commerce transaction secured with the X.509 certificate of a customer.  \\n\\n- ***SCNL*** : **SecuredChannel** Definition: Channel-encrypted transaction.  \\n\\n- ***CSEC*** : **SecureElectronicCommerce** Definition: Authentication performed during a secure electronic commerce transaction.  \\n\\n- ***SNCT*** : **SecureNoCertificate** Definition: Secure electronic transaction without cardholder certificate.  \\n\\n- ***ADDS*** : **ShippingAddressVerification** Definition: Cardholder shipping address verification.  \\n\\n- ***CPSG*** : **SignatureCapture** Definition: Electronic signature capture (handwritten signature).  \\n\\n- ***TOKN*** : **TokenAuthentication** Definition: Cryptogram generated by the token requestor or a customer device to validate the authorised use of a token.  \\n\\n- ***UKNW*** : **UnknownMethod** Definition: Authentication method is performed unknown.  
 * @param authntcnRslt Result of authentication. AuthenticationResult\\n\\n- ***DENY*** : **Denial** Definition: The authentication didn’t succeed.  \\n\\n- ***MRCH*** : **MerchantNotEnroled** Definition: Merchant not enrolled in the authentication programme.  \\n\\n- ***CARD*** : **NonParticipation** Definition: The card does not participate in the authentication programme.  \\n\\n- ***AUTH*** : **UnableToAuthenticate** Definition: The authentication couldn’t be carried out.  \\n\\n- ***CRPT*** : **WithCryptogram** Definition: Authentication succeeded with a cryptogram.  \\n\\n- ***UCRP*** : **WithoutCryptogram** Definition: Authentication succeeded without a cryptogram.  
 * @param authntcnTp 
 * @param authntcnVal Value used to authenticate the cardholder. AuthenticationValue
 * @param authntcnXmptn If Strong Customer Authentication is not mandated to process the transaction, this message element must identify the reason of exemption. AuthenticationExemption\\n\\n- ***LOWA*** : **LowAmountExemption** Definition: Transaction's amount is low and could be processed without strong customer authentication.  \\n\\n- ***MINT*** : **MerchantInitiatedTransaction** Definition: Transaction is initiated by the Card Acceptor.  \\n\\n- ***RECP*** : **RecurringPayment** Definition: Transaction is one of a series of recurring payment.  \\n\\n- ***SCPE*** : **SecureCorporatePaymentExemption** Definition: Transaction is a secure corporate payment.  \\n\\n- ***SCAD*** : **StrongCustomerAuthenticationDelegation** Definition: Card Acceptor is a strong customer authentication delegate.  \\n\\n- ***TRAE*** : **TransactionRiskAnalysisExemption** Definition: According to the transaction risk analysis the strong customer authentication is not mandated.  \\n\\n- ***PKGE*** : **TransportFareOrParkingFeeUnattendedPaymentExemption** Definition: Payment is processed in a environment where strong customer authentication is inappropriate.  \\n\\n- ***TMBE*** : **TrustedMerchantBeneficiaryExemption** Definition: Cardholder has enrolled the Card Acceptor in the exemption list of strong customer authentication.  
 * @param crdhldrId 
 * @param crdhldrOnLinePIN 
 * @param prtctdAuthntcnVal 
 */
@Serializable
data class Authentication1(
    /*  */
    val atId: kotlin.String? = null,
    val adrVrfctn: AddressVerification1? = null,
    val authntcnAddtlInf: AuthenticationAdditionalInformation1? = null,
    val authntcnLvl: AuthenticationLevel1? = null,
    /* Method and data intended to be used for this transaction to authenticate the cardholder or its card. AuthenticationMethod\\n\\n- ***TOKA*** : **AuthenticationToken** Definition: A token is used to verify an already performed authentication.  \\n\\n- ***ADDB*** : **BillingAddressVerification** Definition: Cardholder billing address verification.  \\n\\n- ***BYPS*** : **Bypass** Definition: Authentication bypassed by the merchant.  \\n\\n- ***BIOM*** : **Biometry** Definition: Biometric authentication of the cardholder.  \\n\\n- ***CDHI*** : **CardholderIdentificationData** Definition: Cardholder data provided for verification, for instance social security number, driver license number, passport number.  \\n\\n- ***CRYP*** : **CryptogramVerification** Definition: Verification of a cryptogram generated by a chip card or another device, for instance ARQC (Authorisation Request Cryptogram).  \\n\\n- ***CSCV*** : **CSCVerification** Definition: Verification of Card Security Code.  \\n\\n- ***MANU*** : **ManualVerification** Definition: Manual verification, for example passport or drivers license.  \\n\\n- ***MERC*** : **MerchantAuthentication** Definition: Merchant-related authentication.  \\n\\n- ***MOBL*** : **Mobile** Definition: Customer mobile device.  \\n\\n- ***FPIN*** : **OfflinePIN** Definition: Off-line PIN authentication (Personal Identification Number).  \\n\\n- ***NPIN*** : **OnLinePIN** Definition: On-line PIN authentication (Personal Identification Number).  \\n\\n- ***OTHR*** : **Other** Definition: Other customer authentication.  \\n\\n- ***PPSG*** : **PaperSignature** Definition: Handwritten paper signature.  \\n\\n- ***PSVE*** : **PassiveAuthentication** Definition: Authentication based on statistical cardholder behaviour.  \\n\\n- ***PSWD*** : **Password** Definition: Authentication by a password.  \\n\\n- ***TOKP*** : **PaymentToken** Definition: Verification or authentication related to the use of a payment token, for instance the validation of the authorised use of a token.  \\n\\n- ***SCRT*** : **SecureCertificate** Definition: Electronic commerce transaction secured with the X.509 certificate of a customer.  \\n\\n- ***SCNL*** : **SecuredChannel** Definition: Channel-encrypted transaction.  \\n\\n- ***CSEC*** : **SecureElectronicCommerce** Definition: Authentication performed during a secure electronic commerce transaction.  \\n\\n- ***SNCT*** : **SecureNoCertificate** Definition: Secure electronic transaction without cardholder certificate.  \\n\\n- ***ADDS*** : **ShippingAddressVerification** Definition: Cardholder shipping address verification.  \\n\\n- ***CPSG*** : **SignatureCapture** Definition: Electronic signature capture (handwritten signature).  \\n\\n- ***TOKN*** : **TokenAuthentication** Definition: Cryptogram generated by the token requestor or a customer device to validate the authorised use of a token.  \\n\\n- ***UKNW*** : **UnknownMethod** Definition: Authentication method is performed unknown.   */
    val authntcnMtd: Authentication1.AuthntcnMtd? = null,
    /* Result of authentication. AuthenticationResult\\n\\n- ***DENY*** : **Denial** Definition: The authentication didn’t succeed.  \\n\\n- ***MRCH*** : **MerchantNotEnroled** Definition: Merchant not enrolled in the authentication programme.  \\n\\n- ***CARD*** : **NonParticipation** Definition: The card does not participate in the authentication programme.  \\n\\n- ***AUTH*** : **UnableToAuthenticate** Definition: The authentication couldn’t be carried out.  \\n\\n- ***CRPT*** : **WithCryptogram** Definition: Authentication succeeded with a cryptogram.  \\n\\n- ***UCRP*** : **WithoutCryptogram** Definition: Authentication succeeded without a cryptogram.   */
    val authntcnRslt: Authentication1.AuthntcnRslt? = null,
    val authntcnTp: AuthenticationType1? = null,
    /* Value used to authenticate the cardholder. AuthenticationValue */
    val authntcnVal: kotlin.String? = null,
    /* If Strong Customer Authentication is not mandated to process the transaction, this message element must identify the reason of exemption. AuthenticationExemption\\n\\n- ***LOWA*** : **LowAmountExemption** Definition: Transaction's amount is low and could be processed without strong customer authentication.  \\n\\n- ***MINT*** : **MerchantInitiatedTransaction** Definition: Transaction is initiated by the Card Acceptor.  \\n\\n- ***RECP*** : **RecurringPayment** Definition: Transaction is one of a series of recurring payment.  \\n\\n- ***SCPE*** : **SecureCorporatePaymentExemption** Definition: Transaction is a secure corporate payment.  \\n\\n- ***SCAD*** : **StrongCustomerAuthenticationDelegation** Definition: Card Acceptor is a strong customer authentication delegate.  \\n\\n- ***TRAE*** : **TransactionRiskAnalysisExemption** Definition: According to the transaction risk analysis the strong customer authentication is not mandated.  \\n\\n- ***PKGE*** : **TransportFareOrParkingFeeUnattendedPaymentExemption** Definition: Payment is processed in a environment where strong customer authentication is inappropriate.  \\n\\n- ***TMBE*** : **TrustedMerchantBeneficiaryExemption** Definition: Cardholder has enrolled the Card Acceptor in the exemption list of strong customer authentication.   */
    val authntcnXmptn: Authentication1.AuthntcnXmptn? = null,
    val crdhldrId: CardholderIdentification1? = null,
    val crdhldrOnLinePIN: CardholderOnLinePIN1? = null,
    val prtctdAuthntcnVal: ProtectedAuthenticationValue1? = null
)
{
    /**
    * Method and data intended to be used for this transaction to authenticate the cardholder or its card. AuthenticationMethod\\n\\n- ***TOKA*** : **AuthenticationToken** Definition: A token is used to verify an already performed authentication.  \\n\\n- ***ADDB*** : **BillingAddressVerification** Definition: Cardholder billing address verification.  \\n\\n- ***BYPS*** : **Bypass** Definition: Authentication bypassed by the merchant.  \\n\\n- ***BIOM*** : **Biometry** Definition: Biometric authentication of the cardholder.  \\n\\n- ***CDHI*** : **CardholderIdentificationData** Definition: Cardholder data provided for verification, for instance social security number, driver license number, passport number.  \\n\\n- ***CRYP*** : **CryptogramVerification** Definition: Verification of a cryptogram generated by a chip card or another device, for instance ARQC (Authorisation Request Cryptogram).  \\n\\n- ***CSCV*** : **CSCVerification** Definition: Verification of Card Security Code.  \\n\\n- ***MANU*** : **ManualVerification** Definition: Manual verification, for example passport or drivers license.  \\n\\n- ***MERC*** : **MerchantAuthentication** Definition: Merchant-related authentication.  \\n\\n- ***MOBL*** : **Mobile** Definition: Customer mobile device.  \\n\\n- ***FPIN*** : **OfflinePIN** Definition: Off-line PIN authentication (Personal Identification Number).  \\n\\n- ***NPIN*** : **OnLinePIN** Definition: On-line PIN authentication (Personal Identification Number).  \\n\\n- ***OTHR*** : **Other** Definition: Other customer authentication.  \\n\\n- ***PPSG*** : **PaperSignature** Definition: Handwritten paper signature.  \\n\\n- ***PSVE*** : **PassiveAuthentication** Definition: Authentication based on statistical cardholder behaviour.  \\n\\n- ***PSWD*** : **Password** Definition: Authentication by a password.  \\n\\n- ***TOKP*** : **PaymentToken** Definition: Verification or authentication related to the use of a payment token, for instance the validation of the authorised use of a token.  \\n\\n- ***SCRT*** : **SecureCertificate** Definition: Electronic commerce transaction secured with the X.509 certificate of a customer.  \\n\\n- ***SCNL*** : **SecuredChannel** Definition: Channel-encrypted transaction.  \\n\\n- ***CSEC*** : **SecureElectronicCommerce** Definition: Authentication performed during a secure electronic commerce transaction.  \\n\\n- ***SNCT*** : **SecureNoCertificate** Definition: Secure electronic transaction without cardholder certificate.  \\n\\n- ***ADDS*** : **ShippingAddressVerification** Definition: Cardholder shipping address verification.  \\n\\n- ***CPSG*** : **SignatureCapture** Definition: Electronic signature capture (handwritten signature).  \\n\\n- ***TOKN*** : **TokenAuthentication** Definition: Cryptogram generated by the token requestor or a customer device to validate the authorised use of a token.  \\n\\n- ***UKNW*** : **UnknownMethod** Definition: Authentication method is performed unknown.  
    * Values: TOKA,ADDB,BYPS,BIOM,CDHI,CRYP,CSCV,MANU,MERC,MOBL,FPIN,NPIN,OTHR,PPSG,PSVE,PSWD,TOKP,SCRT,SCNL,CSEC,SNCT,ADDS,CPSG,TOKN,UKNW
    */
    enum class AuthntcnMtd(val value: kotlin.String){
        TOKA("TOKA"),
        ADDB("ADDB"),
        BYPS("BYPS"),
        BIOM("BIOM"),
        CDHI("CDHI"),
        CRYP("CRYP"),
        CSCV("CSCV"),
        MANU("MANU"),
        MERC("MERC"),
        MOBL("MOBL"),
        FPIN("FPIN"),
        NPIN("NPIN"),
        OTHR("OTHR"),
        PPSG("PPSG"),
        PSVE("PSVE"),
        PSWD("PSWD"),
        TOKP("TOKP"),
        SCRT("SCRT"),
        SCNL("SCNL"),
        CSEC("CSEC"),
        SNCT("SNCT"),
        ADDS("ADDS"),
        CPSG("CPSG"),
        TOKN("TOKN"),
        UKNW("UKNW");
    }
    /**
    * Result of authentication. AuthenticationResult\\n\\n- ***DENY*** : **Denial** Definition: The authentication didn’t succeed.  \\n\\n- ***MRCH*** : **MerchantNotEnroled** Definition: Merchant not enrolled in the authentication programme.  \\n\\n- ***CARD*** : **NonParticipation** Definition: The card does not participate in the authentication programme.  \\n\\n- ***AUTH*** : **UnableToAuthenticate** Definition: The authentication couldn’t be carried out.  \\n\\n- ***CRPT*** : **WithCryptogram** Definition: Authentication succeeded with a cryptogram.  \\n\\n- ***UCRP*** : **WithoutCryptogram** Definition: Authentication succeeded without a cryptogram.  
    * Values: DENY,MRCH,CARD,AUTH,CRPT,UCRP
    */
    enum class AuthntcnRslt(val value: kotlin.String){
        DENY("DENY"),
        MRCH("MRCH"),
        CARD("CARD"),
        AUTH("AUTH"),
        CRPT("CRPT"),
        UCRP("UCRP");
    }
    /**
    * If Strong Customer Authentication is not mandated to process the transaction, this message element must identify the reason of exemption. AuthenticationExemption\\n\\n- ***LOWA*** : **LowAmountExemption** Definition: Transaction's amount is low and could be processed without strong customer authentication.  \\n\\n- ***MINT*** : **MerchantInitiatedTransaction** Definition: Transaction is initiated by the Card Acceptor.  \\n\\n- ***RECP*** : **RecurringPayment** Definition: Transaction is one of a series of recurring payment.  \\n\\n- ***SCPE*** : **SecureCorporatePaymentExemption** Definition: Transaction is a secure corporate payment.  \\n\\n- ***SCAD*** : **StrongCustomerAuthenticationDelegation** Definition: Card Acceptor is a strong customer authentication delegate.  \\n\\n- ***TRAE*** : **TransactionRiskAnalysisExemption** Definition: According to the transaction risk analysis the strong customer authentication is not mandated.  \\n\\n- ***PKGE*** : **TransportFareOrParkingFeeUnattendedPaymentExemption** Definition: Payment is processed in a environment where strong customer authentication is inappropriate.  \\n\\n- ***TMBE*** : **TrustedMerchantBeneficiaryExemption** Definition: Cardholder has enrolled the Card Acceptor in the exemption list of strong customer authentication.  
    * Values: LOWA,MINT,RECP,SCPE,SCAD,TRAE,PKGE,TMBE
    */
    enum class AuthntcnXmptn(val value: kotlin.String){
        LOWA("LOWA"),
        MINT("MINT"),
        RECP("RECP"),
        SCPE("SCPE"),
        SCAD("SCAD"),
        TRAE("TRAE"),
        PKGE("PKGE"),
        TMBE("TMBE");
    }
}

