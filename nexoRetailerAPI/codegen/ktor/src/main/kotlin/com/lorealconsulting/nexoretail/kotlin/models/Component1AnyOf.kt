/**
* nexo retailer API
* API defining resources for interactions between POI and POS, using underlying nexo messages # Summary The **nexo retailer** *Protocol Version 8* offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to exchange data securely, between a Point Of sale System (POS) and Point Of Interaction (POI) System. The nexo retailer protocol reduces sale to payment terminal communication complexity and costs,  addresses the problem of multiple private standards, aligned with the goals of nexo association, enables point of sale system providers to use a single interface with multiple payment systems,  for multiple payment instruments, and payment methods,  with a clear delimitation between with the retail world and the payment world.  The possible approaches are:   * Multiple POS to Multiple POI    * One to One POS to POI   * App 2 App when POS and POI are embedded in a single device    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a nexo compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the nexo retailer message usage guide if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Message Usage Guide of the nexo retailer protocol.**    It is not a replacement in any sense.   The main specification is always the nexo Message Usage Guide, with ISO20022 definitions of the protocol (MDR Part 1 and 2).   It is highly recommended to read through the standards documentations in conjunction with this API definition.    Namely regarding :     * The rules regarding dialogue initiation, termination and combination      * The rules and constraints applied to data fields, depending on the use case     * The error management on Sale system and POI system sides     * The security that can be applied to the protocol * **This API definition contains the messages for all different approaches defined in the Message Usage Guide.**  * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.1.md]        \"If in is \"header\"and the name field is \"Accept\", \"Content-Type\"or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\"will not be defined in this file at any place.      The elements \"Content-Type\"and \"Authorization\"are implicitly defined by the OpenApi tags \"content\"and \"security\".     * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a nexo complient API in addition to the elements defined in this file. 
*
* The version of the OpenAPI document: 2025-01
* Contact: romain.loreal@lorealconsulting.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.lorealconsulting.nexoretail.kotlin.models

import com.lorealconsulting.nexoretail.kotlin.models.Assessment1
import com.lorealconsulting.nexoretail.kotlin.models.Characteristics1
import com.lorealconsulting.nexoretail.kotlin.models.Identification28
import com.lorealconsulting.nexoretail.kotlin.models.Package1
import com.lorealconsulting.nexoretail.kotlin.models.StandardCompliance1
import com.lorealconsulting.nexoretail.kotlin.models.Status1
import com.lorealconsulting.nexoretail.kotlin.models.SubTypeInformation1

import kotlinx.serialization.Serializable
/**
 * Data related to a component of the POI (Point Of Interaction) performing the transaction. Component
 * @param id 
 * @param tp Type of component belonging to a POI (Point Of Interaction) Terminal. Type\\n\\n- ***AQPP*** : **AcquirerProtocolParameters** Definition: Parameters for acquirer interface of the point of interaction, including acquirer host configuration parameters.  \\n\\n- ***APPR*** : **ApplicationParameters** Definition: Parameters of a payment application running on the point of interaction.  \\n\\n- ***TLPR*** : **TerminalParameters** Definition: Manufacturer configuration parameters of the point of interaction.  \\n\\n- ***SCPR*** : **SecurityParameters** Definition: Security parameters of the point of interaction.  \\n\\n- ***SERV*** : **Server** Definition: Payment server of a point of interaction system.  \\n\\n- ***TERM*** : **Terminal** Definition: Payment terminal point of interaction.  \\n\\n- ***DVCE*** : **Device** Definition: Device sub-component of a component of the point of interaction.  \\n\\n- ***SECM*** : **SecureModule** Definition: Security module.  \\n\\n- ***APLI*** : **PaymentApplication** Definition: Payment application software.  \\n\\n- ***EMVK*** : **EMVKernel** Definition: EMV application kernel (EMV is the chip card specifications initially defined by Eurocard, Mastercard and Visa).  \\n\\n- ***EMVO*** : **EMVLevel1** Definition: EMV physical interface (EMV is the chip card specifications initially defined by Eurocard, Mastercard and Visa).  \\n\\n- ***MDWR*** : **Middleware** Definition: Software module of the point of interaction.  \\n\\n- ***DRVR*** : **Driver** Definition: Driver module of the point of interaction.  \\n\\n- ***OPST*** : **OperatingSystem** Definition: Software that manages hardware to provide common services to the applications.  \\n\\n- ***MRPR*** : **MerchantParameters** Definition: Merchant configuration parameters for the point of interaction (POI).  \\n\\n- ***CRTF*** : **CertificateParameters** Definition: Certificate provided by a terminal manager.  \\n\\n- ***TMSP*** : **TMSProtocolParameters** Definition: Configuration parameters for the TMS protocol.  \\n\\n- ***SACP*** : **SaleComponent** Definition: Component of the Sale system.  \\n\\n- ***SAPR*** : **SaleToPOIProtocolParameters** Definition: Parameters related to the Sale to POI protocol.  \\n\\n- ***LOGF*** : **LogFile** Definition: Any repository used for recording log traces.  \\n\\n- ***MDFL*** : **MediaFile** Definition: Media file managed by an application of the POI.  \\n\\n- ***SOFT*** : **Soft** Definition: Payment or other software application.  \\n\\n- ***CONF*** : **ConfigurationFile** Definition: Configuration file relevant for the POI.  \\n\\n- ***RPFL*** : **ReportFile** Definition: Report file generated by the POI.  
 * @param atId 
 * @param assmnt 
 * @param chrtcs 
 * @param packg 
 * @param stdCmplc 
 * @param sts 
 * @param subTpInf 
 */
@Serializable
data class Component1AnyOf(
    val id: Identification28,
    /* Type of component belonging to a POI (Point Of Interaction) Terminal. Type\\n\\n- ***AQPP*** : **AcquirerProtocolParameters** Definition: Parameters for acquirer interface of the point of interaction, including acquirer host configuration parameters.  \\n\\n- ***APPR*** : **ApplicationParameters** Definition: Parameters of a payment application running on the point of interaction.  \\n\\n- ***TLPR*** : **TerminalParameters** Definition: Manufacturer configuration parameters of the point of interaction.  \\n\\n- ***SCPR*** : **SecurityParameters** Definition: Security parameters of the point of interaction.  \\n\\n- ***SERV*** : **Server** Definition: Payment server of a point of interaction system.  \\n\\n- ***TERM*** : **Terminal** Definition: Payment terminal point of interaction.  \\n\\n- ***DVCE*** : **Device** Definition: Device sub-component of a component of the point of interaction.  \\n\\n- ***SECM*** : **SecureModule** Definition: Security module.  \\n\\n- ***APLI*** : **PaymentApplication** Definition: Payment application software.  \\n\\n- ***EMVK*** : **EMVKernel** Definition: EMV application kernel (EMV is the chip card specifications initially defined by Eurocard, Mastercard and Visa).  \\n\\n- ***EMVO*** : **EMVLevel1** Definition: EMV physical interface (EMV is the chip card specifications initially defined by Eurocard, Mastercard and Visa).  \\n\\n- ***MDWR*** : **Middleware** Definition: Software module of the point of interaction.  \\n\\n- ***DRVR*** : **Driver** Definition: Driver module of the point of interaction.  \\n\\n- ***OPST*** : **OperatingSystem** Definition: Software that manages hardware to provide common services to the applications.  \\n\\n- ***MRPR*** : **MerchantParameters** Definition: Merchant configuration parameters for the point of interaction (POI).  \\n\\n- ***CRTF*** : **CertificateParameters** Definition: Certificate provided by a terminal manager.  \\n\\n- ***TMSP*** : **TMSProtocolParameters** Definition: Configuration parameters for the TMS protocol.  \\n\\n- ***SACP*** : **SaleComponent** Definition: Component of the Sale system.  \\n\\n- ***SAPR*** : **SaleToPOIProtocolParameters** Definition: Parameters related to the Sale to POI protocol.  \\n\\n- ***LOGF*** : **LogFile** Definition: Any repository used for recording log traces.  \\n\\n- ***MDFL*** : **MediaFile** Definition: Media file managed by an application of the POI.  \\n\\n- ***SOFT*** : **Soft** Definition: Payment or other software application.  \\n\\n- ***CONF*** : **ConfigurationFile** Definition: Configuration file relevant for the POI.  \\n\\n- ***RPFL*** : **ReportFile** Definition: Report file generated by the POI.   */
    val tp: Component1AnyOf.Tp,
    /*  */
    val atId: kotlin.String? = null,
    val assmnt: Assessment1? = null,
    val chrtcs: Characteristics1? = null,
    val packg: Package1? = null,
    val stdCmplc: StandardCompliance1? = null,
    val sts: Status1? = null,
    val subTpInf: SubTypeInformation1? = null
)
{
    /**
    * Type of component belonging to a POI (Point Of Interaction) Terminal. Type\\n\\n- ***AQPP*** : **AcquirerProtocolParameters** Definition: Parameters for acquirer interface of the point of interaction, including acquirer host configuration parameters.  \\n\\n- ***APPR*** : **ApplicationParameters** Definition: Parameters of a payment application running on the point of interaction.  \\n\\n- ***TLPR*** : **TerminalParameters** Definition: Manufacturer configuration parameters of the point of interaction.  \\n\\n- ***SCPR*** : **SecurityParameters** Definition: Security parameters of the point of interaction.  \\n\\n- ***SERV*** : **Server** Definition: Payment server of a point of interaction system.  \\n\\n- ***TERM*** : **Terminal** Definition: Payment terminal point of interaction.  \\n\\n- ***DVCE*** : **Device** Definition: Device sub-component of a component of the point of interaction.  \\n\\n- ***SECM*** : **SecureModule** Definition: Security module.  \\n\\n- ***APLI*** : **PaymentApplication** Definition: Payment application software.  \\n\\n- ***EMVK*** : **EMVKernel** Definition: EMV application kernel (EMV is the chip card specifications initially defined by Eurocard, Mastercard and Visa).  \\n\\n- ***EMVO*** : **EMVLevel1** Definition: EMV physical interface (EMV is the chip card specifications initially defined by Eurocard, Mastercard and Visa).  \\n\\n- ***MDWR*** : **Middleware** Definition: Software module of the point of interaction.  \\n\\n- ***DRVR*** : **Driver** Definition: Driver module of the point of interaction.  \\n\\n- ***OPST*** : **OperatingSystem** Definition: Software that manages hardware to provide common services to the applications.  \\n\\n- ***MRPR*** : **MerchantParameters** Definition: Merchant configuration parameters for the point of interaction (POI).  \\n\\n- ***CRTF*** : **CertificateParameters** Definition: Certificate provided by a terminal manager.  \\n\\n- ***TMSP*** : **TMSProtocolParameters** Definition: Configuration parameters for the TMS protocol.  \\n\\n- ***SACP*** : **SaleComponent** Definition: Component of the Sale system.  \\n\\n- ***SAPR*** : **SaleToPOIProtocolParameters** Definition: Parameters related to the Sale to POI protocol.  \\n\\n- ***LOGF*** : **LogFile** Definition: Any repository used for recording log traces.  \\n\\n- ***MDFL*** : **MediaFile** Definition: Media file managed by an application of the POI.  \\n\\n- ***SOFT*** : **Soft** Definition: Payment or other software application.  \\n\\n- ***CONF*** : **ConfigurationFile** Definition: Configuration file relevant for the POI.  \\n\\n- ***RPFL*** : **ReportFile** Definition: Report file generated by the POI.  
    * Values: AQPP,APPR,TLPR,SCPR,SERV,TERM,DVCE,SECM,APLI,EMVK,EMVO,MDWR,DRVR,OPST,MRPR,CRTF,TMSP,SACP,SAPR,LOGF,MDFL,SOFT,CONF,RPFL
    */
    enum class Tp(val value: kotlin.String){
        AQPP("AQPP"),
        APPR("APPR"),
        TLPR("TLPR"),
        SCPR("SCPR"),
        SERV("SERV"),
        TERM("TERM"),
        DVCE("DVCE"),
        SECM("SECM"),
        APLI("APLI"),
        EMVK("EMVK"),
        EMVO("EMVO"),
        MDWR("MDWR"),
        DRVR("DRVR"),
        OPST("OPST"),
        MRPR("MRPR"),
        CRTF("CRTF"),
        TMSP("TMSP"),
        SACP("SACP"),
        SAPR("SAPR"),
        LOGF("LOGF"),
        MDFL("MDFL"),
        SOFT("SOFT"),
        CONF("CONF"),
        RPFL("RPFL");
    }
}

