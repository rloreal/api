/**
* nexo retailer API
* API defining resources for interactions between POI and POS, using underlying nexo messages # Summary The **nexo retailer** *Protocol Version 8* offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to exchange data securely, between a Point Of sale System (POS) and Point Of Interaction (POI) System. The nexo retailer protocol reduces sale to payment terminal communication complexity and costs,  addresses the problem of multiple private standards, aligned with the goals of nexo association, enables point of sale system providers to use a single interface with multiple payment systems,  for multiple payment instruments, and payment methods,  with a clear delimitation between with the retail world and the payment world.  The possible approaches are:   * Multiple POS to Multiple POI    * One to One POS to POI   * App 2 App when POS and POI are embedded in a single device    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a nexo compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the nexo retailer message usage guide if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Message Usage Guide of the nexo retailer protocol.**    It is not a replacement in any sense.   The main specification is always the nexo Message Usage Guide, with ISO20022 definitions of the protocol (MDR Part 1 and 2).   It is highly recommended to read through the standards documentations in conjunction with this API definition.    Namely regarding :     * The rules regarding dialogue initiation, termination and combination      * The rules and constraints applied to data fields, depending on the use case     * The error management on Sale system and POI system sides     * The security that can be applied to the protocol * **This API definition contains the messages for all different approaches defined in the Message Usage Guide.**  * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.1.md]        \"If in is \"header\"and the name field is \"Accept\", \"Content-Type\"or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\"will not be defined in this file at any place.      The elements \"Content-Type\"and \"Authorization\"are implicitly defined by the OpenApi tags \"content\"and \"security\".     * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a nexo complient API in addition to the elements defined in this file. 
*
* The version of the OpenAPI document: 2025-01
* Contact: romain.loreal@lorealconsulting.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.lorealconsulting.nexoretail.kotlin.models

import com.lorealconsulting.nexoretail.kotlin.models.AdditionalInformation9
import com.lorealconsulting.nexoretail.kotlin.models.AggregationTransaction1
import com.lorealconsulting.nexoretail.kotlin.models.AuthorisedAmount2
import com.lorealconsulting.nexoretail.kotlin.models.CumulativeAmount2
import com.lorealconsulting.nexoretail.kotlin.models.CurrencyConversionResult4
import com.lorealconsulting.nexoretail.kotlin.models.DeliveryLocation3
import com.lorealconsulting.nexoretail.kotlin.models.DetailedAmount2
import com.lorealconsulting.nexoretail.kotlin.models.Instalment1
import com.lorealconsulting.nexoretail.kotlin.models.InvoiceAmount2
import com.lorealconsulting.nexoretail.kotlin.models.OnLineReason1
import com.lorealconsulting.nexoretail.kotlin.models.ProductCodeSetIdentification1
import com.lorealconsulting.nexoretail.kotlin.models.Recurring1
import com.lorealconsulting.nexoretail.kotlin.models.RequestedAmount2
import com.lorealconsulting.nexoretail.kotlin.models.SaleItem4
import com.lorealconsulting.nexoretail.kotlin.models.TotalAmount9
import com.lorealconsulting.nexoretail.kotlin.models.TotalAuthorisedAmount2
import com.lorealconsulting.nexoretail.kotlin.models.UnattendedLevelCategory1

import kotlinx.serialization.Serializable
/**
 * Details of the transaction. TransactionDetails
 * @param ttlAmt 
 * @param atId 
 * @param acctTp Type of cardholder account used for the transaction. AccountType\\n\\n- ***CTDP*** : **CertificateOfDeposit** Definition: Certificate of deposit saving account.  \\n\\n- ***CHCK*** : **Checking** Definition: Checking account.  \\n\\n- ***CRDT*** : **CreditCard** Definition: Credit card account.  \\n\\n- ***CURR*** : **Current** Definition: Current account.  \\n\\n- ***CDBT*** : **DebitCard** Definition: Debit card account.  \\n\\n- ***DFLT*** : **Default** Definition: Default account.  \\n\\n- ***EPRS*** : **EpurseCard** Definition: Electronic purse card account.  \\n\\n- ***HEQL*** : **HomeEquityLoan** Definition: Home equity loan credit account.  \\n\\n- ***ISTL*** : **InstalmentLoan** Definition: Instalment loan credit account.  \\n\\n- ***INVS*** : **Investment** Definition: Investment account.  \\n\\n- ***LCDT*** : **LineOfCredit** Definition: Line of credit account.  \\n\\n- ***MBNW*** : **MobilePhoneAccount** Definition: Mobile Station Integrated Services Digital Network Number (MSISDN).  \\n\\n- ***MNMK*** : **MoneyMarket** Definition: Money market saving account.  \\n\\n- ***MNMC*** : **MoneyMarketChecking** Definition: Money market checking account.  \\n\\n- ***MTGL*** : **MortgageLoan** Definition: Mortgage loan credit account.  \\n\\n- ***RTRM*** : **RetirementAccount** Definition: Retirement account.  \\n\\n- ***RVLV*** : **RevolvingLoanAccount** Definition: Revolving loan account.  \\n\\n- ***SVNG*** : **Savings** Definition: Savings account.  \\n\\n- ***STBD*** : **StockOrBond** Definition: Stock or bond investment account.  \\n\\n- ***UVRL*** : **Universal** Definition: Universal account.  \\n\\n- ***PRPD*** : **PrePaid** Definition: Pre-paid account.  \\n\\n- ***FLTC*** : **FleetCard** Definition: Fleet card account.  
 * @param addtlInf 
 * @param aggtnTx 
 * @param amtQlfr Qualifies the amount associated with the transaction. AmountQualifier\\n\\n- ***ACTL*** : **Actual** Definition: Actual amount.  \\n\\n- ***ESTM*** : **Estimated** Definition: Estimated amount (the final amount could be above or below).  \\n\\n- ***MAXI*** : **Maximum** Definition: Maximum amount (the final amount must be less or equal).  \\n\\n- ***DFLT*** : **Default** Definition: Default amount.  \\n\\n- ***RPLT*** : **Replacement** Definition: Replacement amount.  \\n\\n- ***INCR*** : **Incremental** Definition: Incremental amount for reservation.  \\n\\n- ***DECR*** : **Decremental** Definition: Decremental amount for reservation.  \\n\\n- ***RESD*** : **Reserved** Definition: Reserved or updated reserved amount for reservation.  
 * @param authrsdAmt 
 * @param ccy Currency associated with the transaction. Currency
 * @param ccyConvsRslt 
 * @param cmltvAmt 
 * @param cmpltnSeqCntr Identification in the Sequence of the Completion related to the authorisation of this transaction. CompletionSequenceCounter
 * @param cmpltnSeqNb Total Number of Completion related to the authorisation of this transaction. CompletionSequenceNumber
 * @param dlvryLctn 
 * @param dtldAmt 
 * @param icCRltdData Data related to an integrated circuit card application. ICCRelatedData
 * @param instlmt 
 * @param invcAmt 
 * @param onLineRsn 
 * @param pdctCdSetId 
 * @param rcrng 
 * @param reSubmissnCntr In case a message is sent after the consumption of goods or service, it indicates the number of times the authorisation has been sent to the Acquirer in order to get an approval. ReSubmissionCounter
 * @param reqdAmt 
 * @param saleItm 
 * @param ttlAuthrsdAmt 
 * @param uattnddLvlCtgy 
 * @param vldtyDt Transaction authorisation deadline to complete the related payment. ValidityDate
 */
@Serializable
data class TransactionDetails4(
    val ttlAmt: TotalAmount9,
    /*  */
    val atId: kotlin.String? = null,
    /* Type of cardholder account used for the transaction. AccountType\\n\\n- ***CTDP*** : **CertificateOfDeposit** Definition: Certificate of deposit saving account.  \\n\\n- ***CHCK*** : **Checking** Definition: Checking account.  \\n\\n- ***CRDT*** : **CreditCard** Definition: Credit card account.  \\n\\n- ***CURR*** : **Current** Definition: Current account.  \\n\\n- ***CDBT*** : **DebitCard** Definition: Debit card account.  \\n\\n- ***DFLT*** : **Default** Definition: Default account.  \\n\\n- ***EPRS*** : **EpurseCard** Definition: Electronic purse card account.  \\n\\n- ***HEQL*** : **HomeEquityLoan** Definition: Home equity loan credit account.  \\n\\n- ***ISTL*** : **InstalmentLoan** Definition: Instalment loan credit account.  \\n\\n- ***INVS*** : **Investment** Definition: Investment account.  \\n\\n- ***LCDT*** : **LineOfCredit** Definition: Line of credit account.  \\n\\n- ***MBNW*** : **MobilePhoneAccount** Definition: Mobile Station Integrated Services Digital Network Number (MSISDN).  \\n\\n- ***MNMK*** : **MoneyMarket** Definition: Money market saving account.  \\n\\n- ***MNMC*** : **MoneyMarketChecking** Definition: Money market checking account.  \\n\\n- ***MTGL*** : **MortgageLoan** Definition: Mortgage loan credit account.  \\n\\n- ***RTRM*** : **RetirementAccount** Definition: Retirement account.  \\n\\n- ***RVLV*** : **RevolvingLoanAccount** Definition: Revolving loan account.  \\n\\n- ***SVNG*** : **Savings** Definition: Savings account.  \\n\\n- ***STBD*** : **StockOrBond** Definition: Stock or bond investment account.  \\n\\n- ***UVRL*** : **Universal** Definition: Universal account.  \\n\\n- ***PRPD*** : **PrePaid** Definition: Pre-paid account.  \\n\\n- ***FLTC*** : **FleetCard** Definition: Fleet card account.   */
    val acctTp: TransactionDetails4.AcctTp? = null,
    val addtlInf: AdditionalInformation9? = null,
    val aggtnTx: AggregationTransaction1? = null,
    /* Qualifies the amount associated with the transaction. AmountQualifier\\n\\n- ***ACTL*** : **Actual** Definition: Actual amount.  \\n\\n- ***ESTM*** : **Estimated** Definition: Estimated amount (the final amount could be above or below).  \\n\\n- ***MAXI*** : **Maximum** Definition: Maximum amount (the final amount must be less or equal).  \\n\\n- ***DFLT*** : **Default** Definition: Default amount.  \\n\\n- ***RPLT*** : **Replacement** Definition: Replacement amount.  \\n\\n- ***INCR*** : **Incremental** Definition: Incremental amount for reservation.  \\n\\n- ***DECR*** : **Decremental** Definition: Decremental amount for reservation.  \\n\\n- ***RESD*** : **Reserved** Definition: Reserved or updated reserved amount for reservation.   */
    val amtQlfr: TransactionDetails4.AmtQlfr? = null,
    val authrsdAmt: AuthorisedAmount2? = null,
    /* Currency associated with the transaction. Currency */
    val ccy: kotlin.String? = null,
    val ccyConvsRslt: CurrencyConversionResult4? = null,
    val cmltvAmt: CumulativeAmount2? = null,
    /* Identification in the Sequence of the Completion related to the authorisation of this transaction. CompletionSequenceCounter */
    val cmpltnSeqCntr: java.math.BigDecimal? = null,
    /* Total Number of Completion related to the authorisation of this transaction. CompletionSequenceNumber */
    val cmpltnSeqNb: java.math.BigDecimal? = null,
    val dlvryLctn: DeliveryLocation3? = null,
    val dtldAmt: DetailedAmount2? = null,
    /* Data related to an integrated circuit card application. ICCRelatedData */
    val icCRltdData: kotlin.String? = null,
    val instlmt: Instalment1? = null,
    val invcAmt: InvoiceAmount2? = null,
    val onLineRsn: OnLineReason1? = null,
    val pdctCdSetId: ProductCodeSetIdentification1? = null,
    val rcrng: Recurring1? = null,
    /* In case a message is sent after the consumption of goods or service, it indicates the number of times the authorisation has been sent to the Acquirer in order to get an approval. ReSubmissionCounter */
    val reSubmissnCntr: java.math.BigDecimal? = null,
    val reqdAmt: RequestedAmount2? = null,
    val saleItm: SaleItem4? = null,
    val ttlAuthrsdAmt: TotalAuthorisedAmount2? = null,
    val uattnddLvlCtgy: UnattendedLevelCategory1? = null,
    /* Transaction authorisation deadline to complete the related payment. ValidityDate */
    val vldtyDt: kotlin.String? = null
)
{
    /**
    * Type of cardholder account used for the transaction. AccountType\\n\\n- ***CTDP*** : **CertificateOfDeposit** Definition: Certificate of deposit saving account.  \\n\\n- ***CHCK*** : **Checking** Definition: Checking account.  \\n\\n- ***CRDT*** : **CreditCard** Definition: Credit card account.  \\n\\n- ***CURR*** : **Current** Definition: Current account.  \\n\\n- ***CDBT*** : **DebitCard** Definition: Debit card account.  \\n\\n- ***DFLT*** : **Default** Definition: Default account.  \\n\\n- ***EPRS*** : **EpurseCard** Definition: Electronic purse card account.  \\n\\n- ***HEQL*** : **HomeEquityLoan** Definition: Home equity loan credit account.  \\n\\n- ***ISTL*** : **InstalmentLoan** Definition: Instalment loan credit account.  \\n\\n- ***INVS*** : **Investment** Definition: Investment account.  \\n\\n- ***LCDT*** : **LineOfCredit** Definition: Line of credit account.  \\n\\n- ***MBNW*** : **MobilePhoneAccount** Definition: Mobile Station Integrated Services Digital Network Number (MSISDN).  \\n\\n- ***MNMK*** : **MoneyMarket** Definition: Money market saving account.  \\n\\n- ***MNMC*** : **MoneyMarketChecking** Definition: Money market checking account.  \\n\\n- ***MTGL*** : **MortgageLoan** Definition: Mortgage loan credit account.  \\n\\n- ***RTRM*** : **RetirementAccount** Definition: Retirement account.  \\n\\n- ***RVLV*** : **RevolvingLoanAccount** Definition: Revolving loan account.  \\n\\n- ***SVNG*** : **Savings** Definition: Savings account.  \\n\\n- ***STBD*** : **StockOrBond** Definition: Stock or bond investment account.  \\n\\n- ***UVRL*** : **Universal** Definition: Universal account.  \\n\\n- ***PRPD*** : **PrePaid** Definition: Pre-paid account.  \\n\\n- ***FLTC*** : **FleetCard** Definition: Fleet card account.  
    * Values: CTDP,CHCK,CRDT,CURR,CDBT,DFLT,EPRS,HEQL,ISTL,INVS,LCDT,MBNW,MNMK,MNMC,MTGL,RTRM,RVLV,SVNG,STBD,UVRL,PRPD,FLTC
    */
    enum class AcctTp(val value: kotlin.String){
        CTDP("CTDP"),
        CHCK("CHCK"),
        CRDT("CRDT"),
        CURR("CURR"),
        CDBT("CDBT"),
        DFLT("DFLT"),
        EPRS("EPRS"),
        HEQL("HEQL"),
        ISTL("ISTL"),
        INVS("INVS"),
        LCDT("LCDT"),
        MBNW("MBNW"),
        MNMK("MNMK"),
        MNMC("MNMC"),
        MTGL("MTGL"),
        RTRM("RTRM"),
        RVLV("RVLV"),
        SVNG("SVNG"),
        STBD("STBD"),
        UVRL("UVRL"),
        PRPD("PRPD"),
        FLTC("FLTC");
    }
    /**
    * Qualifies the amount associated with the transaction. AmountQualifier\\n\\n- ***ACTL*** : **Actual** Definition: Actual amount.  \\n\\n- ***ESTM*** : **Estimated** Definition: Estimated amount (the final amount could be above or below).  \\n\\n- ***MAXI*** : **Maximum** Definition: Maximum amount (the final amount must be less or equal).  \\n\\n- ***DFLT*** : **Default** Definition: Default amount.  \\n\\n- ***RPLT*** : **Replacement** Definition: Replacement amount.  \\n\\n- ***INCR*** : **Incremental** Definition: Incremental amount for reservation.  \\n\\n- ***DECR*** : **Decremental** Definition: Decremental amount for reservation.  \\n\\n- ***RESD*** : **Reserved** Definition: Reserved or updated reserved amount for reservation.  
    * Values: ACTL,ESTM,MAXI,DFLT,RPLT,INCR,DECR,RESD
    */
    enum class AmtQlfr(val value: kotlin.String){
        ACTL("ACTL"),
        ESTM("ESTM"),
        MAXI("MAXI"),
        DFLT("DFLT"),
        RPLT("RPLT"),
        INCR("INCR"),
        DECR("DECR"),
        RESD("RESD");
    }
}

