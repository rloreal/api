/**
* nexo retailer API
* API defining resources for interactions between POI and POS, using underlying nexo messages # Summary The **nexo retailer** *Protocol Version 8* offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to exchange data securely, between a Point Of sale System (POS) and Point Of Interaction (POI) System. The nexo retailer protocol reduces sale to payment terminal communication complexity and costs,  addresses the problem of multiple private standards, aligned with the goals of nexo association, enables point of sale system providers to use a single interface with multiple payment systems,  for multiple payment instruments, and payment methods,  with a clear delimitation between with the retail world and the payment world.  The possible approaches are:   * Multiple POS to Multiple POI    * One to One POS to POI   * App 2 App when POS and POI are embedded in a single device    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a nexo compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the nexo retailer message usage guide if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Message Usage Guide of the nexo retailer protocol.**    It is not a replacement in any sense.   The main specification is always the nexo Message Usage Guide, with ISO20022 definitions of the protocol (MDR Part 1 and 2).   It is highly recommended to read through the standards documentations in conjunction with this API definition.    Namely regarding :     * The rules regarding dialogue initiation, termination and combination      * The rules and constraints applied to data fields, depending on the use case     * The error management on Sale system and POI system sides     * The security that can be applied to the protocol * **This API definition contains the messages for all different approaches defined in the Message Usage Guide.**  * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.1.md]        \"If in is \"header\"and the name field is \"Accept\", \"Content-Type\"or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\"will not be defined in this file at any place.      The elements \"Content-Type\"and \"Authorization\"are implicitly defined by the OpenApi tags \"content\"and \"security\".     * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a nexo complient API in addition to the elements defined in this file. 
*
* The version of the OpenAPI document: 2025-01
* Contact: romain.loreal@lorealconsulting.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.lorealconsulting.nexoretail.kotlin.models

import com.lorealconsulting.nexoretail.kotlin.models.Balance6
import com.lorealconsulting.nexoretail.kotlin.models.Brand1
import com.lorealconsulting.nexoretail.kotlin.models.ExpiryDate2
import com.lorealconsulting.nexoretail.kotlin.models.Identification17
import com.lorealconsulting.nexoretail.kotlin.models.OwnerName1
import com.lorealconsulting.nexoretail.kotlin.models.Provider5

import kotlinx.serialization.Serializable
/**
 * Store value account payment instrument. StoredValueAccount
 * @param atId 
 * @param acctTp Type of stored value account. AccountType\\n\\n- ***BNKA*** : **BankPrepaidAccount** Definition: Prepaid account managed by a financial institution for low income customers.  \\n\\n- ***CWVC*** : **CarwashVoucher** Definition: Car wash specific account.  \\n\\n- ***CPYA*** : **CompanyPrepaidAccount** Definition: Specific prepaid account for companies or professionals expenses.  \\n\\n- ***ELMY*** : **ElectronicMoneyAccount** Definition: Account supporting e-money issued by an electronic money issuer.  \\n\\n- ***GIFT*** : **GiftCard** Definition: Payment mean issued by retailers or banks as a substitute to a non-monetary gift. Usually, this Stored Value item is used only once.  \\n\\n- ***GCER*** : **GiftCertificate** Definition: Certificate to be given to a customer. Usually one shot voucher.  \\n\\n- ***MLVC*** : **MealVoucher** Definition: Meal and check voucher for restaurants.  \\n\\n- ***OLVC*** : **OnlineVoucher** Definition: Voucher that can be used online once or in several times.  \\n\\n- ***MERC*** : **MerchantAccount** Definition: Prepaid account open with a merchant or big retailers.  \\n\\n- ***OTHR*** : **OtherPrepaidAccount** Definition: Other non listed stored value instrument.  \\n\\n- ***PHON*** : **PhoneCard** Definition: Stored value instrument used to pay telephone services (e.g. card or identifier).  \\n\\n- ***CARD*** : **SmartCardTag** Definition: Stored value account hold on the chip of a smart card.   \\n\\n- ***TRVL*** : **Travel** Definition: Travel prepaid account.  
 * @param bal 
 * @param brnd 
 * @param ccy Currency of the Stored Value account. Currency
 * @param id 
 * @param idTp Type of identification for this Stored Value Account. IdentificationType\\n\\n- ***ACCT*** : **AccountNumber** Definition: Account identification.  \\n\\n- ***BARC*** : **BarCode** Definition: Bar-code with a specific form of identification.  \\n\\n- ***ISO2*** : **ISOTrack2** Definition: ISO Track 2 including identification.  \\n\\n- ***PHON*** : **PhoneNumber** Definition: A phone number identifies the account on which the phone card is assigned.  \\n\\n- ***CPAN*** : **PrimaryAccountNumber** Definition: Standard card identification (card number).  \\n\\n- ***PRIV*** : **PrivativeNumbering** Definition: An identification set by a privative application.  \\n\\n- ***UUID*** : **UniversalUniqueIdentification** Definition: A Universal Unique Identification code is set for identification.  
 * @param ntryMd Standard or last entry mode to access the Stored Value account or card. EntryMode\\n\\n- ***TAGC*** : **Tag** Definition: Tag reading capabilities (RFID, etc.).  \\n\\n- ***PHYS*** : **Physical** Definition: Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.  \\n\\n- ***BRCD*** : **BarCode** Definition: Bar code.  \\n\\n- ***MGST*** : **MagneticStripe** Definition: Magnetic stripe.  \\n\\n- ***CICC*** : **ICC** Definition: ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.  \\n\\n- ***DFLE*** : **AccountData** Definition: Account data on file.  \\n\\n- ***CTLS*** : **ProximityReader** Definition: Contactless proximity reader.  \\n\\n- ***ECTL*** : **EMVProximityReader** Definition: Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).  \\n\\n- ***CDFL*** : **CardOnFile** Definition: Card information are stored on a file.  \\n\\n- ***SICC*** : **SynchronousIntegratedCircuitCard** Definition: Synchronous ICC - (Integrated Circuit Card) with contact.  \\n\\n- ***UNKW*** : **Unknown** Definition: Unknown card reading capability.  \\n\\n- ***QRCD*** : **QRCode** Definition: Quick response code.  \\n\\n- ***OPTC*** : **OpticalCode** Definition: Optical coded reading capabilities (e.g. barcode, QR code, etc.)  
 * @param ownrNm 
 * @param prvdr 
 * @param xpryDt 
 */
@Serializable
data class StoredValueAccount3AnyOf(
    /*  */
    val atId: kotlin.String? = null,
    /* Type of stored value account. AccountType\\n\\n- ***BNKA*** : **BankPrepaidAccount** Definition: Prepaid account managed by a financial institution for low income customers.  \\n\\n- ***CWVC*** : **CarwashVoucher** Definition: Car wash specific account.  \\n\\n- ***CPYA*** : **CompanyPrepaidAccount** Definition: Specific prepaid account for companies or professionals expenses.  \\n\\n- ***ELMY*** : **ElectronicMoneyAccount** Definition: Account supporting e-money issued by an electronic money issuer.  \\n\\n- ***GIFT*** : **GiftCard** Definition: Payment mean issued by retailers or banks as a substitute to a non-monetary gift. Usually, this Stored Value item is used only once.  \\n\\n- ***GCER*** : **GiftCertificate** Definition: Certificate to be given to a customer. Usually one shot voucher.  \\n\\n- ***MLVC*** : **MealVoucher** Definition: Meal and check voucher for restaurants.  \\n\\n- ***OLVC*** : **OnlineVoucher** Definition: Voucher that can be used online once or in several times.  \\n\\n- ***MERC*** : **MerchantAccount** Definition: Prepaid account open with a merchant or big retailers.  \\n\\n- ***OTHR*** : **OtherPrepaidAccount** Definition: Other non listed stored value instrument.  \\n\\n- ***PHON*** : **PhoneCard** Definition: Stored value instrument used to pay telephone services (e.g. card or identifier).  \\n\\n- ***CARD*** : **SmartCardTag** Definition: Stored value account hold on the chip of a smart card.   \\n\\n- ***TRVL*** : **Travel** Definition: Travel prepaid account.   */
    val acctTp: StoredValueAccount3AnyOf.AcctTp? = null,
    val bal: Balance6? = null,
    val brnd: Brand1? = null,
    /* Currency of the Stored Value account. Currency */
    val ccy: kotlin.String? = null,
    val id: Identification17? = null,
    /* Type of identification for this Stored Value Account. IdentificationType\\n\\n- ***ACCT*** : **AccountNumber** Definition: Account identification.  \\n\\n- ***BARC*** : **BarCode** Definition: Bar-code with a specific form of identification.  \\n\\n- ***ISO2*** : **ISOTrack2** Definition: ISO Track 2 including identification.  \\n\\n- ***PHON*** : **PhoneNumber** Definition: A phone number identifies the account on which the phone card is assigned.  \\n\\n- ***CPAN*** : **PrimaryAccountNumber** Definition: Standard card identification (card number).  \\n\\n- ***PRIV*** : **PrivativeNumbering** Definition: An identification set by a privative application.  \\n\\n- ***UUID*** : **UniversalUniqueIdentification** Definition: A Universal Unique Identification code is set for identification.   */
    val idTp: StoredValueAccount3AnyOf.IdTp? = null,
    /* Standard or last entry mode to access the Stored Value account or card. EntryMode\\n\\n- ***TAGC*** : **Tag** Definition: Tag reading capabilities (RFID, etc.).  \\n\\n- ***PHYS*** : **Physical** Definition: Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.  \\n\\n- ***BRCD*** : **BarCode** Definition: Bar code.  \\n\\n- ***MGST*** : **MagneticStripe** Definition: Magnetic stripe.  \\n\\n- ***CICC*** : **ICC** Definition: ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.  \\n\\n- ***DFLE*** : **AccountData** Definition: Account data on file.  \\n\\n- ***CTLS*** : **ProximityReader** Definition: Contactless proximity reader.  \\n\\n- ***ECTL*** : **EMVProximityReader** Definition: Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).  \\n\\n- ***CDFL*** : **CardOnFile** Definition: Card information are stored on a file.  \\n\\n- ***SICC*** : **SynchronousIntegratedCircuitCard** Definition: Synchronous ICC - (Integrated Circuit Card) with contact.  \\n\\n- ***UNKW*** : **Unknown** Definition: Unknown card reading capability.  \\n\\n- ***QRCD*** : **QRCode** Definition: Quick response code.  \\n\\n- ***OPTC*** : **OpticalCode** Definition: Optical coded reading capabilities (e.g. barcode, QR code, etc.)   */
    val ntryMd: StoredValueAccount3AnyOf.NtryMd? = null,
    val ownrNm: OwnerName1? = null,
    val prvdr: Provider5? = null,
    val xpryDt: ExpiryDate2? = null
)
{
    /**
    * Type of stored value account. AccountType\\n\\n- ***BNKA*** : **BankPrepaidAccount** Definition: Prepaid account managed by a financial institution for low income customers.  \\n\\n- ***CWVC*** : **CarwashVoucher** Definition: Car wash specific account.  \\n\\n- ***CPYA*** : **CompanyPrepaidAccount** Definition: Specific prepaid account for companies or professionals expenses.  \\n\\n- ***ELMY*** : **ElectronicMoneyAccount** Definition: Account supporting e-money issued by an electronic money issuer.  \\n\\n- ***GIFT*** : **GiftCard** Definition: Payment mean issued by retailers or banks as a substitute to a non-monetary gift. Usually, this Stored Value item is used only once.  \\n\\n- ***GCER*** : **GiftCertificate** Definition: Certificate to be given to a customer. Usually one shot voucher.  \\n\\n- ***MLVC*** : **MealVoucher** Definition: Meal and check voucher for restaurants.  \\n\\n- ***OLVC*** : **OnlineVoucher** Definition: Voucher that can be used online once or in several times.  \\n\\n- ***MERC*** : **MerchantAccount** Definition: Prepaid account open with a merchant or big retailers.  \\n\\n- ***OTHR*** : **OtherPrepaidAccount** Definition: Other non listed stored value instrument.  \\n\\n- ***PHON*** : **PhoneCard** Definition: Stored value instrument used to pay telephone services (e.g. card or identifier).  \\n\\n- ***CARD*** : **SmartCardTag** Definition: Stored value account hold on the chip of a smart card.   \\n\\n- ***TRVL*** : **Travel** Definition: Travel prepaid account.  
    * Values: BNKA,CWVC,CPYA,ELMY,GIFT,GCER,MLVC,OLVC,MERC,OTHR,PHON,CARD,TRVL
    */
    enum class AcctTp(val value: kotlin.String){
        BNKA("BNKA"),
        CWVC("CWVC"),
        CPYA("CPYA"),
        ELMY("ELMY"),
        GIFT("GIFT"),
        GCER("GCER"),
        MLVC("MLVC"),
        OLVC("OLVC"),
        MERC("MERC"),
        OTHR("OTHR"),
        PHON("PHON"),
        CARD("CARD"),
        TRVL("TRVL");
    }
    /**
    * Type of identification for this Stored Value Account. IdentificationType\\n\\n- ***ACCT*** : **AccountNumber** Definition: Account identification.  \\n\\n- ***BARC*** : **BarCode** Definition: Bar-code with a specific form of identification.  \\n\\n- ***ISO2*** : **ISOTrack2** Definition: ISO Track 2 including identification.  \\n\\n- ***PHON*** : **PhoneNumber** Definition: A phone number identifies the account on which the phone card is assigned.  \\n\\n- ***CPAN*** : **PrimaryAccountNumber** Definition: Standard card identification (card number).  \\n\\n- ***PRIV*** : **PrivativeNumbering** Definition: An identification set by a privative application.  \\n\\n- ***UUID*** : **UniversalUniqueIdentification** Definition: A Universal Unique Identification code is set for identification.  
    * Values: ACCT,BARC,ISO2,PHON,CPAN,PRIV,UUID
    */
    enum class IdTp(val value: kotlin.String){
        ACCT("ACCT"),
        BARC("BARC"),
        ISO2("ISO2"),
        PHON("PHON"),
        CPAN("CPAN"),
        PRIV("PRIV"),
        UUID("UUID");
    }
    /**
    * Standard or last entry mode to access the Stored Value account or card. EntryMode\\n\\n- ***TAGC*** : **Tag** Definition: Tag reading capabilities (RFID, etc.).  \\n\\n- ***PHYS*** : **Physical** Definition: Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.  \\n\\n- ***BRCD*** : **BarCode** Definition: Bar code.  \\n\\n- ***MGST*** : **MagneticStripe** Definition: Magnetic stripe.  \\n\\n- ***CICC*** : **ICC** Definition: ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.  \\n\\n- ***DFLE*** : **AccountData** Definition: Account data on file.  \\n\\n- ***CTLS*** : **ProximityReader** Definition: Contactless proximity reader.  \\n\\n- ***ECTL*** : **EMVProximityReader** Definition: Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).  \\n\\n- ***CDFL*** : **CardOnFile** Definition: Card information are stored on a file.  \\n\\n- ***SICC*** : **SynchronousIntegratedCircuitCard** Definition: Synchronous ICC - (Integrated Circuit Card) with contact.  \\n\\n- ***UNKW*** : **Unknown** Definition: Unknown card reading capability.  \\n\\n- ***QRCD*** : **QRCode** Definition: Quick response code.  \\n\\n- ***OPTC*** : **OpticalCode** Definition: Optical coded reading capabilities (e.g. barcode, QR code, etc.)  
    * Values: TAGC,PHYS,BRCD,MGST,CICC,DFLE,CTLS,ECTL,CDFL,SICC,UNKW,QRCD,OPTC
    */
    enum class NtryMd(val value: kotlin.String){
        TAGC("TAGC"),
        PHYS("PHYS"),
        BRCD("BRCD"),
        MGST("MGST"),
        CICC("CICC"),
        DFLE("DFLE"),
        CTLS("CTLS"),
        ECTL("ECTL"),
        CDFL("CDFL"),
        SICC("SICC"),
        UNKW("UNKW"),
        QRCD("QRCD"),
        OPTC("OPTC");
    }
}

