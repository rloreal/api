/**
* nexo retailer API
* API defining resources for interactions between POI and POS, using underlying nexo messages # Summary The **nexo retailer** *Protocol Version 8* offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to exchange data securely, between a Point Of sale System (POS) and Point Of Interaction (POI) System. The nexo retailer protocol reduces sale to payment terminal communication complexity and costs,  addresses the problem of multiple private standards, aligned with the goals of nexo association, enables point of sale system providers to use a single interface with multiple payment systems,  for multiple payment instruments, and payment methods,  with a clear delimitation between with the retail world and the payment world.  The possible approaches are:   * Multiple POS to Multiple POI    * One to One POS to POI   * App 2 App when POS and POI are embedded in a single device    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a nexo compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the nexo retailer message usage guide if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Message Usage Guide of the nexo retailer protocol.**    It is not a replacement in any sense.   The main specification is always the nexo Message Usage Guide, with ISO20022 definitions of the protocol (MDR Part 1 and 2).   It is highly recommended to read through the standards documentations in conjunction with this API definition.    Namely regarding :     * The rules regarding dialogue initiation, termination and combination      * The rules and constraints applied to data fields, depending on the use case     * The error management on Sale system and POI system sides     * The security that can be applied to the protocol * **This API definition contains the messages for all different approaches defined in the Message Usage Guide.**  * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.1.md]        \"If in is \"header\"and the name field is \"Accept\", \"Content-Type\"or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\"will not be defined in this file at any place.      The elements \"Content-Type\"and \"Authorization\"are implicitly defined by the OpenApi tags \"content\"and \"security\".     * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a nexo complient API in addition to the elements defined in this file. 
*
* The version of the OpenAPI document: 2025-01
* Contact: romain.loreal@lorealconsulting.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.lorealconsulting.nexoretail.kotlin

import io.ktor.resources.*
import kotlinx.serialization.*
import com.lorealconsulting.nexoretail.kotlin.models.*

object Paths {
    /**
     * administrative action on a POI
     * used by a POS to trigger some administrative action on a POI
     * @param reconciliationRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/admin") class admin()

    /**
     * ask a report of a POI
     * used by a POS to get reports (transactions, totals) of a POI
     * @param reconciliationRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/report") class report()

    /**
     * session management on a POI such as login, logout, diagnosis
     * used by a POS to login on a POI
     * @param reconciliationRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/session") class session()

    /**
     * act on a device POI, POS or their attached devices such as printer, screen, card reader, input (secured)
     * The SaleToPOIReconciliationRequest message is sent by a sale system to request for reconciliation between sale and POI systems.
     * @param reconciliationRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/device") class deviceService()

    /**
     * creates a service dialogue between a POI and a POS or enables a service
     * request a service, such as payment, to be executed on the specified POI.
Response can be immediate (HTTP 201) or postponed (HTTP 202) in which case Response will be delivered through a GET request

     * @param createFinancialServiceRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/financial") class createFinancialService()

    /**
     * initiate a reconcialiation with the specified POI
     * The SaleToPOIReconciliationRequest message is sent by a sale system to request for reconciliation between sale and POI systems.
     * @param reconciliationRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/reconciliation") class reconciliation()

    /**
     * provides the result of a service previously requested
     * request a service, such as payment, to be done on the specified POI.
Response can be immediate (HTTP 201) or postponed (HTTP 202) in which case Response will be delivered through a GET request

     * @param exchangeId exchangeId is the identifier of the resource representing a service dialog that has been initiated by a POST /service message. This operation allows to have the result of a service that has been processed asynchronously.  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/financial/{exchangeId}") class serviceInformation(val exchangeId: kotlin.String)

    /**
     * creates a service dialogue between a POI and a POS or enables a service
     * request a service, such as payment, to be executed on the specified POI.
Response can be immediate (HTTP 201) or postponed (HTTP 202) in which case Response will be delivered through a GET request

     * @param balanceRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/balance") class balance()

    /**
     * creates a service dialogue between a POI and a POS or enables a service
     * request a service, such as payment, to be executed on the specified POI.
Response can be immediate (HTTP 201) or postponed (HTTP 202) in which case Response will be delivered through a GET request

     * @param balanceRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/batch") class batch()

    /**
     * creates a service dialogue between a POI and a POS or enables a service
     * request a service, such as payment, to be executed on the specified POI.
Response can be immediate (HTTP 201) or postponed (HTTP 202) in which case Response will be delivered through a GET request

     * @param balanceRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/cardAcquisition") class cardacquisition()

    /**
     * enables a service on the POI
     * request a service, such as payment, to be executed on the specified POI.
Response can be immediate (HTTP 201) or postponed (HTTP 202) in which case Response will be delivered through a GET request

     * @param balanceRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/enable") class enableService()

    /**
     * creates a service dialogue between a POI and a POS or enables a service
     * request a service, such as payment, to be executed on the specified POI.
Response can be immediate (HTTP 201) or postponed (HTTP 202) in which case Response will be delivered through a GET request

     * @param balanceRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/loyalty") class loyalty()

    /**
     * creates a service dialogue between a POI and a POS or enables a service
     * request a service, such as payment, to be executed on the specified POI.
Response can be immediate (HTTP 201) or postponed (HTTP 202) in which case Response will be delivered through a GET request

     * @param paymentRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/retailPayment") class payment()

    /**
     * provides the result of a service previously requested
     * request a service, such as payment, to be done on the specified POI.
Response can be immediate (HTTP 201) or postponed (HTTP 202) in which case Response will be delivered through a GET request

     * @param exchangeId exchangeId is the identifier of the resource representing a service dialog that has been initiated by a POST /service message. This operation allows to have the result of a service that has been processed asynchronously.  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/retailPayment/{exchangeId}") class paymentInformation(val exchangeId: kotlin.String)

    /**
     * creates a service dialogue between a POI and a POS or enables a service
     * request a service, such as payment, to be executed on the specified POI.
Response can be immediate (HTTP 201) or postponed (HTTP 202) in which case Response will be delivered through a GET request

     * @param balanceRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/reversal") class reversal()

    /**
     * creates a service dialogue between a POI and a POS or enables a service
     * request a service, such as payment, to be executed on the specified POI.
Response can be immediate (HTTP 201) or postponed (HTTP 202) in which case Response will be delivered through a GET request

     * @param balanceRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/storedValue") class storedvalue()

    /**
     * abort an action on a POI
     * used by a POS to abort an ongoing action on a POI
     * @param exchangeId exchangeId is the identifier of the resource representing a service dialog that has been initiated by a POST /service message. This operation allows to have the result of a service that has been processed asynchronously.  
     * @param reconciliationRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/abort/{exchangeId}") class abort(val exchangeId: kotlin.String)

    /**
     * event notification from a POI the a POS of an event
     * used by a POI to notify POS of some events, such as parameters updated or lese upto implementors needs
     * @param reconciliationRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/eventNotification") class eventNotification()

    /**
     * message rejection by a POS
     * used by a POS to reject a POI message
     * @param exchangeId this exchange Identification is the Unique identification of the rejected message. It is the original message exchangeId.  
     * @param reconciliationRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/reject/{exchangeId}") class reject(val exchangeId: kotlin.String)

    /**
     * message status
     * used by a POS to know the status of message sent to POI
     * @param exchangeId this exchange Identification is the Unique identification of the rejected message. It is the original message exchangeId.  
     * @param reconciliationRequest  
     * @param xRequestID  (optional)
     * @param traceparent  (optional)
     * @param tracestate  (optional)
     * @param origin  (optional)
     */
    @Resource("/status/{exchangeId}") class status(val exchangeId: kotlin.String)

}
