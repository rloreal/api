/**
* nexo retailer API
* API defining resources for interactions between POI and POS, using underlying nexo messages # Summary The **nexo retailer** *Protocol Version 8* offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to exchange data securely, between a Point Of sale System (POS) and Point Of Interaction (POI) System. The nexo retailer protocol reduces sale to payment terminal communication complexity and costs,  addresses the problem of multiple private standards, aligned with the goals of nexo association, enables point of sale system providers to use a single interface with multiple payment systems,  for multiple payment instruments, and payment methods,  with a clear delimitation between with the retail world and the payment world.  The possible approaches are:   * Multiple POS to Multiple POI    * One to One POS to POI   * App 2 App when POS and POI are embedded in a single device    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a nexo compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the nexo retailer message usage guide if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Message Usage Guide of the nexo retailer protocol.**    It is not a replacement in any sense.   The main specification is always the nexo Message Usage Guide, with ISO20022 definitions of the protocol (MDR Part 1 and 2).   It is highly recommended to read through the standards documentations in conjunction with this API definition.    Namely regarding :     * The rules regarding dialogue initiation, termination and combination      * The rules and constraints applied to data fields, depending on the use case     * The error management on Sale system and POI system sides     * The security that can be applied to the protocol * **This API definition contains the messages for all different approaches defined in the Message Usage Guide.**  * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.1.md]        \"If in is \"header\"and the name field is \"Accept\", \"Content-Type\"or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\"will not be defined in this file at any place.      The elements \"Content-Type\"and \"Authorization\"are implicitly defined by the OpenApi tags \"content\"and \"security\".     * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a nexo complient API in addition to the elements defined in this file. 
*
* The version of the OpenAPI document: 2025-01
* Contact: romain.loreal@lorealconsulting.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.lorealconsulting.nexoretail.kotlin.models

import com.lorealconsulting.nexoretail.kotlin.models.AdditionalResult

import kotlinx.serialization.Serializable
/**
 * Result of performed verifications for the transaction. TransactionVerificationResult
 * @param mtd Method of verification that has been performed. Method\\n\\n- ***NPIN*** : **OnLinePIN** Definition: On-line PIN authentication (Personal Identification Number).  \\n\\n- ***PPSG*** : **PaperSignature** Definition: Handwritten paper signature.  \\n\\n- ***PSWD*** : **Password** Definition: Authentication by a password.  \\n\\n- ***SCRT*** : **SecureCertificate** Definition: Electronic commerce transaction secured with the X.509 certificate of a customer.  \\n\\n- ***SCNL*** : **SecuredChannel** Definition: Channel-encrypted transaction.  \\n\\n- ***SNCT*** : **SecureNoCertificate** Definition: Secure electronic transaction without cardholder certificate.  \\n\\n- ***CPSG*** : **SignatureCapture** Definition: Electronic signature capture (handwritten signature).  \\n\\n- ***ADDB*** : **BillingAddressVerification** Definition: Cardholder billing address verification.  \\n\\n- ***BIOM*** : **Biometry** Definition: Biometric authentication of the cardholder.  \\n\\n- ***CDHI*** : **CardholderIdentificationData** Definition: Cardholder data provided for verification, for instance social security number, driver license number, passport number.  \\n\\n- ***CRYP*** : **CryptogramVerification** Definition: Verification of a cryptogram generated by a chip card or another device, for instance ARQC (Authorisation Request Cryptogram).  \\n\\n- ***CSCV*** : **CSCVerification** Definition: Verification of Card Security Code.  \\n\\n- ***PSVE*** : **PassiveAuthentication** Definition: Authentication based on statistical cardholder behaviour.  \\n\\n- ***CSEC*** : **SecureElectronicCommerce** Definition: Authentication performed during a secure electronic commerce transaction.  \\n\\n- ***ADDS*** : **ShippingAddressVerification** Definition: Cardholder shipping address verification.  \\n\\n- ***MANU*** : **ManualVerification** Definition: Manual verification, for example passport or drivers license.  \\n\\n- ***FPIN*** : **OfflinePIN** Definition: Off-line PIN authentication (Personal Identification Number).  \\n\\n- ***TOKP*** : **PaymentToken** Definition: Verification or authentication related to the use of a payment token, for instance the validation of the authorised use of a token.  
 * @param atId 
 * @param addtlRslt 
 * @param rslt Result of the verification. Result\\n\\n- ***FAIL*** : **Failed** Definition: Verification failed.  \\n\\n- ***MISS*** : **Missing** Definition: Information required to perform the verification was missing.  \\n\\n- ***NOVF*** : **NotPerformed** Definition: Verification has not been performed.  \\n\\n- ***PART*** : **PartialMatch** Definition: Verification was partially successful.  \\n\\n- ***SUCC*** : **Successful** Definition: Verification was successful.  \\n\\n- ***ERRR*** : **TechnicalError** Definition: Device or entity to perform the verification was unavailable.  
 * @param vrfctnNtty Entity or device that has performed the verification. VerificationEntity\\n\\n- ***ICCD*** : **ICC** Definition: Application in the chip card (Integrated Circuit Card), for instance an offline PIN verification.  \\n\\n- ***AGNT*** : **AuthorisedAgent** Definition: Authorisation agent of the issuer.  \\n\\n- ***MERC*** : **Merchant** Definition: Merchant (for example signature verification by the attendant).  \\n\\n- ***ACQR*** : **Acquirer** Definition: Acquirer of the transaction.  \\n\\n- ***ISSR*** : **Issuer** Definition: Card issuer.  \\n\\n- ***TRML*** : **Terminal** Definition: Secure application in the terminal.  
 */
@Serializable
data class TransactionVerificationResultAnyOf(
    /* Method of verification that has been performed. Method\\n\\n- ***NPIN*** : **OnLinePIN** Definition: On-line PIN authentication (Personal Identification Number).  \\n\\n- ***PPSG*** : **PaperSignature** Definition: Handwritten paper signature.  \\n\\n- ***PSWD*** : **Password** Definition: Authentication by a password.  \\n\\n- ***SCRT*** : **SecureCertificate** Definition: Electronic commerce transaction secured with the X.509 certificate of a customer.  \\n\\n- ***SCNL*** : **SecuredChannel** Definition: Channel-encrypted transaction.  \\n\\n- ***SNCT*** : **SecureNoCertificate** Definition: Secure electronic transaction without cardholder certificate.  \\n\\n- ***CPSG*** : **SignatureCapture** Definition: Electronic signature capture (handwritten signature).  \\n\\n- ***ADDB*** : **BillingAddressVerification** Definition: Cardholder billing address verification.  \\n\\n- ***BIOM*** : **Biometry** Definition: Biometric authentication of the cardholder.  \\n\\n- ***CDHI*** : **CardholderIdentificationData** Definition: Cardholder data provided for verification, for instance social security number, driver license number, passport number.  \\n\\n- ***CRYP*** : **CryptogramVerification** Definition: Verification of a cryptogram generated by a chip card or another device, for instance ARQC (Authorisation Request Cryptogram).  \\n\\n- ***CSCV*** : **CSCVerification** Definition: Verification of Card Security Code.  \\n\\n- ***PSVE*** : **PassiveAuthentication** Definition: Authentication based on statistical cardholder behaviour.  \\n\\n- ***CSEC*** : **SecureElectronicCommerce** Definition: Authentication performed during a secure electronic commerce transaction.  \\n\\n- ***ADDS*** : **ShippingAddressVerification** Definition: Cardholder shipping address verification.  \\n\\n- ***MANU*** : **ManualVerification** Definition: Manual verification, for example passport or drivers license.  \\n\\n- ***FPIN*** : **OfflinePIN** Definition: Off-line PIN authentication (Personal Identification Number).  \\n\\n- ***TOKP*** : **PaymentToken** Definition: Verification or authentication related to the use of a payment token, for instance the validation of the authorised use of a token.   */
    val mtd: TransactionVerificationResultAnyOf.Mtd,
    /*  */
    val atId: kotlin.String? = null,
    val addtlRslt: AdditionalResult? = null,
    /* Result of the verification. Result\\n\\n- ***FAIL*** : **Failed** Definition: Verification failed.  \\n\\n- ***MISS*** : **Missing** Definition: Information required to perform the verification was missing.  \\n\\n- ***NOVF*** : **NotPerformed** Definition: Verification has not been performed.  \\n\\n- ***PART*** : **PartialMatch** Definition: Verification was partially successful.  \\n\\n- ***SUCC*** : **Successful** Definition: Verification was successful.  \\n\\n- ***ERRR*** : **TechnicalError** Definition: Device or entity to perform the verification was unavailable.   */
    val rslt: TransactionVerificationResultAnyOf.Rslt? = null,
    /* Entity or device that has performed the verification. VerificationEntity\\n\\n- ***ICCD*** : **ICC** Definition: Application in the chip card (Integrated Circuit Card), for instance an offline PIN verification.  \\n\\n- ***AGNT*** : **AuthorisedAgent** Definition: Authorisation agent of the issuer.  \\n\\n- ***MERC*** : **Merchant** Definition: Merchant (for example signature verification by the attendant).  \\n\\n- ***ACQR*** : **Acquirer** Definition: Acquirer of the transaction.  \\n\\n- ***ISSR*** : **Issuer** Definition: Card issuer.  \\n\\n- ***TRML*** : **Terminal** Definition: Secure application in the terminal.   */
    val vrfctnNtty: TransactionVerificationResultAnyOf.VrfctnNtty? = null
)
{
    /**
    * Method of verification that has been performed. Method\\n\\n- ***NPIN*** : **OnLinePIN** Definition: On-line PIN authentication (Personal Identification Number).  \\n\\n- ***PPSG*** : **PaperSignature** Definition: Handwritten paper signature.  \\n\\n- ***PSWD*** : **Password** Definition: Authentication by a password.  \\n\\n- ***SCRT*** : **SecureCertificate** Definition: Electronic commerce transaction secured with the X.509 certificate of a customer.  \\n\\n- ***SCNL*** : **SecuredChannel** Definition: Channel-encrypted transaction.  \\n\\n- ***SNCT*** : **SecureNoCertificate** Definition: Secure electronic transaction without cardholder certificate.  \\n\\n- ***CPSG*** : **SignatureCapture** Definition: Electronic signature capture (handwritten signature).  \\n\\n- ***ADDB*** : **BillingAddressVerification** Definition: Cardholder billing address verification.  \\n\\n- ***BIOM*** : **Biometry** Definition: Biometric authentication of the cardholder.  \\n\\n- ***CDHI*** : **CardholderIdentificationData** Definition: Cardholder data provided for verification, for instance social security number, driver license number, passport number.  \\n\\n- ***CRYP*** : **CryptogramVerification** Definition: Verification of a cryptogram generated by a chip card or another device, for instance ARQC (Authorisation Request Cryptogram).  \\n\\n- ***CSCV*** : **CSCVerification** Definition: Verification of Card Security Code.  \\n\\n- ***PSVE*** : **PassiveAuthentication** Definition: Authentication based on statistical cardholder behaviour.  \\n\\n- ***CSEC*** : **SecureElectronicCommerce** Definition: Authentication performed during a secure electronic commerce transaction.  \\n\\n- ***ADDS*** : **ShippingAddressVerification** Definition: Cardholder shipping address verification.  \\n\\n- ***MANU*** : **ManualVerification** Definition: Manual verification, for example passport or drivers license.  \\n\\n- ***FPIN*** : **OfflinePIN** Definition: Off-line PIN authentication (Personal Identification Number).  \\n\\n- ***TOKP*** : **PaymentToken** Definition: Verification or authentication related to the use of a payment token, for instance the validation of the authorised use of a token.  
    * Values: NPIN,PPSG,PSWD,SCRT,SCNL,SNCT,CPSG,ADDB,BIOM,CDHI,CRYP,CSCV,PSVE,CSEC,ADDS,MANU,FPIN,TOKP
    */
    enum class Mtd(val value: kotlin.String){
        NPIN("NPIN"),
        PPSG("PPSG"),
        PSWD("PSWD"),
        SCRT("SCRT"),
        SCNL("SCNL"),
        SNCT("SNCT"),
        CPSG("CPSG"),
        ADDB("ADDB"),
        BIOM("BIOM"),
        CDHI("CDHI"),
        CRYP("CRYP"),
        CSCV("CSCV"),
        PSVE("PSVE"),
        CSEC("CSEC"),
        ADDS("ADDS"),
        MANU("MANU"),
        FPIN("FPIN"),
        TOKP("TOKP");
    }
    /**
    * Result of the verification. Result\\n\\n- ***FAIL*** : **Failed** Definition: Verification failed.  \\n\\n- ***MISS*** : **Missing** Definition: Information required to perform the verification was missing.  \\n\\n- ***NOVF*** : **NotPerformed** Definition: Verification has not been performed.  \\n\\n- ***PART*** : **PartialMatch** Definition: Verification was partially successful.  \\n\\n- ***SUCC*** : **Successful** Definition: Verification was successful.  \\n\\n- ***ERRR*** : **TechnicalError** Definition: Device or entity to perform the verification was unavailable.  
    * Values: FAIL,MISS,NOVF,PART,SUCC,ERRR
    */
    enum class Rslt(val value: kotlin.String){
        FAIL("FAIL"),
        MISS("MISS"),
        NOVF("NOVF"),
        PART("PART"),
        SUCC("SUCC"),
        ERRR("ERRR");
    }
    /**
    * Entity or device that has performed the verification. VerificationEntity\\n\\n- ***ICCD*** : **ICC** Definition: Application in the chip card (Integrated Circuit Card), for instance an offline PIN verification.  \\n\\n- ***AGNT*** : **AuthorisedAgent** Definition: Authorisation agent of the issuer.  \\n\\n- ***MERC*** : **Merchant** Definition: Merchant (for example signature verification by the attendant).  \\n\\n- ***ACQR*** : **Acquirer** Definition: Acquirer of the transaction.  \\n\\n- ***ISSR*** : **Issuer** Definition: Card issuer.  \\n\\n- ***TRML*** : **Terminal** Definition: Secure application in the terminal.  
    * Values: ICCD,AGNT,MERC,ACQR,ISSR,TRML
    */
    enum class VrfctnNtty(val value: kotlin.String){
        ICCD("ICCD"),
        AGNT("AGNT"),
        MERC("MERC"),
        ACQR("ACQR"),
        ISSR("ISSR"),
        TRML("TRML");
    }
}

