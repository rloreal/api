/**
* nexo retailer API
* API defining resources for interactions between POI and POS, using underlying nexo messages # Summary The **nexo retailer** *Protocol Version 8* offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to exchange data securely, between a Point Of sale System (POS) and Point Of Interaction (POI) System. The nexo retailer protocol reduces sale to payment terminal communication complexity and costs,  addresses the problem of multiple private standards, aligned with the goals of nexo association, enables point of sale system providers to use a single interface with multiple payment systems,  for multiple payment instruments, and payment methods,  with a clear delimitation between with the retail world and the payment world.  The possible approaches are:   * Multiple POS to Multiple POI    * One to One POS to POI   * App 2 App when POS and POI are embedded in a single device    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a nexo compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the nexo retailer message usage guide if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Message Usage Guide of the nexo retailer protocol.**    It is not a replacement in any sense.   The main specification is always the nexo Message Usage Guide, with ISO20022 definitions of the protocol (MDR Part 1 and 2).   It is highly recommended to read through the standards documentations in conjunction with this API definition.    Namely regarding :     * The rules regarding dialogue initiation, termination and combination      * The rules and constraints applied to data fields, depending on the use case     * The error management on Sale system and POI system sides     * The security that can be applied to the protocol * **This API definition contains the messages for all different approaches defined in the Message Usage Guide.**  * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.1.md]        \"If in is \"header\"and the name field is \"Accept\", \"Content-Type\"or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\"will not be defined in this file at any place.      The elements \"Content-Type\"and \"Authorization\"are implicitly defined by the OpenApi tags \"content\"and \"security\".     * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a nexo complient API in addition to the elements defined in this file. 
*
* The version of the OpenAPI document: 2025-01
* Contact: romain.loreal@lorealconsulting.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.lorealconsulting.nexoretail.kotlin.models

import com.lorealconsulting.nexoretail.kotlin.models.AdditionalResponseInformation1

import kotlinx.serialization.Serializable
/**
 * Result of the processing of the request. Response
 * @param rspn Result of the requested transaction. Response\\n\\n- ***WARN*** : **Warning** Definition: An additional Response Code, mainly a functional one, should be considered to identify the outcome of the request.  \\n\\n- ***FAIL*** : **Failure** Definition: Processing of the request fails for various reasons. Some further processing according to the type of requested service, the context of the process, and some additional precision about the failure notified in the ErrorCondition data element.  \\n\\n- ***SUCC*** : **Success** Definition: Processing OK. Information related to the result of the processing is contained in other parts of the response message.  
 * @param atId 
 * @param addtlRspnInf 
 * @param rspnRsn Detail of the response. ResponseReason\\n\\n- ***ABRT*** : **Aborted** Definition: The Initiator of the request has sent an Abort message request, which was accepted and processed.  \\n\\n- ***BUSY*** : **Busy** Definition: The system is busy, try later.  \\n\\n- ***CANC*** : **Cancel** Definition: The user has aborted the transaction on the PED keyboard, for instance during PIN entering.  \\n\\n- ***DEVO*** : **DeviceOut** Definition: Device out of order.  \\n\\n- ***WPIN*** : **WrongPIN** Definition: The user has entered the PIN on the PED keyboard and the verification fails.  \\n\\n- ***NHOS*** : **UnreachableHost** Definition: Acquirer or any host is unreachable or has not answered to an online request, so is considered as temporary unavailable. Depending on the Sale context, the request could be repeated (to be compared with \"Refusal\").  \\n\\n- ***UNVS*** : **UnavailableService** Definition: The service is not available (not implemented, not configured, protocol version too old...).  \\n\\n- ***UNVD*** : **UnavailableDevice** Definition: The hardware is not available (absent, not configured...).  \\n\\n- ***REFU*** : **Refusal** Definition: The transaction is refused by the host or by the local rules associated to the card or the POI.  \\n\\n- ***PAYR*** : **PaymentRestriction** Definition: Some sale items are not payable by the card proposed by the Customer.  \\n\\n- ***TNFD*** : **NotFound** Definition: The transaction is not found (e.g. for a reversal or a repeat).  \\n\\n- ***NALW*** : **NotAllowed** Definition: A service request is sent during a Service dialogue. A combination of services not possible to provide. During the DeviceInitialisationCardReader message processing, the user has entered a card which has to be protected by the POI, and cannot be processed with this device request from the external, and then the Sale System.  \\n\\n- ***LOUT*** : **LoggedOut** Definition: Not logged in.  \\n\\n- ***IVCA*** : **InvalidCard** Definition: The card entered by the Customer cannot be processed by the POI because this card is not configured in the system.  \\n\\n- ***ICAR*** : **InsertedCard** Definition: If the Input Device request a NotifyCardInputFlag and the Customer enters a card in the card reader without answers to the Input command, the POI abort the Input command processing, and answer a dedicated ErrorCondition value in the Input response message.  \\n\\n- ***WIPG*** : **InProgress** Definition: The transaction is still in progress and then the command cannot be processed.  
 */
@Serializable
data class Response1(
    /* Result of the requested transaction. Response\\n\\n- ***WARN*** : **Warning** Definition: An additional Response Code, mainly a functional one, should be considered to identify the outcome of the request.  \\n\\n- ***FAIL*** : **Failure** Definition: Processing of the request fails for various reasons. Some further processing according to the type of requested service, the context of the process, and some additional precision about the failure notified in the ErrorCondition data element.  \\n\\n- ***SUCC*** : **Success** Definition: Processing OK. Information related to the result of the processing is contained in other parts of the response message.   */
    val rspn: Response1.Rspn,
    /*  */
    val atId: kotlin.String? = null,
    val addtlRspnInf: AdditionalResponseInformation1? = null,
    /* Detail of the response. ResponseReason\\n\\n- ***ABRT*** : **Aborted** Definition: The Initiator of the request has sent an Abort message request, which was accepted and processed.  \\n\\n- ***BUSY*** : **Busy** Definition: The system is busy, try later.  \\n\\n- ***CANC*** : **Cancel** Definition: The user has aborted the transaction on the PED keyboard, for instance during PIN entering.  \\n\\n- ***DEVO*** : **DeviceOut** Definition: Device out of order.  \\n\\n- ***WPIN*** : **WrongPIN** Definition: The user has entered the PIN on the PED keyboard and the verification fails.  \\n\\n- ***NHOS*** : **UnreachableHost** Definition: Acquirer or any host is unreachable or has not answered to an online request, so is considered as temporary unavailable. Depending on the Sale context, the request could be repeated (to be compared with \"Refusal\").  \\n\\n- ***UNVS*** : **UnavailableService** Definition: The service is not available (not implemented, not configured, protocol version too old...).  \\n\\n- ***UNVD*** : **UnavailableDevice** Definition: The hardware is not available (absent, not configured...).  \\n\\n- ***REFU*** : **Refusal** Definition: The transaction is refused by the host or by the local rules associated to the card or the POI.  \\n\\n- ***PAYR*** : **PaymentRestriction** Definition: Some sale items are not payable by the card proposed by the Customer.  \\n\\n- ***TNFD*** : **NotFound** Definition: The transaction is not found (e.g. for a reversal or a repeat).  \\n\\n- ***NALW*** : **NotAllowed** Definition: A service request is sent during a Service dialogue. A combination of services not possible to provide. During the DeviceInitialisationCardReader message processing, the user has entered a card which has to be protected by the POI, and cannot be processed with this device request from the external, and then the Sale System.  \\n\\n- ***LOUT*** : **LoggedOut** Definition: Not logged in.  \\n\\n- ***IVCA*** : **InvalidCard** Definition: The card entered by the Customer cannot be processed by the POI because this card is not configured in the system.  \\n\\n- ***ICAR*** : **InsertedCard** Definition: If the Input Device request a NotifyCardInputFlag and the Customer enters a card in the card reader without answers to the Input command, the POI abort the Input command processing, and answer a dedicated ErrorCondition value in the Input response message.  \\n\\n- ***WIPG*** : **InProgress** Definition: The transaction is still in progress and then the command cannot be processed.   */
    val rspnRsn: Response1.RspnRsn? = null
)
{
    /**
    * Result of the requested transaction. Response\\n\\n- ***WARN*** : **Warning** Definition: An additional Response Code, mainly a functional one, should be considered to identify the outcome of the request.  \\n\\n- ***FAIL*** : **Failure** Definition: Processing of the request fails for various reasons. Some further processing according to the type of requested service, the context of the process, and some additional precision about the failure notified in the ErrorCondition data element.  \\n\\n- ***SUCC*** : **Success** Definition: Processing OK. Information related to the result of the processing is contained in other parts of the response message.  
    * Values: WARN,FAIL,SUCC
    */
    enum class Rspn(val value: kotlin.String){
        WARN("WARN"),
        FAIL("FAIL"),
        SUCC("SUCC");
    }
    /**
    * Detail of the response. ResponseReason\\n\\n- ***ABRT*** : **Aborted** Definition: The Initiator of the request has sent an Abort message request, which was accepted and processed.  \\n\\n- ***BUSY*** : **Busy** Definition: The system is busy, try later.  \\n\\n- ***CANC*** : **Cancel** Definition: The user has aborted the transaction on the PED keyboard, for instance during PIN entering.  \\n\\n- ***DEVO*** : **DeviceOut** Definition: Device out of order.  \\n\\n- ***WPIN*** : **WrongPIN** Definition: The user has entered the PIN on the PED keyboard and the verification fails.  \\n\\n- ***NHOS*** : **UnreachableHost** Definition: Acquirer or any host is unreachable or has not answered to an online request, so is considered as temporary unavailable. Depending on the Sale context, the request could be repeated (to be compared with \"Refusal\").  \\n\\n- ***UNVS*** : **UnavailableService** Definition: The service is not available (not implemented, not configured, protocol version too old...).  \\n\\n- ***UNVD*** : **UnavailableDevice** Definition: The hardware is not available (absent, not configured...).  \\n\\n- ***REFU*** : **Refusal** Definition: The transaction is refused by the host or by the local rules associated to the card or the POI.  \\n\\n- ***PAYR*** : **PaymentRestriction** Definition: Some sale items are not payable by the card proposed by the Customer.  \\n\\n- ***TNFD*** : **NotFound** Definition: The transaction is not found (e.g. for a reversal or a repeat).  \\n\\n- ***NALW*** : **NotAllowed** Definition: A service request is sent during a Service dialogue. A combination of services not possible to provide. During the DeviceInitialisationCardReader message processing, the user has entered a card which has to be protected by the POI, and cannot be processed with this device request from the external, and then the Sale System.  \\n\\n- ***LOUT*** : **LoggedOut** Definition: Not logged in.  \\n\\n- ***IVCA*** : **InvalidCard** Definition: The card entered by the Customer cannot be processed by the POI because this card is not configured in the system.  \\n\\n- ***ICAR*** : **InsertedCard** Definition: If the Input Device request a NotifyCardInputFlag and the Customer enters a card in the card reader without answers to the Input command, the POI abort the Input command processing, and answer a dedicated ErrorCondition value in the Input response message.  \\n\\n- ***WIPG*** : **InProgress** Definition: The transaction is still in progress and then the command cannot be processed.  
    * Values: ABRT,BUSY,CANC,DEVO,WPIN,NHOS,UNVS,UNVD,REFU,PAYR,TNFD,NALW,LOUT,IVCA,ICAR,WIPG
    */
    enum class RspnRsn(val value: kotlin.String){
        ABRT("ABRT"),
        BUSY("BUSY"),
        CANC("CANC"),
        DEVO("DEVO"),
        WPIN("WPIN"),
        NHOS("NHOS"),
        UNVS("UNVS"),
        UNVD("UNVD"),
        REFU("REFU"),
        PAYR("PAYR"),
        TNFD("TNFD"),
        NALW("NALW"),
        LOUT("LOUT"),
        IVCA("IVCA"),
        ICAR("ICAR"),
        WIPG("WIPG");
    }
}

