/**
* nexo retailer API
* API defining resources for interactions between POI and POS, using underlying nexo messages # Summary The **nexo retailer** *Protocol Version 8* offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to exchange data securely, between a Point Of sale System (POS) and Point Of Interaction (POI) System. The nexo retailer protocol reduces sale to payment terminal communication complexity and costs,  addresses the problem of multiple private standards, aligned with the goals of nexo association, enables point of sale system providers to use a single interface with multiple payment systems,  for multiple payment instruments, and payment methods,  with a clear delimitation between with the retail world and the payment world.  The possible approaches are:   * Multiple POS to Multiple POI    * One to One POS to POI   * App 2 App when POS and POI are embedded in a single device    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a nexo compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the nexo retailer message usage guide if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Message Usage Guide of the nexo retailer protocol.**    It is not a replacement in any sense.   The main specification is always the nexo Message Usage Guide, with ISO20022 definitions of the protocol (MDR Part 1 and 2).   It is highly recommended to read through the standards documentations in conjunction with this API definition.    Namely regarding :     * The rules regarding dialogue initiation, termination and combination      * The rules and constraints applied to data fields, depending on the use case     * The error management on Sale system and POI system sides     * The security that can be applied to the protocol * **This API definition contains the messages for all different approaches defined in the Message Usage Guide.**  * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.1.md]        \"If in is \"header\"and the name field is \"Accept\", \"Content-Type\"or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\"will not be defined in this file at any place.      The elements \"Content-Type\"and \"Authorization\"are implicitly defined by the OpenApi tags \"content\"and \"security\".     * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a nexo complient API in addition to the elements defined in this file. 
*
* The version of the OpenAPI document: 2025-01
* Contact: romain.loreal@lorealconsulting.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.lorealconsulting.nexoretail.kotlin.models

import com.lorealconsulting.nexoretail.kotlin.models.AdditionalService
import com.lorealconsulting.nexoretail.kotlin.models.AdditionalTransactionData
import com.lorealconsulting.nexoretail.kotlin.models.AuthorisationResult
import com.lorealconsulting.nexoretail.kotlin.models.CardProgrammeApplied
import com.lorealconsulting.nexoretail.kotlin.models.CardProgrammeProposed
import com.lorealconsulting.nexoretail.kotlin.models.CustomerOrder1
import com.lorealconsulting.nexoretail.kotlin.models.CustomerToken
import com.lorealconsulting.nexoretail.kotlin.models.IssuerCITIdentification
import com.lorealconsulting.nexoretail.kotlin.models.IssuerReferenceData
import com.lorealconsulting.nexoretail.kotlin.models.MerchantCITIdentification
import com.lorealconsulting.nexoretail.kotlin.models.MerchantCategoryCode
import com.lorealconsulting.nexoretail.kotlin.models.MerchantReferenceData
import com.lorealconsulting.nexoretail.kotlin.models.OriginalTransaction
import com.lorealconsulting.nexoretail.kotlin.models.ReconciliationIdentification
import com.lorealconsulting.nexoretail.kotlin.models.SaleReferenceIdentification1
import com.lorealconsulting.nexoretail.kotlin.models.SaleToAcquirerData
import com.lorealconsulting.nexoretail.kotlin.models.SaleToIssuerData
import com.lorealconsulting.nexoretail.kotlin.models.SaleToPOIData
import com.lorealconsulting.nexoretail.kotlin.models.TransactionDetails
import com.lorealconsulting.nexoretail.kotlin.models.TransactionIdentification1

import kotlinx.serialization.Serializable
/**
 * Data of a previous POI payment transaction. OriginalPOITransaction
 * @param txDtls 
 * @param txId 
 * @param txTp Type of transaction being undertaken for the main service. TransactionType\\n\\n- ***BALC*** : **Balance** Definition: Balance enquiry.  \\n\\n- ***CACT*** : **CardActivation** Definition: Card activation.  \\n\\n- ***CRDP*** : **CardPayment** Definition: Card payment.  \\n\\n- ***CAFH*** : **CardsFundTransferPush** Definition: Transfer of funds to a card or an account.  \\n\\n- ***CAVR*** : **CardVerification** Definition: Card verification.  \\n\\n- ***CSHW*** : **CashAdvance** Definition: Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter.  \\n\\n- ***CSHD*** : **CashDeposit** Definition: Cash deposit.  \\n\\n- ***DEFR*** : **DeferredPayment** Definition: Deferred payment.  \\n\\n- ***LOAD*** : **Loading** Definition: Loading or reloading non-financial account.  \\n\\n- ***ORCR*** : **OriginalCredit** Definition: Original credit.  \\n\\n- ***PINC*** : **PINChange** Definition: PIN (Personal Identification Number) change.  \\n\\n- ***QUCH*** : **QuasiCash** Definition: Quasi-cash.  \\n\\n- ***RFND*** : **Refund** Definition: Refund transaction.  \\n\\n- ***RESA*** : **Reservation** Definition: Reservation (pre-authorisation).  \\n\\n- ***VALC*** : **ValidityCheck** Definition: Card validity check.  \\n\\n- ***UNLD*** : **Unloading** Definition: Unloading non-financial account.  \\n\\n- ***CAFT*** : **CardsFundTransfer** Definition: Transfer of funds to and/or from a card account.  \\n\\n- ***CAFL*** : **CardsFundTransferPull** Definition: Transfer of funds from a card or an account.  
 * @param atId 
 * @param addtlSvc 
 * @param addtlTxData 
 * @param authstnRslt 
 * @param cardPrgrmmApld 
 * @param cardPrgrmmPropsd 
 * @param cstmrCnsnt Indicates if the customer has explicitly validated a choice. CustomerConsent
 * @param cstmrOrdr 
 * @param cstmrTkn 
 * @param issrCITId 
 * @param issrRefData 
 * @param lastTxFlg Flag indicating processing of the last transaction. LastTransactionFlag
 * @param mrchntCITId 
 * @param mrchntCtgyCd 
 * @param mrchntRefData 
 * @param orgnlTx 
 * @param rcncltnId 
 * @param saleRefId 
 * @param saleToAcqrrData 
 * @param saleToIssrData 
 * @param saleToPOIData 
 * @param svcAttr Additional attribute of the service type. ServiceAttribute\\n\\n- ***IRES*** : **InitialReservation** Definition: Initial reservation.  \\n\\n- ***URES*** : **UpdateReservation** Definition: Update reservation.  \\n\\n- ***PRES*** : **PaymentReservation** Definition: Payment after reservation.  \\n\\n- ***ARES*** : **AdditionalPayment** Definition: Additional payment after reservation.  \\n\\n- ***FREC*** : **FirstRecurring** Definition: Initial recurring payment.  \\n\\n- ***RREC*** : **FollowingRecurring** Definition: Repeat recurring payment.  \\n\\n- ***GOPT*** : **GuaranteeOfPayment** Definition: Acceptor claims for guarantee of payment.  
 * @param txCaptr Flag indicating whether the transaction data must be captured or not in addition to the message process. TransactionCapture
 */
@Serializable
data class OriginalPOITransaction2(
    val txDtls: TransactionDetails,
    val txId: TransactionIdentification1,
    /* Type of transaction being undertaken for the main service. TransactionType\\n\\n- ***BALC*** : **Balance** Definition: Balance enquiry.  \\n\\n- ***CACT*** : **CardActivation** Definition: Card activation.  \\n\\n- ***CRDP*** : **CardPayment** Definition: Card payment.  \\n\\n- ***CAFH*** : **CardsFundTransferPush** Definition: Transfer of funds to a card or an account.  \\n\\n- ***CAVR*** : **CardVerification** Definition: Card verification.  \\n\\n- ***CSHW*** : **CashAdvance** Definition: Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter.  \\n\\n- ***CSHD*** : **CashDeposit** Definition: Cash deposit.  \\n\\n- ***DEFR*** : **DeferredPayment** Definition: Deferred payment.  \\n\\n- ***LOAD*** : **Loading** Definition: Loading or reloading non-financial account.  \\n\\n- ***ORCR*** : **OriginalCredit** Definition: Original credit.  \\n\\n- ***PINC*** : **PINChange** Definition: PIN (Personal Identification Number) change.  \\n\\n- ***QUCH*** : **QuasiCash** Definition: Quasi-cash.  \\n\\n- ***RFND*** : **Refund** Definition: Refund transaction.  \\n\\n- ***RESA*** : **Reservation** Definition: Reservation (pre-authorisation).  \\n\\n- ***VALC*** : **ValidityCheck** Definition: Card validity check.  \\n\\n- ***UNLD*** : **Unloading** Definition: Unloading non-financial account.  \\n\\n- ***CAFT*** : **CardsFundTransfer** Definition: Transfer of funds to and/or from a card account.  \\n\\n- ***CAFL*** : **CardsFundTransferPull** Definition: Transfer of funds from a card or an account.   */
    val txTp: OriginalPOITransaction2.TxTp,
    /*  */
    val atId: kotlin.String? = null,
    val addtlSvc: AdditionalService? = null,
    val addtlTxData: AdditionalTransactionData? = null,
    val authstnRslt: AuthorisationResult? = null,
    val cardPrgrmmApld: CardProgrammeApplied? = null,
    val cardPrgrmmPropsd: CardProgrammeProposed? = null,
    /* Indicates if the customer has explicitly validated a choice. CustomerConsent */
    val cstmrCnsnt: kotlin.Boolean? = null,
    val cstmrOrdr: CustomerOrder1? = null,
    val cstmrTkn: CustomerToken? = null,
    val issrCITId: IssuerCITIdentification? = null,
    val issrRefData: IssuerReferenceData? = null,
    /* Flag indicating processing of the last transaction. LastTransactionFlag */
    val lastTxFlg: kotlin.Boolean? = null,
    val mrchntCITId: MerchantCITIdentification? = null,
    val mrchntCtgyCd: MerchantCategoryCode? = null,
    val mrchntRefData: MerchantReferenceData? = null,
    val orgnlTx: OriginalTransaction? = null,
    val rcncltnId: ReconciliationIdentification? = null,
    val saleRefId: SaleReferenceIdentification1? = null,
    val saleToAcqrrData: SaleToAcquirerData? = null,
    val saleToIssrData: SaleToIssuerData? = null,
    val saleToPOIData: SaleToPOIData? = null,
    /* Additional attribute of the service type. ServiceAttribute\\n\\n- ***IRES*** : **InitialReservation** Definition: Initial reservation.  \\n\\n- ***URES*** : **UpdateReservation** Definition: Update reservation.  \\n\\n- ***PRES*** : **PaymentReservation** Definition: Payment after reservation.  \\n\\n- ***ARES*** : **AdditionalPayment** Definition: Additional payment after reservation.  \\n\\n- ***FREC*** : **FirstRecurring** Definition: Initial recurring payment.  \\n\\n- ***RREC*** : **FollowingRecurring** Definition: Repeat recurring payment.  \\n\\n- ***GOPT*** : **GuaranteeOfPayment** Definition: Acceptor claims for guarantee of payment.   */
    val svcAttr: OriginalPOITransaction2.SvcAttr? = null,
    /* Flag indicating whether the transaction data must be captured or not in addition to the message process. TransactionCapture */
    val txCaptr: kotlin.Boolean? = null
)
{
    /**
    * Type of transaction being undertaken for the main service. TransactionType\\n\\n- ***BALC*** : **Balance** Definition: Balance enquiry.  \\n\\n- ***CACT*** : **CardActivation** Definition: Card activation.  \\n\\n- ***CRDP*** : **CardPayment** Definition: Card payment.  \\n\\n- ***CAFH*** : **CardsFundTransferPush** Definition: Transfer of funds to a card or an account.  \\n\\n- ***CAVR*** : **CardVerification** Definition: Card verification.  \\n\\n- ***CSHW*** : **CashAdvance** Definition: Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter.  \\n\\n- ***CSHD*** : **CashDeposit** Definition: Cash deposit.  \\n\\n- ***DEFR*** : **DeferredPayment** Definition: Deferred payment.  \\n\\n- ***LOAD*** : **Loading** Definition: Loading or reloading non-financial account.  \\n\\n- ***ORCR*** : **OriginalCredit** Definition: Original credit.  \\n\\n- ***PINC*** : **PINChange** Definition: PIN (Personal Identification Number) change.  \\n\\n- ***QUCH*** : **QuasiCash** Definition: Quasi-cash.  \\n\\n- ***RFND*** : **Refund** Definition: Refund transaction.  \\n\\n- ***RESA*** : **Reservation** Definition: Reservation (pre-authorisation).  \\n\\n- ***VALC*** : **ValidityCheck** Definition: Card validity check.  \\n\\n- ***UNLD*** : **Unloading** Definition: Unloading non-financial account.  \\n\\n- ***CAFT*** : **CardsFundTransfer** Definition: Transfer of funds to and/or from a card account.  \\n\\n- ***CAFL*** : **CardsFundTransferPull** Definition: Transfer of funds from a card or an account.  
    * Values: BALC,CACT,CRDP,CAFH,CAVR,CSHW,CSHD,DEFR,LOAD,ORCR,PINC,QUCH,RFND,RESA,VALC,UNLD,CAFT,CAFL
    */
    enum class TxTp(val value: kotlin.String){
        BALC("BALC"),
        CACT("CACT"),
        CRDP("CRDP"),
        CAFH("CAFH"),
        CAVR("CAVR"),
        CSHW("CSHW"),
        CSHD("CSHD"),
        DEFR("DEFR"),
        LOAD("LOAD"),
        ORCR("ORCR"),
        PINC("PINC"),
        QUCH("QUCH"),
        RFND("RFND"),
        RESA("RESA"),
        VALC("VALC"),
        UNLD("UNLD"),
        CAFT("CAFT"),
        CAFL("CAFL");
    }
    /**
    * Additional attribute of the service type. ServiceAttribute\\n\\n- ***IRES*** : **InitialReservation** Definition: Initial reservation.  \\n\\n- ***URES*** : **UpdateReservation** Definition: Update reservation.  \\n\\n- ***PRES*** : **PaymentReservation** Definition: Payment after reservation.  \\n\\n- ***ARES*** : **AdditionalPayment** Definition: Additional payment after reservation.  \\n\\n- ***FREC*** : **FirstRecurring** Definition: Initial recurring payment.  \\n\\n- ***RREC*** : **FollowingRecurring** Definition: Repeat recurring payment.  \\n\\n- ***GOPT*** : **GuaranteeOfPayment** Definition: Acceptor claims for guarantee of payment.  
    * Values: IRES,URES,PRES,ARES,FREC,RREC,GOPT
    */
    enum class SvcAttr(val value: kotlin.String){
        IRES("IRES"),
        URES("URES"),
        PRES("PRES"),
        ARES("ARES"),
        FREC("FREC"),
        RREC("RREC"),
        GOPT("GOPT");
    }
}

