openapi: 3.1.0
info:
  title: nexo retailer API
  version: 2025-01
  description: >
    API defining resources for interactions between POI and POS, using
    underlying nexo messages

    # Summary

    The **nexo retailer** *Protocol Version 8* offers a modern, open, harmonised
    and interoperable set of

    Application Programming Interfaces (APIs) as the safest and most efficient
    way to exchange data securely,

    between a Point Of sale System (POS) and Point Of Interaction (POI) System.

    The nexo retailer protocol reduces sale to payment terminal communication
    complexity and costs, 

    addresses the problem of multiple private standards, aligned with the goals
    of nexo association,

    enables point of sale system providers to use a single interface with
    multiple payment systems, 

    for multiple payment instruments, and payment methods, 

    with a clear delimitation between with the retail world and the payment
    world.


    The possible approaches are:
      * Multiple POS to Multiple POI 
      * One to One POS to POI
      * App 2 App when POS and POI are embedded in a single device

      Not every message defined in this API definition is necessary for all approaches. 
      Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.
      Therefore for a particular implementation of a nexo compliant API it is only necessary to support 
      a certain subset of the methods defined in this API definition.

      **Please have a look at the nexo retailer message usage guide if you are not sure 
      which message has to be used for the approach you are going to use.**

    ## Some General Remarks Related to this version of the OpenAPI
    Specification:

    * **This API definition is based on the Message Usage Guide of the nexo
    retailer protocol.** 
      It is not a replacement in any sense.
      The main specification is always the nexo Message Usage Guide, with ISO20022 definitions of the protocol (MDR Part 1 and 2).
      It is highly recommended to read through the standards documentations in conjunction with this API definition. 
      Namely regarding :
        * The rules regarding dialogue initiation, termination and combination 
        * The rules and constraints applied to data fields, depending on the use case
        * The error management on Sale system and POI system sides
        * The security that can be applied to the protocol
    * **This API definition contains the messages for all different approaches
    defined in the Message Usage Guide.**


    * According to the OpenAPI-Specification
    [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.1.md]
      
        "If in is "header"and the name field is "Accept", "Content-Type"or "Authorization", the parameter definition SHALL be ignored."
      
      The element "Accept"will not be defined in this file at any place.
      
      The elements "Content-Type"and "Authorization"are implicitly defined by the OpenApi tags "content"and "security".
      

    * **We omit the definition of all standard HTTP header elements
    (mandatory/optional/conditional) 
      except they are mentioned in the Implementation Guidelines.**
      Therefore the implementer might add these in his own realisation of a nexo complient API in addition to the elements defined in this file.
  license:
    name: Creative Commons Attribution 4.0 International Public License
    url: https://creativecommons.org/licenses/by/4.0/
  contact:
    name: nexo retailer Working group
    email: romain.loreal@lorealconsulting.com
    url: https://www.nexo-standards.org
  x-logo:
    url: https://https://www.nexo-standards.org/sites/default/files/nexo.png
    altText: nexo logo
externalDocs:
  description: >
    Full Documentation of nexo retailer protocol is provided by nexo standards :

    Messages Usage Guide, Architecture, Examples nexo standards specifications
    and documentation.
  url: https://www.nexo-standards.org
servers:
  - url: https://test.poisystem.com:8099
    description: >-
      Test server for API exchanges between merchant and payment system, secured
      with X509
security:
  - {}
  - BearerAuthOAuth: []
tags:
  - name: retail financial services
    description: Simplified retail financial services such as payment
  - name: financial services
    description: financial services such as payment
  - name: admin services
    description: admin services such as login
  - name: device services
    description: device services such as display
  - name: system services
    description: system services such as abort
components:
  securitySchemes:
    BearerAuthOAuth:
      description: >
        Bearer Token. 


        Is contained only, if an OAuth2 based authentication was performed in a
        pre-step or 

        an OAuth2 based SCA was performed in a preceding AIS service in the same
        session.
      type: http
      scheme: bearer
paths:
  /financial:
    $ref: paths/financial.yaml
  /financial/{exchangeId}:
    $ref: paths/financial_{exchangeId}.yaml
  /retailPayment:
    $ref: paths/retailPayment.yaml
  /retailPayment/{exchangeId}:
    $ref: paths/retailPayment_{exchangeId}.yaml
  /reconciliation:
    $ref: paths/reconciliation.yaml
  /balance:
    $ref: paths/balance.yaml
  /loyalty:
    $ref: paths/loyalty.yaml
  /reversal:
    $ref: paths/reversal.yaml
  /storedValue:
    $ref: paths/storedValue.yaml
  /cardAcquisition:
    $ref: paths/cardAcquisition.yaml
  /batch:
    $ref: paths/batch.yaml
  /enable:
    $ref: paths/enable.yaml
  /device:
    $ref: paths/device.yaml
  /session:
    $ref: paths/session.yaml
  /admin:
    $ref: paths/admin.yaml
  /report:
    $ref: paths/report.yaml
  /abort/{exchangeId}:
    $ref: paths/abort_{exchangeId}.yaml
  /reject/{exchangeId}:
    $ref: paths/reject_{exchangeId}.yaml
  /status/{exchangeId}:
    $ref: paths/status_{exchangeId}.yaml
  /eventNotification:
    $ref: paths/eventNotification.yaml
