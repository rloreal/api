openapi: '3.1.0'
info:
  title: nexo retailer API
  version: 0.1.0
  description: |
    API defining resources for interactions between POI and POS, using underlying nexo messages

    ### Check out its awesome features:

    * simply declare POS and POI
    * send requests to POI
    * monitor activity ðŸ˜Ž
    * Receive real-time information about transaction executionsðŸ“ˆ
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

  contact:
    name: Loreal Consulting
    email: romain.loreal@lorealconsulting.com
    url: http://devlc.lorealconsulting.com

externalDocs:
  - description: "nexo standards specifications and documentation."
    url: 'https://www.nexo-standards.org'
  - description: "ISO20022 retailer message set"
    url: "https://www.iso20022.org/iso-20022-message-definitions?search=casp"

servers:
  - url : https://devlc/lorealconsulting.com:8099
    description: Test server for API link merchant and Acceptation system secured with X509

tags:
  - name: "financial"
    description: "financial services such as payment"
  - name: "admin"
    description: "admin services such as login"
  - name: "device"
    description: "device services such as display"
  - name: "system"
    description: "system services such as abort"

security:
       - certs: []

components:
  schemas:
    Document: 
      $ref: "https://devlc.lorealconsulting.com:8099/casp.001.001.06.schema.json#/$defs/SaleToPOIServiceRequestV06"


paths:
  /financialService/{financialServiceId}:
    get:
      tags: 
        - financial
      summary : creates a service request to a POI
      description: request a service, such as payment, to be done on the specified POI
      operationId: getTransaction
      parameters:
        - in: path
          name: financialServiceId
          required: true
          description: Identifier of the financialService (transactionId)
          schema:
              type: string
        - in: header
          name: Idempotency-Key
          schema:
            type: string
            format: uuid
          description: |
              The idempotency key is a free identifier created by the client to
              identify a request. It is used by the service to identify subsequent
              retries of the same request and ensure idempotent behavior by sending
              the same response without executing the request a second time.

              Clients should be careful as any subsequent requests with the same key
              may return the same response without further check. Therefore, it is
              recommended to use an UUID version 4 (random) or any other random
              string with enough entropy to avoid collisions.

              Idempotency keys expire after 24 hours. Clients are responsible to stay
              within this limits, if they require idempotent behavior.
          required: false
          example: "7da7a728-f910-11e6-942a-68f728c1ba70"
        - in: header  
          name: traceparent
          description: |
              describes the position of the incoming request in its trace graph 
              in a portable, fixed-length format. 
              Its design focuses on fast parsing. 
              Every tracing tool MUST properly set traceparent even when it only relies 
              on vendor-specific information in tracestate.
              The traceparent HTTP header field identifies the incoming request in a tracing system. It has four fields:
              - version-format: 2 bytes, "00-" in ASCII
              - trace-id: 32 bytes, a unique identifier for the trace, represented as a 16-byte array, formatted as a 32-digit hexadecimal number
              - parent-id: 16 bytes, a unique identifier for the span, represented as an 8-byte array, formatted as a 16-digit hexadecimal number
              - trace-flags: An 8-bit field that controls tracing flags such as sampling, trace level, etc
                Example Value = 00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01
                base16(version) = 00
                base16(trace-id) = 4bf92f3577b34da6a3ce929d0e0e4736
                base16(parent-id) = 00f067aa0ba902b7
                base16(trace-flags) = 01  // sampled
          schema:
            type: string
          required: false
          example: "00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01"
        - in: header
          name: tracestate
          description: |
              extends traceparent with vendor-specific data represented by a set of name/value pairs.
              Storing information in tracestate is optional.
          schema:
            type: string
          required: false
          example: "congo=t61rcWkgMzE"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "https://devlc.lorealconsulting.com:8099/casp.001.001.06.schema.json#/$defs/SaleToPOIServiceRequestV06"
      responses:
        "201":
          description: service request created
        "400":
          description: Invalid request
          $ref: "https://devlc.lorealconsulting.com:8099/Problem.yaml"
        "404":
          description: POI not found
          $ref: "https://devlc.lorealconsulting.com:8099/Problem.yaml"
        "500":
          description: Unexpected error
          $ref: "https://devlc.lorealconsulting.com:8099/Problem.yaml"

    post:
      tags: 
        - financial
      summary : creates a service request to a POI
      description: request a service, such as payment, to be done on the specified POI
      operationId: createService
      parameters:
        - in: path
          name: poiId
          required: true
          description: Identifier of the POI
          schema:
              type: string
        - in: header
          name: Idempotency-Key
          schema:
            type: string
            format: uuid
          description: |
              The idempotency key is a free identifier created by the client to
              identify a request. It is used by the service to identify subsequent
              retries of the same request and ensure idempotent behavior by sending
              the same response without executing the request a second time.

              Clients should be careful as any subsequent requests with the same key
              may return the same response without further check. Therefore, it is
              recommended to use an UUID version 4 (random) or any other random
              string with enough entropy to avoid collisions.

              Idempotency keys expire after 24 hours. Clients are responsible to stay
              within this limits, if they require idempotent behavior.
          required: false
          example: "7da7a728-f910-11e6-942a-68f728c1ba70"
        - in: header  
          name: traceparent
          description: |
              describes the position of the incoming request in its trace graph 
              in a portable, fixed-length format. 
              Its design focuses on fast parsing. 
              Every tracing tool MUST properly set traceparent even when it only relies 
              on vendor-specific information in tracestate.
              The traceparent HTTP header field identifies the incoming request in a tracing system. It has four fields:
              - version-format: 2 bytes, "00-" in ASCII
              - trace-id: 32 bytes, a unique identifier for the trace, represented as a 16-byte array, formatted as a 32-digit hexadecimal number
              - parent-id: 16 bytes, a unique identifier for the span, represented as an 8-byte array, formatted as a 16-digit hexadecimal number
              - trace-flags: An 8-bit field that controls tracing flags such as sampling, trace level, etc
                Example Value = 00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01
                base16(version) = 00
                base16(trace-id) = 4bf92f3577b34da6a3ce929d0e0e4736
                base16(parent-id) = 00f067aa0ba902b7
                base16(trace-flags) = 01  // sampled
          schema:
            type: string
          required: false
          example: "00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01"
        - in: header
          name: tracestate
          description: |
              extends traceparent with vendor-specific data represented by a set of name/value pairs.
              Storing information in tracestate is optional.
          schema:
            type: string
          required: false
          example: "congo=t61rcWkgMzE"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "https://devlc.lorealconsulting.com:8099/casp.001.001.06.schema.json#/$defs/SaleToPOIServiceRequestV06"
      responses:
        "201":
          description: service request created
        "400":
          description: Invalid request
          $ref: "https://devlc.lorealconsulting.com:8099/Problem.yaml"
        "404":
          description: POI not found
          $ref: "https://devlc.lorealconsulting.com:8099/Problem.yaml"
        "500":
          description: Unexpected error
          $ref: "https://devlc.lorealconsulting.com:8099/Problem.yaml"

#webhooks:
#  # Each webhook needs a name
#  newPet:
#    # This is a Path Item Object, the only difference is that the request is initiated by the API provider
#    post:
#      requestBody:
#        description: Information about a financialService in the system
#        content:
#          application/json:
#            schema:
#              $ref: "https://devlc.lorealconsulting.com:8099/casp.002.001.06.schema.json#/$defs/SaleToPOIServiceResponseV06"
#      responses:
#        "200":
#          description: Return a 200 status to indicate that the data was received successfully
#

