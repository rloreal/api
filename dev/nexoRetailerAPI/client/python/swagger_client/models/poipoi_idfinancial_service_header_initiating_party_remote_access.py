# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_code': 'object',
        'address': 'object',
        'client_certificate': 'object',
        'security_profile': 'object',
        'server_certificate': 'object',
        'server_certificate_identifier': 'object',
        'user_name': 'object'
    }

    attribute_map = {
        'access_code': 'AccessCode',
        'address': 'Address',
        'client_certificate': 'ClientCertificate',
        'security_profile': 'SecurityProfile',
        'server_certificate': 'ServerCertificate',
        'server_certificate_identifier': 'ServerCertificateIdentifier',
        'user_name': 'UserName'
    }

    def __init__(self, access_code=None, address=None, client_certificate=None, security_profile=None, server_certificate=None, server_certificate_identifier=None, user_name=None):  # noqa: E501
        """PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess - a model defined in Swagger"""  # noqa: E501
        self._access_code = None
        self._address = None
        self._client_certificate = None
        self._security_profile = None
        self._server_certificate = None
        self._server_certificate_identifier = None
        self._user_name = None
        self.discriminator = None
        if access_code is not None:
            self.access_code = access_code
        self.address = address
        if client_certificate is not None:
            self.client_certificate = client_certificate
        if security_profile is not None:
            self.security_profile = security_profile
        if server_certificate is not None:
            self.server_certificate = server_certificate
        if server_certificate_identifier is not None:
            self.server_certificate_identifier = server_certificate_identifier
        if user_name is not None:
            self.user_name = user_name

    @property
    def access_code(self):
        """Gets the access_code of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501

        Specifies a binary string with a maximum length of 35 binary bytes.<br/>  # noqa: E501

        :return: The access_code of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501
        :rtype: object
        """
        return self._access_code

    @access_code.setter
    def access_code(self, access_code):
        """Sets the access_code of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.

        Specifies a binary string with a maximum length of 35 binary bytes.<br/>  # noqa: E501

        :param access_code: The access_code of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501
        :type: object
        """

        self._access_code = access_code

    @property
    def address(self):
        """Gets the address of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501

        Network addresses of the host.  # noqa: E501

        :return: The address of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501
        :rtype: object
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.

        Network addresses of the host.  # noqa: E501

        :param address: The address of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501
        :type: object
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def client_certificate(self):
        """Gets the client_certificate of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501

        X.509 Certificate required to authenticate the client.  # noqa: E501

        :return: The client_certificate of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501
        :rtype: object
        """
        return self._client_certificate

    @client_certificate.setter
    def client_certificate(self, client_certificate):
        """Sets the client_certificate of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.

        X.509 Certificate required to authenticate the client.  # noqa: E501

        :param client_certificate: The client_certificate of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501
        :type: object
        """

        self._client_certificate = client_certificate

    @property
    def security_profile(self):
        """Gets the security_profile of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The security_profile of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501
        :rtype: object
        """
        return self._security_profile

    @security_profile.setter
    def security_profile(self, security_profile):
        """Sets the security_profile of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param security_profile: The security_profile of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501
        :type: object
        """

        self._security_profile = security_profile

    @property
    def server_certificate(self):
        """Gets the server_certificate of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501

        X.509 Certificate required to authenticate the server.  # noqa: E501

        :return: The server_certificate of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501
        :rtype: object
        """
        return self._server_certificate

    @server_certificate.setter
    def server_certificate(self, server_certificate):
        """Sets the server_certificate of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.

        X.509 Certificate required to authenticate the server.  # noqa: E501

        :param server_certificate: The server_certificate of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501
        :type: object
        """

        self._server_certificate = server_certificate

    @property
    def server_certificate_identifier(self):
        """Gets the server_certificate_identifier of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501

        Identification of the X.509 Certificates required to authenticate the server, for instance a digest of the certificate.  # noqa: E501

        :return: The server_certificate_identifier of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501
        :rtype: object
        """
        return self._server_certificate_identifier

    @server_certificate_identifier.setter
    def server_certificate_identifier(self, server_certificate_identifier):
        """Sets the server_certificate_identifier of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.

        Identification of the X.509 Certificates required to authenticate the server, for instance a digest of the certificate.  # noqa: E501

        :param server_certificate_identifier: The server_certificate_identifier of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501
        :type: object
        """

        self._server_certificate_identifier = server_certificate_identifier

    @property
    def user_name(self):
        """Gets the user_name of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The user_name of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501
        :rtype: object
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param user_name: The user_name of this PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess.  # noqa: E501
        :type: object
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceHeaderInitiatingPartyRemoteAccess):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
