# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SaleToPOIServiceResponseV06ServiceResponseResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_response_information': 'object',
        'response': 'object',
        'response_reason': 'object'
    }

    attribute_map = {
        'additional_response_information': 'AdditionalResponseInformation',
        'response': 'Response',
        'response_reason': 'ResponseReason'
    }

    def __init__(self, additional_response_information=None, response=None, response_reason=None):  # noqa: E501
        """SaleToPOIServiceResponseV06ServiceResponseResponse - a model defined in Swagger"""  # noqa: E501
        self._additional_response_information = None
        self._response = None
        self._response_reason = None
        self.discriminator = None
        if additional_response_information is not None:
            self.additional_response_information = additional_response_information
        self.response = response
        if response_reason is not None:
            self.response_reason = response_reason

    @property
    def additional_response_information(self):
        """Gets the additional_response_information of this SaleToPOIServiceResponseV06ServiceResponseResponse.  # noqa: E501

        Specifies a character string with a maximum length of 140 characters.<br/>  # noqa: E501

        :return: The additional_response_information of this SaleToPOIServiceResponseV06ServiceResponseResponse.  # noqa: E501
        :rtype: object
        """
        return self._additional_response_information

    @additional_response_information.setter
    def additional_response_information(self, additional_response_information):
        """Sets the additional_response_information of this SaleToPOIServiceResponseV06ServiceResponseResponse.

        Specifies a character string with a maximum length of 140 characters.<br/>  # noqa: E501

        :param additional_response_information: The additional_response_information of this SaleToPOIServiceResponseV06ServiceResponseResponse.  # noqa: E501
        :type: object
        """

        self._additional_response_information = additional_response_information

    @property
    def response(self):
        """Gets the response of this SaleToPOIServiceResponseV06ServiceResponseResponse.  # noqa: E501

        Result of the processing of the message<br/>- **WARN: Warning**  : *An additional Response Code, mainly a functional one, should be considered to identify the outcome of the request.*<br/>- **FAIL: Failure**  : *Processing of the request fails for various reasons. Some further processing according to the type of requested service, the context of the process, and some additional precision about the failure notified in the ErrorCondition data element.*<br/>- **SUCC: Success**  : *Processing OK. Information related to the result of the processing is contained in other parts of the response message.*<br/>  # noqa: E501

        :return: The response of this SaleToPOIServiceResponseV06ServiceResponseResponse.  # noqa: E501
        :rtype: object
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this SaleToPOIServiceResponseV06ServiceResponseResponse.

        Result of the processing of the message<br/>- **WARN: Warning**  : *An additional Response Code, mainly a functional one, should be considered to identify the outcome of the request.*<br/>- **FAIL: Failure**  : *Processing of the request fails for various reasons. Some further processing according to the type of requested service, the context of the process, and some additional precision about the failure notified in the ErrorCondition data element.*<br/>- **SUCC: Success**  : *Processing OK. Information related to the result of the processing is contained in other parts of the response message.*<br/>  # noqa: E501

        :param response: The response of this SaleToPOIServiceResponseV06ServiceResponseResponse.  # noqa: E501
        :type: object
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")  # noqa: E501

        self._response = response

    @property
    def response_reason(self):
        """Gets the response_reason of this SaleToPOIServiceResponseV06ServiceResponseResponse.  # noqa: E501

        Result of the processing of the message<br/>- **ABRT: Aborted**  : *The Initiator of the request has sent an Abort message request, which was accepted and processed.*<br/>- **BUSY: Busy**  : *The system is busy, try later.*<br/>- **CANC: Cancel**  : *The user has aborted the transaction on the PED keyboard, for instance during PIN entering.*<br/>- **DEVO: DeviceOut**  : *Device out of order.*<br/>- **WPIN: WrongPIN**  : *The user has entered the PIN on the PED keyboard and the verification fails.*<br/>- **NHOS: UnreachableHost**  : *Acquirer or any host is unreachable or has not answered to an online request, so is considered as temporary unavailable. Depending on the Sale context, the request could be repeated (to be compared with \"Refusal\").*<br/>- **UNVS: UnavailableService**  : *The service is not available (not implemented, not configured, protocol version too old...).*<br/>- **UNVD: UnavailableDevice**  : *The hardware is not available (absent, not configured...).*<br/>- **REFU: Refusal**  : *The transaction is refused by the host or by the local rules associated to the card or the POI.*<br/>- **PAYR: PaymentRestriction**  : *Some sale items are not payable by the card proposed by the Customer.*<br/>- **TNFD: NotFound**  : *The transaction is not found (e.g. for a reversal or a repeat).*<br/>- **NALW: NotAllowed**  : *A service request is sent during a Service dialogue. A combination of services not possible to provide. During the DeviceInitialisationCardReader message processing, the user has entered a card which has to be protected by the POI, and cannot be processed with this device request from the external, and then the Sale System.*<br/>- **LOUT: LoggedOut**  : *Not logged in.*<br/>- **IVCA: InvalidCard**  : *The card entered by the Customer cannot be processed by the POI because this card is not configured in the system.*<br/>- **ICAR: InsertedCard**  : *If the Input Device request a NotifyCardInputFlag and the Customer enters a card in the card reader without answers to the Input command, the POI abort the Input command processing, and answer a dedicated ErrorCondition value in the Input response message.*<br/>- **WIPG: InProgress**  : *The transaction is still in progress and then the command cannot be processed.*<br/>  # noqa: E501

        :return: The response_reason of this SaleToPOIServiceResponseV06ServiceResponseResponse.  # noqa: E501
        :rtype: object
        """
        return self._response_reason

    @response_reason.setter
    def response_reason(self, response_reason):
        """Sets the response_reason of this SaleToPOIServiceResponseV06ServiceResponseResponse.

        Result of the processing of the message<br/>- **ABRT: Aborted**  : *The Initiator of the request has sent an Abort message request, which was accepted and processed.*<br/>- **BUSY: Busy**  : *The system is busy, try later.*<br/>- **CANC: Cancel**  : *The user has aborted the transaction on the PED keyboard, for instance during PIN entering.*<br/>- **DEVO: DeviceOut**  : *Device out of order.*<br/>- **WPIN: WrongPIN**  : *The user has entered the PIN on the PED keyboard and the verification fails.*<br/>- **NHOS: UnreachableHost**  : *Acquirer or any host is unreachable or has not answered to an online request, so is considered as temporary unavailable. Depending on the Sale context, the request could be repeated (to be compared with \"Refusal\").*<br/>- **UNVS: UnavailableService**  : *The service is not available (not implemented, not configured, protocol version too old...).*<br/>- **UNVD: UnavailableDevice**  : *The hardware is not available (absent, not configured...).*<br/>- **REFU: Refusal**  : *The transaction is refused by the host or by the local rules associated to the card or the POI.*<br/>- **PAYR: PaymentRestriction**  : *Some sale items are not payable by the card proposed by the Customer.*<br/>- **TNFD: NotFound**  : *The transaction is not found (e.g. for a reversal or a repeat).*<br/>- **NALW: NotAllowed**  : *A service request is sent during a Service dialogue. A combination of services not possible to provide. During the DeviceInitialisationCardReader message processing, the user has entered a card which has to be protected by the POI, and cannot be processed with this device request from the external, and then the Sale System.*<br/>- **LOUT: LoggedOut**  : *Not logged in.*<br/>- **IVCA: InvalidCard**  : *The card entered by the Customer cannot be processed by the POI because this card is not configured in the system.*<br/>- **ICAR: InsertedCard**  : *If the Input Device request a NotifyCardInputFlag and the Customer enters a card in the card reader without answers to the Input command, the POI abort the Input command processing, and answer a dedicated ErrorCondition value in the Input response message.*<br/>- **WIPG: InProgress**  : *The transaction is still in progress and then the command cannot be processed.*<br/>  # noqa: E501

        :param response_reason: The response_reason of this SaleToPOIServiceResponseV06ServiceResponseResponse.  # noqa: E501
        :type: object
        """

        self._response_reason = response_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaleToPOIServiceResponseV06ServiceResponseResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaleToPOIServiceResponseV06ServiceResponseResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
