# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'track_format': 'object',
        'track_number': 'object',
        'track_value': 'object'
    }

    attribute_map = {
        'track_format': 'TrackFormat',
        'track_number': 'TrackNumber',
        'track_value': 'TrackValue'
    }

    def __init__(self, track_format=None, track_number=None, track_value=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2 - a model defined in Swagger"""  # noqa: E501
        self._track_format = None
        self._track_number = None
        self._track_value = None
        self.discriminator = None
        if track_format is not None:
            self.track_format = track_format
        if track_number is not None:
            self.track_number = track_number
        self.track_value = track_value

    @property
    def track_format(self):
        """Gets the track_format of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2.  # noqa: E501

        Use to identify format of a track on a card or other documents like checks.<br/>- **AAMV: AAMVAFormat**  : *American driver license.*<br/>- **CMC7: CMC7CheckFormat**  : *Magnetic Ink Character Recognition, using the CMC-7 font - ISO 1004 Line at the bottom of a check containing the bank account and the check number.*<br/>- **E13B: E13BCheckFormat**  : *Magnetic Ink Character Recognition, using the E-13B font) Line at the bottom of a check containing the bank account and the check number.*<br/>- **ISOF: ISOFormat**  : *ISO card track format - ISO 7813 - ISO 4909.*<br/>- **JIS1: JISIFormat**  : *Japanese track format I.*<br/>- **JIS2: JISIIFormat**  : *Japanese track format II.*<br/>  # noqa: E501

        :return: The track_format of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2.  # noqa: E501
        :rtype: object
        """
        return self._track_format

    @track_format.setter
    def track_format(self, track_format):
        """Sets the track_format of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2.

        Use to identify format of a track on a card or other documents like checks.<br/>- **AAMV: AAMVAFormat**  : *American driver license.*<br/>- **CMC7: CMC7CheckFormat**  : *Magnetic Ink Character Recognition, using the CMC-7 font - ISO 1004 Line at the bottom of a check containing the bank account and the check number.*<br/>- **E13B: E13BCheckFormat**  : *Magnetic Ink Character Recognition, using the E-13B font) Line at the bottom of a check containing the bank account and the check number.*<br/>- **ISOF: ISOFormat**  : *ISO card track format - ISO 7813 - ISO 4909.*<br/>- **JIS1: JISIFormat**  : *Japanese track format I.*<br/>- **JIS2: JISIIFormat**  : *Japanese track format II.*<br/>  # noqa: E501

        :param track_format: The track_format of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2.  # noqa: E501
        :type: object
        """

        self._track_format = track_format

    @property
    def track_number(self):
        """Gets the track_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2.  # noqa: E501

        Number of objects represented as an integer.<br/>  # noqa: E501

        :return: The track_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2.  # noqa: E501
        :rtype: object
        """
        return self._track_number

    @track_number.setter
    def track_number(self, track_number):
        """Sets the track_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2.

        Number of objects represented as an integer.<br/>  # noqa: E501

        :param track_number: The track_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2.  # noqa: E501
        :type: object
        """

        self._track_number = track_number

    @property
    def track_value(self):
        """Gets the track_value of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2.  # noqa: E501

        Specifies a character string with a maximum length of 140 characters.<br/>  # noqa: E501

        :return: The track_value of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2.  # noqa: E501
        :rtype: object
        """
        return self._track_value

    @track_value.setter
    def track_value(self, track_value):
        """Sets the track_value of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2.

        Specifies a character string with a maximum length of 140 characters.<br/>  # noqa: E501

        :param track_value: The track_value of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2.  # noqa: E501
        :type: object
        """
        if track_value is None:
            raise ValueError("Invalid value for `track_value`, must not be `None`")  # noqa: E501

        self._track_value = track_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
