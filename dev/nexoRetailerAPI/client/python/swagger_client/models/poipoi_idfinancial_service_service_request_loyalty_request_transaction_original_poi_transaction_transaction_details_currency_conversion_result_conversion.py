# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applicable_bin_range': 'object',
        'currency_conversion_identification': 'object',
        'commission_details': 'object',
        'declaration_details': 'object',
        'mark_up_details': 'object',
        'inverted_exchange_rate': 'object',
        'original_amount': 'PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversionOriginalAmount',
        'quotation_date': 'object',
        'resulting_amount': 'object',
        'source_currency': 'PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversionSourceCurrency',
        'target_currency': 'PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversionTargetCurrency',
        'valid_from': 'object',
        'valid_until': 'object',
        'exchange_rate': 'object'
    }

    attribute_map = {
        'applicable_bin_range': 'ApplicableBinRange',
        'currency_conversion_identification': 'CurrencyConversionIdentification',
        'commission_details': 'CommissionDetails',
        'declaration_details': 'DeclarationDetails',
        'mark_up_details': 'MarkUpDetails',
        'inverted_exchange_rate': 'InvertedExchangeRate',
        'original_amount': 'OriginalAmount',
        'quotation_date': 'QuotationDate',
        'resulting_amount': 'ResultingAmount',
        'source_currency': 'SourceCurrency',
        'target_currency': 'TargetCurrency',
        'valid_from': 'ValidFrom',
        'valid_until': 'ValidUntil',
        'exchange_rate': 'ExchangeRate'
    }

    def __init__(self, applicable_bin_range=None, currency_conversion_identification=None, commission_details=None, declaration_details=None, mark_up_details=None, inverted_exchange_rate=None, original_amount=None, quotation_date=None, resulting_amount=None, source_currency=None, target_currency=None, valid_from=None, valid_until=None, exchange_rate=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion - a model defined in Swagger"""  # noqa: E501
        self._applicable_bin_range = None
        self._currency_conversion_identification = None
        self._commission_details = None
        self._declaration_details = None
        self._mark_up_details = None
        self._inverted_exchange_rate = None
        self._original_amount = None
        self._quotation_date = None
        self._resulting_amount = None
        self._source_currency = None
        self._target_currency = None
        self._valid_from = None
        self._valid_until = None
        self._exchange_rate = None
        self.discriminator = None
        if applicable_bin_range is not None:
            self.applicable_bin_range = applicable_bin_range
        if currency_conversion_identification is not None:
            self.currency_conversion_identification = currency_conversion_identification
        if commission_details is not None:
            self.commission_details = commission_details
        if declaration_details is not None:
            self.declaration_details = declaration_details
        if mark_up_details is not None:
            self.mark_up_details = mark_up_details
        if inverted_exchange_rate is not None:
            self.inverted_exchange_rate = inverted_exchange_rate
        if original_amount is not None:
            self.original_amount = original_amount
        if quotation_date is not None:
            self.quotation_date = quotation_date
        if resulting_amount is not None:
            self.resulting_amount = resulting_amount
        self.source_currency = source_currency
        self.target_currency = target_currency
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_until is not None:
            self.valid_until = valid_until
        self.exchange_rate = exchange_rate

    @property
    def applicable_bin_range(self):
        """Gets the applicable_bin_range of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501

        Range of Bin for which the conversion is possible.  # noqa: E501

        :return: The applicable_bin_range of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :rtype: object
        """
        return self._applicable_bin_range

    @applicable_bin_range.setter
    def applicable_bin_range(self, applicable_bin_range):
        """Sets the applicable_bin_range of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.

        Range of Bin for which the conversion is possible.  # noqa: E501

        :param applicable_bin_range: The applicable_bin_range of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :type: object
        """

        self._applicable_bin_range = applicable_bin_range

    @property
    def currency_conversion_identification(self):
        """Gets the currency_conversion_identification of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The currency_conversion_identification of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :rtype: object
        """
        return self._currency_conversion_identification

    @currency_conversion_identification.setter
    def currency_conversion_identification(self, currency_conversion_identification):
        """Sets the currency_conversion_identification of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param currency_conversion_identification: The currency_conversion_identification of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :type: object
        """

        self._currency_conversion_identification = currency_conversion_identification

    @property
    def commission_details(self):
        """Gets the commission_details of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501

        Commission or additional charges made as part of a currency conversion.  # noqa: E501

        :return: The commission_details of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :rtype: object
        """
        return self._commission_details

    @commission_details.setter
    def commission_details(self, commission_details):
        """Sets the commission_details of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.

        Commission or additional charges made as part of a currency conversion.  # noqa: E501

        :param commission_details: The commission_details of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :type: object
        """

        self._commission_details = commission_details

    @property
    def declaration_details(self):
        """Gets the declaration_details of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501

        Card scheme declaration (disclaimer) to present to the cardholder.  # noqa: E501

        :return: The declaration_details of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :rtype: object
        """
        return self._declaration_details

    @declaration_details.setter
    def declaration_details(self, declaration_details):
        """Sets the declaration_details of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.

        Card scheme declaration (disclaimer) to present to the cardholder.  # noqa: E501

        :param declaration_details: The declaration_details of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :type: object
        """

        self._declaration_details = declaration_details

    @property
    def mark_up_details(self):
        """Gets the mark_up_details of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501

        Markup made as part of a currency conversion.  # noqa: E501

        :return: The mark_up_details of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :rtype: object
        """
        return self._mark_up_details

    @mark_up_details.setter
    def mark_up_details(self, mark_up_details):
        """Sets the mark_up_details of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.

        Markup made as part of a currency conversion.  # noqa: E501

        :param mark_up_details: The mark_up_details of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :type: object
        """

        self._mark_up_details = mark_up_details

    @property
    def inverted_exchange_rate(self):
        """Gets the inverted_exchange_rate of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501

        Rate expressed as a percentage, that is, in hundredths, for example, 0.7 is 7/10 of a percent, and 7.0 is 7%.<br/>  # noqa: E501

        :return: The inverted_exchange_rate of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :rtype: object
        """
        return self._inverted_exchange_rate

    @inverted_exchange_rate.setter
    def inverted_exchange_rate(self, inverted_exchange_rate):
        """Sets the inverted_exchange_rate of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.

        Rate expressed as a percentage, that is, in hundredths, for example, 0.7 is 7/10 of a percent, and 7.0 is 7%.<br/>  # noqa: E501

        :param inverted_exchange_rate: The inverted_exchange_rate of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :type: object
        """

        self._inverted_exchange_rate = inverted_exchange_rate

    @property
    def original_amount(self):
        """Gets the original_amount of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501


        :return: The original_amount of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversionOriginalAmount
        """
        return self._original_amount

    @original_amount.setter
    def original_amount(self, original_amount):
        """Sets the original_amount of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.


        :param original_amount: The original_amount of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversionOriginalAmount
        """

        self._original_amount = original_amount

    @property
    def quotation_date(self):
        """Gets the quotation_date of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501

        A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. Note on the time format: 1) beginning / end of calendar day 00:00:00 = the beginning of a calendar day 24:00:00 = the end of a calendar day 2) fractions of second in time format Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.<br/>  # noqa: E501

        :return: The quotation_date of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :rtype: object
        """
        return self._quotation_date

    @quotation_date.setter
    def quotation_date(self, quotation_date):
        """Sets the quotation_date of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.

        A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. Note on the time format: 1) beginning / end of calendar day 00:00:00 = the beginning of a calendar day 24:00:00 = the end of a calendar day 2) fractions of second in time format Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.<br/>  # noqa: E501

        :param quotation_date: The quotation_date of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :type: object
        """

        self._quotation_date = quotation_date

    @property
    def resulting_amount(self):
        """Gets the resulting_amount of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :return: The resulting_amount of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :rtype: object
        """
        return self._resulting_amount

    @resulting_amount.setter
    def resulting_amount(self, resulting_amount):
        """Sets the resulting_amount of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :param resulting_amount: The resulting_amount of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :type: object
        """

        self._resulting_amount = resulting_amount

    @property
    def source_currency(self):
        """Gets the source_currency of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501


        :return: The source_currency of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversionSourceCurrency
        """
        return self._source_currency

    @source_currency.setter
    def source_currency(self, source_currency):
        """Sets the source_currency of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.


        :param source_currency: The source_currency of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversionSourceCurrency
        """
        if source_currency is None:
            raise ValueError("Invalid value for `source_currency`, must not be `None`")  # noqa: E501

        self._source_currency = source_currency

    @property
    def target_currency(self):
        """Gets the target_currency of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501


        :return: The target_currency of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversionTargetCurrency
        """
        return self._target_currency

    @target_currency.setter
    def target_currency(self, target_currency):
        """Sets the target_currency of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.


        :param target_currency: The target_currency of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversionTargetCurrency
        """
        if target_currency is None:
            raise ValueError("Invalid value for `target_currency`, must not be `None`")  # noqa: E501

        self._target_currency = target_currency

    @property
    def valid_from(self):
        """Gets the valid_from of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501

        A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. Note on the time format: 1) beginning / end of calendar day 00:00:00 = the beginning of a calendar day 24:00:00 = the end of a calendar day 2) fractions of second in time format Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.<br/>  # noqa: E501

        :return: The valid_from of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :rtype: object
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.

        A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. Note on the time format: 1) beginning / end of calendar day 00:00:00 = the beginning of a calendar day 24:00:00 = the end of a calendar day 2) fractions of second in time format Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.<br/>  # noqa: E501

        :param valid_from: The valid_from of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :type: object
        """

        self._valid_from = valid_from

    @property
    def valid_until(self):
        """Gets the valid_until of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501

        A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. Note on the time format: 1) beginning / end of calendar day 00:00:00 = the beginning of a calendar day 24:00:00 = the end of a calendar day 2) fractions of second in time format Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.<br/>  # noqa: E501

        :return: The valid_until of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :rtype: object
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.

        A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. Note on the time format: 1) beginning / end of calendar day 00:00:00 = the beginning of a calendar day 24:00:00 = the end of a calendar day 2) fractions of second in time format Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.<br/>  # noqa: E501

        :param valid_until: The valid_until of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :type: object
        """

        self._valid_until = valid_until

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501

        Rate expressed as a percentage, that is, in hundredths, for example, 0.7 is 7/10 of a percent, and 7.0 is 7%.<br/>  # noqa: E501

        :return: The exchange_rate of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :rtype: object
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.

        Rate expressed as a percentage, that is, in hundredths, for example, 0.7 is 7/10 of a percent, and 7.0 is 7%.<br/>  # noqa: E501

        :param exchange_rate: The exchange_rate of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion.  # noqa: E501
        :type: object
        """
        if exchange_rate is None:
            raise ValueError("Invalid value for `exchange_rate`, must not be `None`")  # noqa: E501

        self._exchange_rate = exchange_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
