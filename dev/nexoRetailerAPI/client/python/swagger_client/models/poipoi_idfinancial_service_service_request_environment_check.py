# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestEnvironmentCheck(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'object',
        'bank_identification': 'object',
        'check_card_number': 'object',
        'check_number': 'object',
        'check_type': 'object',
        'check_track_data2': 'PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2',
        'country': 'object'
    }

    attribute_map = {
        'account_number': 'AccountNumber',
        'bank_identification': 'BankIdentification',
        'check_card_number': 'CheckCardNumber',
        'check_number': 'CheckNumber',
        'check_type': 'CheckType',
        'check_track_data2': 'CheckTrackData2',
        'country': 'Country'
    }

    def __init__(self, account_number=None, bank_identification=None, check_card_number=None, check_number=None, check_type=None, check_track_data2=None, country=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestEnvironmentCheck - a model defined in Swagger"""  # noqa: E501
        self._account_number = None
        self._bank_identification = None
        self._check_card_number = None
        self._check_number = None
        self._check_type = None
        self._check_track_data2 = None
        self._country = None
        self.discriminator = None
        if account_number is not None:
            self.account_number = account_number
        if bank_identification is not None:
            self.bank_identification = bank_identification
        if check_card_number is not None:
            self.check_card_number = check_card_number
        if check_number is not None:
            self.check_number = check_number
        if check_type is not None:
            self.check_type = check_type
        if check_track_data2 is not None:
            self.check_track_data2 = check_track_data2
        if country is not None:
            self.country = country

    @property
    def account_number(self):
        """Gets the account_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The account_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501
        :rtype: object
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param account_number: The account_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501
        :type: object
        """

        self._account_number = account_number

    @property
    def bank_identification(self):
        """Gets the bank_identification of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The bank_identification of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501
        :rtype: object
        """
        return self._bank_identification

    @bank_identification.setter
    def bank_identification(self, bank_identification):
        """Sets the bank_identification of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param bank_identification: The bank_identification of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501
        :type: object
        """

        self._bank_identification = bank_identification

    @property
    def check_card_number(self):
        """Gets the check_card_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The check_card_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501
        :rtype: object
        """
        return self._check_card_number

    @check_card_number.setter
    def check_card_number(self, check_card_number):
        """Sets the check_card_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param check_card_number: The check_card_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501
        :type: object
        """

        self._check_card_number = check_card_number

    @property
    def check_number(self):
        """Gets the check_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The check_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501
        :rtype: object
        """
        return self._check_number

    @check_number.setter
    def check_number(self, check_number):
        """Sets the check_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param check_number: The check_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501
        :type: object
        """

        self._check_number = check_number

    @property
    def check_type(self):
        """Gets the check_type of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501

        Type of bank check.<br/>- **BANK: BankCheck**  : *The check is guaranteed by a bank.*<br/>- **BUSI: BusinessCheck**  : *The check belongs to a Company or a professional entity.*<br/>- **GOVC: GovernmentCheck**  : *Check issued by Government.*<br/>- **PAYR: PayrollCheck**  : *Check issued by a company for the employees.*<br/>- **PERS: PersonalCheck**  : *The check belongs to an individual.*<br/>  # noqa: E501

        :return: The check_type of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501
        :rtype: object
        """
        return self._check_type

    @check_type.setter
    def check_type(self, check_type):
        """Sets the check_type of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.

        Type of bank check.<br/>- **BANK: BankCheck**  : *The check is guaranteed by a bank.*<br/>- **BUSI: BusinessCheck**  : *The check belongs to a Company or a professional entity.*<br/>- **GOVC: GovernmentCheck**  : *Check issued by Government.*<br/>- **PAYR: PayrollCheck**  : *Check issued by a company for the employees.*<br/>- **PERS: PersonalCheck**  : *The check belongs to an individual.*<br/>  # noqa: E501

        :param check_type: The check_type of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501
        :type: object
        """

        self._check_type = check_type

    @property
    def check_track_data2(self):
        """Gets the check_track_data2 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501


        :return: The check_track_data2 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2
        """
        return self._check_track_data2

    @check_track_data2.setter
    def check_track_data2(self, check_track_data2):
        """Sets the check_track_data2 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.


        :param check_track_data2: The check_track_data2 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestEnvironmentCheckCheckTrackData2
        """

        self._check_track_data2 = check_track_data2

    @property
    def country(self):
        """Gets the country of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501

        Specifies a character string with a maximum length of 3 characters.<br/>  # noqa: E501

        :return: The country of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501
        :rtype: object
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.

        Specifies a character string with a maximum length of 3 characters.<br/>  # noqa: E501

        :param country: The country of this PoipoiIdfinancialServiceServiceRequestEnvironmentCheck.  # noqa: E501
        :type: object
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestEnvironmentCheck, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestEnvironmentCheck):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
