# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestReversalRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_order': 'PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder',
        'loyalty_data': 'object',
        'reversed_amount': 'object',
        'reversal_reason': 'object',
        'reversal_transaction': 'PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransaction'
    }

    attribute_map = {
        'customer_order': 'CustomerOrder',
        'loyalty_data': 'LoyaltyData',
        'reversed_amount': 'ReversedAmount',
        'reversal_reason': 'ReversalReason',
        'reversal_transaction': 'ReversalTransaction'
    }

    def __init__(self, customer_order=None, loyalty_data=None, reversed_amount=None, reversal_reason=None, reversal_transaction=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestReversalRequest - a model defined in Swagger"""  # noqa: E501
        self._customer_order = None
        self._loyalty_data = None
        self._reversed_amount = None
        self._reversal_reason = None
        self._reversal_transaction = None
        self.discriminator = None
        if customer_order is not None:
            self.customer_order = customer_order
        if loyalty_data is not None:
            self.loyalty_data = loyalty_data
        if reversed_amount is not None:
            self.reversed_amount = reversed_amount
        self.reversal_reason = reversal_reason
        if reversal_transaction is not None:
            self.reversal_transaction = reversal_transaction

    @property
    def customer_order(self):
        """Gets the customer_order of this PoipoiIdfinancialServiceServiceRequestReversalRequest.  # noqa: E501


        :return: The customer_order of this PoipoiIdfinancialServiceServiceRequestReversalRequest.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder
        """
        return self._customer_order

    @customer_order.setter
    def customer_order(self, customer_order):
        """Sets the customer_order of this PoipoiIdfinancialServiceServiceRequestReversalRequest.


        :param customer_order: The customer_order of this PoipoiIdfinancialServiceServiceRequestReversalRequest.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder
        """

        self._customer_order = customer_order

    @property
    def loyalty_data(self):
        """Gets the loyalty_data of this PoipoiIdfinancialServiceServiceRequestReversalRequest.  # noqa: E501

        Data linked to card loyalty during payment.  # noqa: E501

        :return: The loyalty_data of this PoipoiIdfinancialServiceServiceRequestReversalRequest.  # noqa: E501
        :rtype: object
        """
        return self._loyalty_data

    @loyalty_data.setter
    def loyalty_data(self, loyalty_data):
        """Sets the loyalty_data of this PoipoiIdfinancialServiceServiceRequestReversalRequest.

        Data linked to card loyalty during payment.  # noqa: E501

        :param loyalty_data: The loyalty_data of this PoipoiIdfinancialServiceServiceRequestReversalRequest.  # noqa: E501
        :type: object
        """

        self._loyalty_data = loyalty_data

    @property
    def reversed_amount(self):
        """Gets the reversed_amount of this PoipoiIdfinancialServiceServiceRequestReversalRequest.  # noqa: E501

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :return: The reversed_amount of this PoipoiIdfinancialServiceServiceRequestReversalRequest.  # noqa: E501
        :rtype: object
        """
        return self._reversed_amount

    @reversed_amount.setter
    def reversed_amount(self, reversed_amount):
        """Sets the reversed_amount of this PoipoiIdfinancialServiceServiceRequestReversalRequest.

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :param reversed_amount: The reversed_amount of this PoipoiIdfinancialServiceServiceRequestReversalRequest.  # noqa: E501
        :type: object
        """

        self._reversed_amount = reversed_amount

    @property
    def reversal_reason(self):
        """Gets the reversal_reason of this PoipoiIdfinancialServiceServiceRequestReversalRequest.  # noqa: E501

        Reason of the payment or loyalty reversal.<br/>- **CUSC: CustomerCancellation**  : *Customer cancels the transaction.*<br/>- **MALF: Malfuntion**  : *Reversal after a suspection of malfunction of the POI system.*<br/>- **MERC: MerchantCancellation**  : *Merchant or Cashier cancels the transaction.*<br/>- **UNAB: UnableToComplete**  : *POI System unable to complete transaction.*<br/>  # noqa: E501

        :return: The reversal_reason of this PoipoiIdfinancialServiceServiceRequestReversalRequest.  # noqa: E501
        :rtype: object
        """
        return self._reversal_reason

    @reversal_reason.setter
    def reversal_reason(self, reversal_reason):
        """Sets the reversal_reason of this PoipoiIdfinancialServiceServiceRequestReversalRequest.

        Reason of the payment or loyalty reversal.<br/>- **CUSC: CustomerCancellation**  : *Customer cancels the transaction.*<br/>- **MALF: Malfuntion**  : *Reversal after a suspection of malfunction of the POI system.*<br/>- **MERC: MerchantCancellation**  : *Merchant or Cashier cancels the transaction.*<br/>- **UNAB: UnableToComplete**  : *POI System unable to complete transaction.*<br/>  # noqa: E501

        :param reversal_reason: The reversal_reason of this PoipoiIdfinancialServiceServiceRequestReversalRequest.  # noqa: E501
        :type: object
        """
        if reversal_reason is None:
            raise ValueError("Invalid value for `reversal_reason`, must not be `None`")  # noqa: E501

        self._reversal_reason = reversal_reason

    @property
    def reversal_transaction(self):
        """Gets the reversal_transaction of this PoipoiIdfinancialServiceServiceRequestReversalRequest.  # noqa: E501


        :return: The reversal_transaction of this PoipoiIdfinancialServiceServiceRequestReversalRequest.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransaction
        """
        return self._reversal_transaction

    @reversal_transaction.setter
    def reversal_transaction(self, reversal_transaction):
        """Sets the reversal_transaction of this PoipoiIdfinancialServiceServiceRequestReversalRequest.


        :param reversal_transaction: The reversal_transaction of this PoipoiIdfinancialServiceServiceRequestReversalRequest.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransaction
        """

        self._reversal_transaction = reversal_transaction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestReversalRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestReversalRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
