# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_response_information': 'object',
        'response': 'object',
        'response_reason': 'object'
    }

    attribute_map = {
        'additional_response_information': 'AdditionalResponseInformation',
        'response': 'Response',
        'response_reason': 'ResponseReason'
    }

    def __init__(self, additional_response_information=None, response=None, response_reason=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation - a model defined in Swagger"""  # noqa: E501
        self._additional_response_information = None
        self._response = None
        self._response_reason = None
        self.discriminator = None
        if additional_response_information is not None:
            self.additional_response_information = additional_response_information
        self.response = response
        if response_reason is not None:
            self.response_reason = response_reason

    @property
    def additional_response_information(self):
        """Gets the additional_response_information of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation.  # noqa: E501

        Specifies a character string with a maximum length of 140 characters.<br/>  # noqa: E501

        :return: The additional_response_information of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation.  # noqa: E501
        :rtype: object
        """
        return self._additional_response_information

    @additional_response_information.setter
    def additional_response_information(self, additional_response_information):
        """Sets the additional_response_information of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation.

        Specifies a character string with a maximum length of 140 characters.<br/>  # noqa: E501

        :param additional_response_information: The additional_response_information of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation.  # noqa: E501
        :type: object
        """

        self._additional_response_information = additional_response_information

    @property
    def response(self):
        """Gets the response of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation.  # noqa: E501

        Result of the performed service.<br/>- **APPR: Approved**  : *Service has been successfuly provided.*<br/>- **DECL: Declined**  : *Service is declined.*<br/>- **PART: PartialApproved**  : *Service has been partialy provided.*<br/>- **SUSP: Suspended**  : *Transaction has been received but hasn't been processed.*<br/>- **TECH: TechnicalError**  : *Service cannot be provided for technical reason (eg timeout contacting the Issuer, security problem).*<br/>  # noqa: E501

        :return: The response of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation.  # noqa: E501
        :rtype: object
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation.

        Result of the performed service.<br/>- **APPR: Approved**  : *Service has been successfuly provided.*<br/>- **DECL: Declined**  : *Service is declined.*<br/>- **PART: PartialApproved**  : *Service has been partialy provided.*<br/>- **SUSP: Suspended**  : *Transaction has been received but hasn't been processed.*<br/>- **TECH: TechnicalError**  : *Service cannot be provided for technical reason (eg timeout contacting the Issuer, security problem).*<br/>  # noqa: E501

        :param response: The response of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation.  # noqa: E501
        :type: object
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")  # noqa: E501

        self._response = response

    @property
    def response_reason(self):
        """Gets the response_reason of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The response_reason of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation.  # noqa: E501
        :rtype: object
        """
        return self._response_reason

    @response_reason.setter
    def response_reason(self, response_reason):
        """Sets the response_reason of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param response_reason: The response_reason of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation.  # noqa: E501
        :type: object
        """

        self._response_reason = response_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
