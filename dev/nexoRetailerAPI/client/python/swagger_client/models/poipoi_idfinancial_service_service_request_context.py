# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'direct_debit_context': 'PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext',
        'payment_context': 'PoipoiIdfinancialServiceServiceRequestContextPaymentContext',
        'sale_context': 'PoipoiIdfinancialServiceServiceRequestContextSaleContext'
    }

    attribute_map = {
        'direct_debit_context': 'DirectDebitContext',
        'payment_context': 'PaymentContext',
        'sale_context': 'SaleContext'
    }

    def __init__(self, direct_debit_context=None, payment_context=None, sale_context=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestContext - a model defined in Swagger"""  # noqa: E501
        self._direct_debit_context = None
        self._payment_context = None
        self._sale_context = None
        self.discriminator = None
        if direct_debit_context is not None:
            self.direct_debit_context = direct_debit_context
        if payment_context is not None:
            self.payment_context = payment_context
        if sale_context is not None:
            self.sale_context = sale_context

    @property
    def direct_debit_context(self):
        """Gets the direct_debit_context of this PoipoiIdfinancialServiceServiceRequestContext.  # noqa: E501


        :return: The direct_debit_context of this PoipoiIdfinancialServiceServiceRequestContext.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext
        """
        return self._direct_debit_context

    @direct_debit_context.setter
    def direct_debit_context(self, direct_debit_context):
        """Sets the direct_debit_context of this PoipoiIdfinancialServiceServiceRequestContext.


        :param direct_debit_context: The direct_debit_context of this PoipoiIdfinancialServiceServiceRequestContext.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext
        """

        self._direct_debit_context = direct_debit_context

    @property
    def payment_context(self):
        """Gets the payment_context of this PoipoiIdfinancialServiceServiceRequestContext.  # noqa: E501


        :return: The payment_context of this PoipoiIdfinancialServiceServiceRequestContext.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestContextPaymentContext
        """
        return self._payment_context

    @payment_context.setter
    def payment_context(self, payment_context):
        """Sets the payment_context of this PoipoiIdfinancialServiceServiceRequestContext.


        :param payment_context: The payment_context of this PoipoiIdfinancialServiceServiceRequestContext.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestContextPaymentContext
        """

        self._payment_context = payment_context

    @property
    def sale_context(self):
        """Gets the sale_context of this PoipoiIdfinancialServiceServiceRequestContext.  # noqa: E501


        :return: The sale_context of this PoipoiIdfinancialServiceServiceRequestContext.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestContextSaleContext
        """
        return self._sale_context

    @sale_context.setter
    def sale_context(self, sale_context):
        """Sets the sale_context of this PoipoiIdfinancialServiceServiceRequestContext.


        :param sale_context: The sale_context of this PoipoiIdfinancialServiceServiceRequestContext.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestContextSaleContext
        """

        self._sale_context = sale_context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
