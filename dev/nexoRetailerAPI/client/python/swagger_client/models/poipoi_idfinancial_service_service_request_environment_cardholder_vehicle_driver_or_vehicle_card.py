# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_card_data': 'object',
        'entry_mode': 'object',
        'pan': 'object',
        'track1': 'object',
        'track2': 'object',
        'track3': 'object'
    }

    attribute_map = {
        'additional_card_data': 'AdditionalCardData',
        'entry_mode': 'EntryMode',
        'pan': 'PAN',
        'track1': 'Track1',
        'track2': 'Track2',
        'track3': 'Track3'
    }

    def __init__(self, additional_card_data=None, entry_mode=None, pan=None, track1=None, track2=None, track3=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard - a model defined in Swagger"""  # noqa: E501
        self._additional_card_data = None
        self._entry_mode = None
        self._pan = None
        self._track1 = None
        self._track2 = None
        self._track3 = None
        self.discriminator = None
        if additional_card_data is not None:
            self.additional_card_data = additional_card_data
        if entry_mode is not None:
            self.entry_mode = entry_mode
        if pan is not None:
            self.pan = pan
        if track1 is not None:
            self.track1 = track1
        if track2 is not None:
            self.track2 = track2
        if track3 is not None:
            self.track3 = track3

    @property
    def additional_card_data(self):
        """Gets the additional_card_data of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501

        Additional card issuer specific data.  # noqa: E501

        :return: The additional_card_data of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501
        :rtype: object
        """
        return self._additional_card_data

    @additional_card_data.setter
    def additional_card_data(self, additional_card_data):
        """Sets the additional_card_data of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.

        Additional card issuer specific data.  # noqa: E501

        :param additional_card_data: The additional_card_data of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501
        :type: object
        """

        self._additional_card_data = additional_card_data

    @property
    def entry_mode(self):
        """Gets the entry_mode of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501

        Type of reading of the card data.<br/>- **TAGC: Tag**  : *Tag reading capabilities (RFID, etc.).*<br/>- **PHYS: Physical**  : *Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.*<br/>- **BRCD: BarCode**  : *Bar code.*<br/>- **MGST: MagneticStripe**  : *Magnetic stripe.*<br/>- **CICC: ICC**  : *ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.*<br/>- **DFLE: AccountData**  : *Account data on file.*<br/>- **CTLS: ProximityReader**  : *Contactless proximity reader.*<br/>- **ECTL: EMVProximityReader**  : *Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).*<br/>- **CDFL: CardOnFile**  : *Card information are stored on a file.*<br/>  # noqa: E501

        :return: The entry_mode of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501
        :rtype: object
        """
        return self._entry_mode

    @entry_mode.setter
    def entry_mode(self, entry_mode):
        """Sets the entry_mode of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.

        Type of reading of the card data.<br/>- **TAGC: Tag**  : *Tag reading capabilities (RFID, etc.).*<br/>- **PHYS: Physical**  : *Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.*<br/>- **BRCD: BarCode**  : *Bar code.*<br/>- **MGST: MagneticStripe**  : *Magnetic stripe.*<br/>- **CICC: ICC**  : *ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.*<br/>- **DFLE: AccountData**  : *Account data on file.*<br/>- **CTLS: ProximityReader**  : *Contactless proximity reader.*<br/>- **ECTL: EMVProximityReader**  : *Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).*<br/>- **CDFL: CardOnFile**  : *Card information are stored on a file.*<br/>  # noqa: E501

        :param entry_mode: The entry_mode of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501
        :type: object
        """

        self._entry_mode = entry_mode

    @property
    def pan(self):
        """Gets the pan of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501

        Specifies a numeric string with a minimum length of 8 digits, and a maximum length of 28 digits.<br/>  # noqa: E501

        :return: The pan of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501
        :rtype: object
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """Sets the pan of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.

        Specifies a numeric string with a minimum length of 8 digits, and a maximum length of 28 digits.<br/>  # noqa: E501

        :param pan: The pan of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501
        :type: object
        """

        self._pan = pan

    @property
    def track1(self):
        """Gets the track1 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501

        Specifies a character string with a maximum length of 76 characters.<br/>  # noqa: E501

        :return: The track1 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501
        :rtype: object
        """
        return self._track1

    @track1.setter
    def track1(self, track1):
        """Sets the track1 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.

        Specifies a character string with a maximum length of 76 characters.<br/>  # noqa: E501

        :param track1: The track1 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501
        :type: object
        """

        self._track1 = track1

    @property
    def track2(self):
        """Gets the track2 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501

        Specifies a character string with a maximum length of 37 characters.<br/>  # noqa: E501

        :return: The track2 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501
        :rtype: object
        """
        return self._track2

    @track2.setter
    def track2(self, track2):
        """Sets the track2 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.

        Specifies a character string with a maximum length of 37 characters.<br/>  # noqa: E501

        :param track2: The track2 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501
        :type: object
        """

        self._track2 = track2

    @property
    def track3(self):
        """Gets the track3 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501

        Specifies a character string with a maximum length of 104 characters.<br/>  # noqa: E501

        :return: The track3 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501
        :rtype: object
        """
        return self._track3

    @track3.setter
    def track3(self, track3):
        """Sets the track3 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.

        Specifies a character string with a maximum length of 104 characters.<br/>  # noqa: E501

        :param track3: The track3 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard.  # noqa: E501
        :type: object
        """

        self._track3 = track3

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderVehicleDriverOrVehicleCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
