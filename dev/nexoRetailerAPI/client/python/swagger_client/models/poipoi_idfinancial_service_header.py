# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceHeader(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_date_time': 'object',
        'initiating_party': 'PoipoiIdfinancialServiceHeaderInitiatingParty',
        'message_function': 'object',
        'protocol_version': 'object',
        'recipient_party': 'PoipoiIdfinancialServiceHeaderInitiatingParty',
        'traceability': 'object',
        'exchange_identification': 'object'
    }

    attribute_map = {
        'creation_date_time': 'CreationDateTime',
        'initiating_party': 'InitiatingParty',
        'message_function': 'MessageFunction',
        'protocol_version': 'ProtocolVersion',
        'recipient_party': 'RecipientParty',
        'traceability': 'Traceability',
        'exchange_identification': 'ExchangeIdentification'
    }

    def __init__(self, creation_date_time=None, initiating_party=None, message_function=None, protocol_version=None, recipient_party=None, traceability=None, exchange_identification=None):  # noqa: E501
        """PoipoiIdfinancialServiceHeader - a model defined in Swagger"""  # noqa: E501
        self._creation_date_time = None
        self._initiating_party = None
        self._message_function = None
        self._protocol_version = None
        self._recipient_party = None
        self._traceability = None
        self._exchange_identification = None
        self.discriminator = None
        self.creation_date_time = creation_date_time
        self.initiating_party = initiating_party
        self.message_function = message_function
        self.protocol_version = protocol_version
        if recipient_party is not None:
            self.recipient_party = recipient_party
        if traceability is not None:
            self.traceability = traceability
        self.exchange_identification = exchange_identification

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this PoipoiIdfinancialServiceHeader.  # noqa: E501

        A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. Note on the time format: 1) beginning / end of calendar day 00:00:00 = the beginning of a calendar day 24:00:00 = the end of a calendar day 2) fractions of second in time format Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.<br/>  # noqa: E501

        :return: The creation_date_time of this PoipoiIdfinancialServiceHeader.  # noqa: E501
        :rtype: object
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this PoipoiIdfinancialServiceHeader.

        A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. Note on the time format: 1) beginning / end of calendar day 00:00:00 = the beginning of a calendar day 24:00:00 = the end of a calendar day 2) fractions of second in time format Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.<br/>  # noqa: E501

        :param creation_date_time: The creation_date_time of this PoipoiIdfinancialServiceHeader.  # noqa: E501
        :type: object
        """
        if creation_date_time is None:
            raise ValueError("Invalid value for `creation_date_time`, must not be `None`")  # noqa: E501

        self._creation_date_time = creation_date_time

    @property
    def initiating_party(self):
        """Gets the initiating_party of this PoipoiIdfinancialServiceHeader.  # noqa: E501


        :return: The initiating_party of this PoipoiIdfinancialServiceHeader.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceHeaderInitiatingParty
        """
        return self._initiating_party

    @initiating_party.setter
    def initiating_party(self, initiating_party):
        """Sets the initiating_party of this PoipoiIdfinancialServiceHeader.


        :param initiating_party: The initiating_party of this PoipoiIdfinancialServiceHeader.  # noqa: E501
        :type: PoipoiIdfinancialServiceHeaderInitiatingParty
        """
        if initiating_party is None:
            raise ValueError("Invalid value for `initiating_party`, must not be `None`")  # noqa: E501

        self._initiating_party = initiating_party

    @property
    def message_function(self):
        """Gets the message_function of this PoipoiIdfinancialServiceHeader.  # noqa: E501

        Identifies the type of process related to the message.<br/>- **SSAB: Abort**  : *Abort the current process or the last request.*<br/>- **SAAQ: AdminRequest**  : *To select and start customised administrative services provided by the POI, using a \"menu\" for an interactive or software interface, initiated by the Sale system.*<br/>- **SAAP: AdminResponse**  : *Response to the Admin request.*<br/>- **SDDR: DeviceRequest**  : *Request one or several functions of the device, from user Interface or payment peripherals on the POI system or on the Sale system. Functions can be Display, Input, Print, play sound, Card reader capabilities or Transmit a message.*<br/>- **SDDP: DeviceResponse**  : *Response to a Device request.*<br/>- **SSEN: EventNotification**  : *Notify the other party of an event that occurs on its side.*<br/>- **SSMQ: MessageStatusRequest**  : *Request the status of a previous message for which the Sale system has no response.*<br/>- **SSMR: MessageStatusResponse**  : *Response to a Message Status request.*<br/>- **SSRJ: Rejection**  : *Reject a previous received message, for technical or functional reasons.*<br/>- **SARQ: ReportRequest**  : *To request, by the Sale System, a report on a list of transactions on the POI system, or the status of a transaction.*<br/>- **SARP: ReportResponse**  : *Response to a Report request.*<br/>- **SFRP: SaleFinancialReconciliationResponse**  : *Response to a Reconciliation Request.*<br/>- **SFRQ: SaleFinancialReconciliationRequest**  : *Request a reconciliation (different types) between Sale System and POI System.*<br/>- **SFSQ: SaleFinancialServiceRequest**  : *Request a financial service like payment, reversal, loyalty, Balance Inquiry, etc.*<br/>- **SFSP: SaleFinancialServiceResponse**  : *Response to a financial service request.*<br/>- **SASQ: SessionManagementRequest**  : *Request the management of a session: login, logout and diagnosis services. Initiated by the Sale system.*<br/>- **SASP: SessionManagementResponse**  : *Response to a session management request to initiate/terminate a session.*<br/>  # noqa: E501

        :return: The message_function of this PoipoiIdfinancialServiceHeader.  # noqa: E501
        :rtype: object
        """
        return self._message_function

    @message_function.setter
    def message_function(self, message_function):
        """Sets the message_function of this PoipoiIdfinancialServiceHeader.

        Identifies the type of process related to the message.<br/>- **SSAB: Abort**  : *Abort the current process or the last request.*<br/>- **SAAQ: AdminRequest**  : *To select and start customised administrative services provided by the POI, using a \"menu\" for an interactive or software interface, initiated by the Sale system.*<br/>- **SAAP: AdminResponse**  : *Response to the Admin request.*<br/>- **SDDR: DeviceRequest**  : *Request one or several functions of the device, from user Interface or payment peripherals on the POI system or on the Sale system. Functions can be Display, Input, Print, play sound, Card reader capabilities or Transmit a message.*<br/>- **SDDP: DeviceResponse**  : *Response to a Device request.*<br/>- **SSEN: EventNotification**  : *Notify the other party of an event that occurs on its side.*<br/>- **SSMQ: MessageStatusRequest**  : *Request the status of a previous message for which the Sale system has no response.*<br/>- **SSMR: MessageStatusResponse**  : *Response to a Message Status request.*<br/>- **SSRJ: Rejection**  : *Reject a previous received message, for technical or functional reasons.*<br/>- **SARQ: ReportRequest**  : *To request, by the Sale System, a report on a list of transactions on the POI system, or the status of a transaction.*<br/>- **SARP: ReportResponse**  : *Response to a Report request.*<br/>- **SFRP: SaleFinancialReconciliationResponse**  : *Response to a Reconciliation Request.*<br/>- **SFRQ: SaleFinancialReconciliationRequest**  : *Request a reconciliation (different types) between Sale System and POI System.*<br/>- **SFSQ: SaleFinancialServiceRequest**  : *Request a financial service like payment, reversal, loyalty, Balance Inquiry, etc.*<br/>- **SFSP: SaleFinancialServiceResponse**  : *Response to a financial service request.*<br/>- **SASQ: SessionManagementRequest**  : *Request the management of a session: login, logout and diagnosis services. Initiated by the Sale system.*<br/>- **SASP: SessionManagementResponse**  : *Response to a session management request to initiate/terminate a session.*<br/>  # noqa: E501

        :param message_function: The message_function of this PoipoiIdfinancialServiceHeader.  # noqa: E501
        :type: object
        """
        if message_function is None:
            raise ValueError("Invalid value for `message_function`, must not be `None`")  # noqa: E501

        self._message_function = message_function

    @property
    def protocol_version(self):
        """Gets the protocol_version of this PoipoiIdfinancialServiceHeader.  # noqa: E501

        Specifies a character string with a maximum length of 6 characters.<br/>  # noqa: E501

        :return: The protocol_version of this PoipoiIdfinancialServiceHeader.  # noqa: E501
        :rtype: object
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this PoipoiIdfinancialServiceHeader.

        Specifies a character string with a maximum length of 6 characters.<br/>  # noqa: E501

        :param protocol_version: The protocol_version of this PoipoiIdfinancialServiceHeader.  # noqa: E501
        :type: object
        """
        if protocol_version is None:
            raise ValueError("Invalid value for `protocol_version`, must not be `None`")  # noqa: E501

        self._protocol_version = protocol_version

    @property
    def recipient_party(self):
        """Gets the recipient_party of this PoipoiIdfinancialServiceHeader.  # noqa: E501


        :return: The recipient_party of this PoipoiIdfinancialServiceHeader.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceHeaderInitiatingParty
        """
        return self._recipient_party

    @recipient_party.setter
    def recipient_party(self, recipient_party):
        """Sets the recipient_party of this PoipoiIdfinancialServiceHeader.


        :param recipient_party: The recipient_party of this PoipoiIdfinancialServiceHeader.  # noqa: E501
        :type: PoipoiIdfinancialServiceHeaderInitiatingParty
        """

        self._recipient_party = recipient_party

    @property
    def traceability(self):
        """Gets the traceability of this PoipoiIdfinancialServiceHeader.  # noqa: E501

        Identification of partners involved in exchange from the merchant to the issuer, with the relative timestamp of their exchanges.  # noqa: E501

        :return: The traceability of this PoipoiIdfinancialServiceHeader.  # noqa: E501
        :rtype: object
        """
        return self._traceability

    @traceability.setter
    def traceability(self, traceability):
        """Sets the traceability of this PoipoiIdfinancialServiceHeader.

        Identification of partners involved in exchange from the merchant to the issuer, with the relative timestamp of their exchanges.  # noqa: E501

        :param traceability: The traceability of this PoipoiIdfinancialServiceHeader.  # noqa: E501
        :type: object
        """

        self._traceability = traceability

    @property
    def exchange_identification(self):
        """Gets the exchange_identification of this PoipoiIdfinancialServiceHeader.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The exchange_identification of this PoipoiIdfinancialServiceHeader.  # noqa: E501
        :rtype: object
        """
        return self._exchange_identification

    @exchange_identification.setter
    def exchange_identification(self, exchange_identification):
        """Sets the exchange_identification of this PoipoiIdfinancialServiceHeader.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param exchange_identification: The exchange_identification of this PoipoiIdfinancialServiceHeader.  # noqa: E501
        :type: object
        """
        if exchange_identification is None:
            raise ValueError("Invalid value for `exchange_identification`, must not be `None`")  # noqa: E501

        self._exchange_identification = exchange_identification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceHeader, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceHeader):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
