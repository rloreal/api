# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_of_signature': 'object',
        'mandate_identification': 'object',
        'mandate_image': 'object'
    }

    attribute_map = {
        'date_of_signature': 'DateOfSignature',
        'mandate_identification': 'MandateIdentification',
        'mandate_image': 'MandateImage'
    }

    def __init__(self, date_of_signature=None, mandate_identification=None, mandate_image=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation - a model defined in Swagger"""  # noqa: E501
        self._date_of_signature = None
        self._mandate_identification = None
        self._mandate_image = None
        self.discriminator = None
        if date_of_signature is not None:
            self.date_of_signature = date_of_signature
        self.mandate_identification = mandate_identification
        if mandate_image is not None:
            self.mandate_image = mandate_image

    @property
    def date_of_signature(self):
        """Gets the date_of_signature of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation.  # noqa: E501

        A particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format. This representation is defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.<br/>  # noqa: E501

        :return: The date_of_signature of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation.  # noqa: E501
        :rtype: object
        """
        return self._date_of_signature

    @date_of_signature.setter
    def date_of_signature(self, date_of_signature):
        """Sets the date_of_signature of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation.

        A particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format. This representation is defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601.<br/>  # noqa: E501

        :param date_of_signature: The date_of_signature of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation.  # noqa: E501
        :type: object
        """

        self._date_of_signature = date_of_signature

    @property
    def mandate_identification(self):
        """Gets the mandate_identification of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The mandate_identification of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation.  # noqa: E501
        :rtype: object
        """
        return self._mandate_identification

    @mandate_identification.setter
    def mandate_identification(self, mandate_identification):
        """Sets the mandate_identification of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param mandate_identification: The mandate_identification of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation.  # noqa: E501
        :type: object
        """
        if mandate_identification is None:
            raise ValueError("Invalid value for `mandate_identification`, must not be `None`")  # noqa: E501

        self._mandate_identification = mandate_identification

    @property
    def mandate_image(self):
        """Gets the mandate_image of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation.  # noqa: E501

        Binary data of 2MB maximum.<br/>  # noqa: E501

        :return: The mandate_image of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation.  # noqa: E501
        :rtype: object
        """
        return self._mandate_image

    @mandate_image.setter
    def mandate_image(self, mandate_image):
        """Sets the mandate_image of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation.

        Binary data of 2MB maximum.<br/>  # noqa: E501

        :param mandate_image: The mandate_image of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation.  # noqa: E501
        :type: object
        """

        self._mandate_image = mandate_image

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
