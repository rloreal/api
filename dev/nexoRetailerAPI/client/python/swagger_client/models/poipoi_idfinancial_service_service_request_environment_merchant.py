# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'common_name': 'object',
        'identification': 'PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification',
        'location_and_contact': 'PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact',
        'location_category': 'object',
        'scheme_data': 'object'
    }

    attribute_map = {
        'common_name': 'CommonName',
        'identification': 'Identification',
        'location_and_contact': 'LocationAndContact',
        'location_category': 'LocationCategory',
        'scheme_data': 'SchemeData'
    }

    def __init__(self, common_name=None, identification=None, location_and_contact=None, location_category=None, scheme_data=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant - a model defined in Swagger"""  # noqa: E501
        self._common_name = None
        self._identification = None
        self._location_and_contact = None
        self._location_category = None
        self._scheme_data = None
        self.discriminator = None
        if common_name is not None:
            self.common_name = common_name
        if identification is not None:
            self.identification = identification
        if location_and_contact is not None:
            self.location_and_contact = location_and_contact
        if location_category is not None:
            self.location_category = location_category
        if scheme_data is not None:
            self.scheme_data = scheme_data

    @property
    def common_name(self):
        """Gets the common_name of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.  # noqa: E501

        Specifies a character string with a maximum length of 70characters.<br/>  # noqa: E501

        :return: The common_name of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.  # noqa: E501
        :rtype: object
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.

        Specifies a character string with a maximum length of 70characters.<br/>  # noqa: E501

        :param common_name: The common_name of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.  # noqa: E501
        :type: object
        """

        self._common_name = common_name

    @property
    def identification(self):
        """Gets the identification of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.  # noqa: E501


        :return: The identification of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.


        :param identification: The identification of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification
        """

        self._identification = identification

    @property
    def location_and_contact(self):
        """Gets the location_and_contact of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.  # noqa: E501


        :return: The location_and_contact of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact
        """
        return self._location_and_contact

    @location_and_contact.setter
    def location_and_contact(self, location_and_contact):
        """Sets the location_and_contact of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.


        :param location_and_contact: The location_and_contact of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact
        """

        self._location_and_contact = location_and_contact

    @property
    def location_category(self):
        """Gets the location_category of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.  # noqa: E501

        Indicates the type of integration of the POI terminal in the sale environment.<br/>- **ABRD: Aboard**  : *Aboard is used when the sale is done in a vehicle (e.g a bus, train, ship, airplane,  taxi, etc).*<br/>- **NMDC: Nomadic**  : *Nomadic is used when the merchant is traveling to different locations (e.g fair or  sport events, home delivery, food truck).*<br/>- **FIXD: PhysicalShop**  : *Fixed location, for example in a shop.*<br/>- **VIRT: VirtualShop**  : *Virtual Shop is used for any ecommerce solution.*<br/>  # noqa: E501

        :return: The location_category of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.  # noqa: E501
        :rtype: object
        """
        return self._location_category

    @location_category.setter
    def location_category(self, location_category):
        """Sets the location_category of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.

        Indicates the type of integration of the POI terminal in the sale environment.<br/>- **ABRD: Aboard**  : *Aboard is used when the sale is done in a vehicle (e.g a bus, train, ship, airplane,  taxi, etc).*<br/>- **NMDC: Nomadic**  : *Nomadic is used when the merchant is traveling to different locations (e.g fair or  sport events, home delivery, food truck).*<br/>- **FIXD: PhysicalShop**  : *Fixed location, for example in a shop.*<br/>- **VIRT: VirtualShop**  : *Virtual Shop is used for any ecommerce solution.*<br/>  # noqa: E501

        :param location_category: The location_category of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.  # noqa: E501
        :type: object
        """

        self._location_category = location_category

    @property
    def scheme_data(self):
        """Gets the scheme_data of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.  # noqa: E501

        Specifies a character string with a maximum length of 140 characters.<br/>  # noqa: E501

        :return: The scheme_data of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.  # noqa: E501
        :rtype: object
        """
        return self._scheme_data

    @scheme_data.setter
    def scheme_data(self, scheme_data):
        """Sets the scheme_data of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.

        Specifies a character string with a maximum length of 140 characters.<br/>  # noqa: E501

        :param scheme_data: The scheme_data of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant.  # noqa: E501
        :type: object
        """

        self._scheme_data = scheme_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestEnvironmentMerchant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
