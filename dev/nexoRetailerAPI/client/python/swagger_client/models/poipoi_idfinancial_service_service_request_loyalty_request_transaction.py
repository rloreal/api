# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'object',
        'loyalty_transaction_type': 'object',
        'original_poi_transaction': 'PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransaction',
        'sale_item': 'object',
        'sale_transaction_identification': 'PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification',
        'total_amount': 'object'
    }

    attribute_map = {
        'currency': 'Currency',
        'loyalty_transaction_type': 'LoyaltyTransactionType',
        'original_poi_transaction': 'OriginalPOITransaction',
        'sale_item': 'SaleItem',
        'sale_transaction_identification': 'SaleTransactionIdentification',
        'total_amount': 'TotalAmount'
    }

    def __init__(self, currency=None, loyalty_transaction_type=None, original_poi_transaction=None, sale_item=None, sale_transaction_identification=None, total_amount=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction - a model defined in Swagger"""  # noqa: E501
        self._currency = None
        self._loyalty_transaction_type = None
        self._original_poi_transaction = None
        self._sale_item = None
        self._sale_transaction_identification = None
        self._total_amount = None
        self.discriminator = None
        if currency is not None:
            self.currency = currency
        self.loyalty_transaction_type = loyalty_transaction_type
        if original_poi_transaction is not None:
            self.original_poi_transaction = original_poi_transaction
        if sale_item is not None:
            self.sale_item = sale_item
        if sale_transaction_identification is not None:
            self.sale_transaction_identification = sale_transaction_identification
        if total_amount is not None:
            self.total_amount = total_amount

    @property
    def currency(self):
        """Gets the currency of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501

        A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".<br/>  # noqa: E501

        :return: The currency of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501
        :rtype: object
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.

        A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".<br/>  # noqa: E501

        :param currency: The currency of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501
        :type: object
        """

        self._currency = currency

    @property
    def loyalty_transaction_type(self):
        """Gets the loyalty_transaction_type of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501

        Type of loyalty transaction.<br/>- **AWRD: Award**  : *Direct or payment related award on a loyalty account. Award alone, award associated to a payment (may be with an additional award alone), award because of  a payment resulting on rebates.*<br/>- **AWRR: AwardRefund**  : *Refund of a loyalty award transaction.*<br/>- **REBR: RebateRefund**  : *Refund of a loyalty rebate transaction.*<br/>- **REBA: Rebate**  : *Rebate on a total amount, sale item amount, or sale items.*<br/>- **REDE: Redemption**  : *Redemption on a loyalty account.*<br/>- **REDR: RedemptionRefund**  : *Refund of a loyalty redemption transaction.*<br/>  # noqa: E501

        :return: The loyalty_transaction_type of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501
        :rtype: object
        """
        return self._loyalty_transaction_type

    @loyalty_transaction_type.setter
    def loyalty_transaction_type(self, loyalty_transaction_type):
        """Sets the loyalty_transaction_type of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.

        Type of loyalty transaction.<br/>- **AWRD: Award**  : *Direct or payment related award on a loyalty account. Award alone, award associated to a payment (may be with an additional award alone), award because of  a payment resulting on rebates.*<br/>- **AWRR: AwardRefund**  : *Refund of a loyalty award transaction.*<br/>- **REBR: RebateRefund**  : *Refund of a loyalty rebate transaction.*<br/>- **REBA: Rebate**  : *Rebate on a total amount, sale item amount, or sale items.*<br/>- **REDE: Redemption**  : *Redemption on a loyalty account.*<br/>- **REDR: RedemptionRefund**  : *Refund of a loyalty redemption transaction.*<br/>  # noqa: E501

        :param loyalty_transaction_type: The loyalty_transaction_type of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501
        :type: object
        """
        if loyalty_transaction_type is None:
            raise ValueError("Invalid value for `loyalty_transaction_type`, must not be `None`")  # noqa: E501

        self._loyalty_transaction_type = loyalty_transaction_type

    @property
    def original_poi_transaction(self):
        """Gets the original_poi_transaction of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501


        :return: The original_poi_transaction of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransaction
        """
        return self._original_poi_transaction

    @original_poi_transaction.setter
    def original_poi_transaction(self, original_poi_transaction):
        """Sets the original_poi_transaction of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.


        :param original_poi_transaction: The original_poi_transaction of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransaction
        """

        self._original_poi_transaction = original_poi_transaction

    @property
    def sale_item(self):
        """Gets the sale_item of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501

        Item purchased with the transaction.  # noqa: E501

        :return: The sale_item of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501
        :rtype: object
        """
        return self._sale_item

    @sale_item.setter
    def sale_item(self, sale_item):
        """Sets the sale_item of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.

        Item purchased with the transaction.  # noqa: E501

        :param sale_item: The sale_item of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501
        :type: object
        """

        self._sale_item = sale_item

    @property
    def sale_transaction_identification(self):
        """Gets the sale_transaction_identification of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501


        :return: The sale_transaction_identification of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification
        """
        return self._sale_transaction_identification

    @sale_transaction_identification.setter
    def sale_transaction_identification(self, sale_transaction_identification):
        """Sets the sale_transaction_identification of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.


        :param sale_transaction_identification: The sale_transaction_identification of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification
        """

        self._sale_transaction_identification = sale_transaction_identification

    @property
    def total_amount(self):
        """Gets the total_amount of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :return: The total_amount of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501
        :rtype: object
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :param total_amount: The total_amount of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction.  # noqa: E501
        :type: object
        """

        self._total_amount = total_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
