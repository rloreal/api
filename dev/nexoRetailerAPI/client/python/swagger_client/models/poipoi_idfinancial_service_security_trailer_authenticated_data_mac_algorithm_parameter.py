# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithmParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'byte_padding': 'object',
        'initialisation_vector': 'object'
    }

    attribute_map = {
        'byte_padding': 'BytePadding',
        'initialisation_vector': 'InitialisationVector'
    }

    def __init__(self, byte_padding=None, initialisation_vector=None):  # noqa: E501
        """PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithmParameter - a model defined in Swagger"""  # noqa: E501
        self._byte_padding = None
        self._initialisation_vector = None
        self.discriminator = None
        if byte_padding is not None:
            self.byte_padding = byte_padding
        if initialisation_vector is not None:
            self.initialisation_vector = initialisation_vector

    @property
    def byte_padding(self):
        """Gets the byte_padding of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithmParameter.  # noqa: E501

        Byte padding for a cypher block chaining mode encryption, if the padding is not implicit.<br/>- **LNGT: LengthPadding**  : *Message to encrypt is completed by a byte value containing the total number of added bytes.*<br/>- **NUL8: Null80Padding**  : *Message to encrypt is completed by one bit of value 1, followed by null bits until the encryption block length is reached.*<br/>- **NULG: NullLengthPadding**  : *Message to encrypt is completed by null byte values, the last byte containing the total number of added bytes.*<br/>- **NULL: NullPadding**  : *Message to encrypt is completed by null bytes.*<br/>- **RAND: RandomPadding**  : *Message to encrypt is completed by random value, the last byte containing the total number of added bytes.*<br/>  # noqa: E501

        :return: The byte_padding of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithmParameter.  # noqa: E501
        :rtype: object
        """
        return self._byte_padding

    @byte_padding.setter
    def byte_padding(self, byte_padding):
        """Sets the byte_padding of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithmParameter.

        Byte padding for a cypher block chaining mode encryption, if the padding is not implicit.<br/>- **LNGT: LengthPadding**  : *Message to encrypt is completed by a byte value containing the total number of added bytes.*<br/>- **NUL8: Null80Padding**  : *Message to encrypt is completed by one bit of value 1, followed by null bits until the encryption block length is reached.*<br/>- **NULG: NullLengthPadding**  : *Message to encrypt is completed by null byte values, the last byte containing the total number of added bytes.*<br/>- **NULL: NullPadding**  : *Message to encrypt is completed by null bytes.*<br/>- **RAND: RandomPadding**  : *Message to encrypt is completed by random value, the last byte containing the total number of added bytes.*<br/>  # noqa: E501

        :param byte_padding: The byte_padding of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithmParameter.  # noqa: E501
        :type: object
        """

        self._byte_padding = byte_padding

    @property
    def initialisation_vector(self):
        """Gets the initialisation_vector of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithmParameter.  # noqa: E501

        Specifies a binary string with a maximum length of 500 binary bytes.<br/>  # noqa: E501

        :return: The initialisation_vector of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithmParameter.  # noqa: E501
        :rtype: object
        """
        return self._initialisation_vector

    @initialisation_vector.setter
    def initialisation_vector(self, initialisation_vector):
        """Sets the initialisation_vector of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithmParameter.

        Specifies a binary string with a maximum length of 500 binary bytes.<br/>  # noqa: E501

        :param initialisation_vector: The initialisation_vector of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithmParameter.  # noqa: E501
        :type: object
        """

        self._initialisation_vector = initialisation_vector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithmParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithmParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
