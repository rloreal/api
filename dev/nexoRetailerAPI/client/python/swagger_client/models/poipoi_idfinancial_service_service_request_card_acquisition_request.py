# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_loyalty_brand': 'object',
        'allowed_payment_brand': 'object',
        'cash_back_flag': 'object',
        'force_customer_selection_flag': 'object',
        'payment_type': 'object',
        'sale_to_acquirer_data': 'object',
        'sale_to_issuer_data': 'object',
        'sale_to_poi_data': 'object',
        'sale_transaction_identification': 'PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification',
        'total_amount': 'object'
    }

    attribute_map = {
        'allowed_loyalty_brand': 'AllowedLoyaltyBrand',
        'allowed_payment_brand': 'AllowedPaymentBrand',
        'cash_back_flag': 'CashBackFlag',
        'force_customer_selection_flag': 'ForceCustomerSelectionFlag',
        'payment_type': 'PaymentType',
        'sale_to_acquirer_data': 'SaleToAcquirerData',
        'sale_to_issuer_data': 'SaleToIssuerData',
        'sale_to_poi_data': 'SaleToPOIData',
        'sale_transaction_identification': 'SaleTransactionIdentification',
        'total_amount': 'TotalAmount'
    }

    def __init__(self, allowed_loyalty_brand=None, allowed_payment_brand=None, cash_back_flag=None, force_customer_selection_flag=None, payment_type=None, sale_to_acquirer_data=None, sale_to_issuer_data=None, sale_to_poi_data=None, sale_transaction_identification=None, total_amount=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest - a model defined in Swagger"""  # noqa: E501
        self._allowed_loyalty_brand = None
        self._allowed_payment_brand = None
        self._cash_back_flag = None
        self._force_customer_selection_flag = None
        self._payment_type = None
        self._sale_to_acquirer_data = None
        self._sale_to_issuer_data = None
        self._sale_to_poi_data = None
        self._sale_transaction_identification = None
        self._total_amount = None
        self.discriminator = None
        if allowed_loyalty_brand is not None:
            self.allowed_loyalty_brand = allowed_loyalty_brand
        if allowed_payment_brand is not None:
            self.allowed_payment_brand = allowed_payment_brand
        if cash_back_flag is not None:
            self.cash_back_flag = cash_back_flag
        if force_customer_selection_flag is not None:
            self.force_customer_selection_flag = force_customer_selection_flag
        if payment_type is not None:
            self.payment_type = payment_type
        if sale_to_acquirer_data is not None:
            self.sale_to_acquirer_data = sale_to_acquirer_data
        if sale_to_issuer_data is not None:
            self.sale_to_issuer_data = sale_to_issuer_data
        if sale_to_poi_data is not None:
            self.sale_to_poi_data = sale_to_poi_data
        if sale_transaction_identification is not None:
            self.sale_transaction_identification = sale_transaction_identification
        if total_amount is not None:
            self.total_amount = total_amount

    @property
    def allowed_loyalty_brand(self):
        """Gets the allowed_loyalty_brand of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501

        Loyalty brands or programs allowed by the Sale System for the loyalty transaction.  # noqa: E501

        :return: The allowed_loyalty_brand of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :rtype: object
        """
        return self._allowed_loyalty_brand

    @allowed_loyalty_brand.setter
    def allowed_loyalty_brand(self, allowed_loyalty_brand):
        """Sets the allowed_loyalty_brand of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.

        Loyalty brands or programs allowed by the Sale System for the loyalty transaction.  # noqa: E501

        :param allowed_loyalty_brand: The allowed_loyalty_brand of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :type: object
        """

        self._allowed_loyalty_brand = allowed_loyalty_brand

    @property
    def allowed_payment_brand(self):
        """Gets the allowed_payment_brand of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501

        Card payment brands allowed by the Sale System for the payment transaction.  # noqa: E501

        :return: The allowed_payment_brand of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :rtype: object
        """
        return self._allowed_payment_brand

    @allowed_payment_brand.setter
    def allowed_payment_brand(self, allowed_payment_brand):
        """Sets the allowed_payment_brand of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.

        Card payment brands allowed by the Sale System for the payment transaction.  # noqa: E501

        :param allowed_payment_brand: The allowed_payment_brand of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :type: object
        """

        self._allowed_payment_brand = allowed_payment_brand

    @property
    def cash_back_flag(self):
        """Gets the cash_back_flag of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501

        A flag indicating a True or False value.<br/>  # noqa: E501

        :return: The cash_back_flag of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :rtype: object
        """
        return self._cash_back_flag

    @cash_back_flag.setter
    def cash_back_flag(self, cash_back_flag):
        """Sets the cash_back_flag of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.

        A flag indicating a True or False value.<br/>  # noqa: E501

        :param cash_back_flag: The cash_back_flag of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :type: object
        """

        self._cash_back_flag = cash_back_flag

    @property
    def force_customer_selection_flag(self):
        """Gets the force_customer_selection_flag of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501

        A flag indicating a True or False value.<br/>  # noqa: E501

        :return: The force_customer_selection_flag of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :rtype: object
        """
        return self._force_customer_selection_flag

    @force_customer_selection_flag.setter
    def force_customer_selection_flag(self, force_customer_selection_flag):
        """Sets the force_customer_selection_flag of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.

        A flag indicating a True or False value.<br/>  # noqa: E501

        :param force_customer_selection_flag: The force_customer_selection_flag of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :type: object
        """

        self._force_customer_selection_flag = force_customer_selection_flag

    @property
    def payment_type(self):
        """Gets the payment_type of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501

        Additional attribute of the service type.<br/>- **CRDP: CardPayment**  : *Card payment.*<br/>- **CSHW: CashAdvance**  : *Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter.*<br/>- **CSHD: CashDeposit**  : *Cash deposit.*<br/>- **IRES: InitialReservation**  : *Initial reservation.*<br/>- **DEFR: DeferredPayment**  : *Deferred payment.*<br/>- **URES: UpdateReservation**  : *Update reservation.*<br/>- **PRES: PaymentReservation**  : *Payment after reservation.*<br/>- **RECP: RecurringPayment**  : *Recurring payment.*<br/>- **INSP: Instalment**  : *Instalment payment.*<br/>- **INSI: IssuerInstalment**  : *Instalment payment transaction performed by the card issuer.*<br/>- **RFND: Refund**  : *Refund transaction.*<br/>- **VCAU: VoiceAuthorisation**  : *Voice authorisation.*<br/>  # noqa: E501

        :return: The payment_type of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :rtype: object
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.

        Additional attribute of the service type.<br/>- **CRDP: CardPayment**  : *Card payment.*<br/>- **CSHW: CashAdvance**  : *Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter.*<br/>- **CSHD: CashDeposit**  : *Cash deposit.*<br/>- **IRES: InitialReservation**  : *Initial reservation.*<br/>- **DEFR: DeferredPayment**  : *Deferred payment.*<br/>- **URES: UpdateReservation**  : *Update reservation.*<br/>- **PRES: PaymentReservation**  : *Payment after reservation.*<br/>- **RECP: RecurringPayment**  : *Recurring payment.*<br/>- **INSP: Instalment**  : *Instalment payment.*<br/>- **INSI: IssuerInstalment**  : *Instalment payment transaction performed by the card issuer.*<br/>- **RFND: Refund**  : *Refund transaction.*<br/>- **VCAU: VoiceAuthorisation**  : *Voice authorisation.*<br/>  # noqa: E501

        :param payment_type: The payment_type of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :type: object
        """

        self._payment_type = payment_type

    @property
    def sale_to_acquirer_data(self):
        """Gets the sale_to_acquirer_data of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501

        Specifies a character string with a maximum length of 70characters.<br/>  # noqa: E501

        :return: The sale_to_acquirer_data of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :rtype: object
        """
        return self._sale_to_acquirer_data

    @sale_to_acquirer_data.setter
    def sale_to_acquirer_data(self, sale_to_acquirer_data):
        """Sets the sale_to_acquirer_data of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.

        Specifies a character string with a maximum length of 70characters.<br/>  # noqa: E501

        :param sale_to_acquirer_data: The sale_to_acquirer_data of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :type: object
        """

        self._sale_to_acquirer_data = sale_to_acquirer_data

    @property
    def sale_to_issuer_data(self):
        """Gets the sale_to_issuer_data of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501

        Specifies a character string with a maximum length of 70characters.<br/>  # noqa: E501

        :return: The sale_to_issuer_data of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :rtype: object
        """
        return self._sale_to_issuer_data

    @sale_to_issuer_data.setter
    def sale_to_issuer_data(self, sale_to_issuer_data):
        """Sets the sale_to_issuer_data of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.

        Specifies a character string with a maximum length of 70characters.<br/>  # noqa: E501

        :param sale_to_issuer_data: The sale_to_issuer_data of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :type: object
        """

        self._sale_to_issuer_data = sale_to_issuer_data

    @property
    def sale_to_poi_data(self):
        """Gets the sale_to_poi_data of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501

        Specifies a character string with a maximum length of 70characters.<br/>  # noqa: E501

        :return: The sale_to_poi_data of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :rtype: object
        """
        return self._sale_to_poi_data

    @sale_to_poi_data.setter
    def sale_to_poi_data(self, sale_to_poi_data):
        """Sets the sale_to_poi_data of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.

        Specifies a character string with a maximum length of 70characters.<br/>  # noqa: E501

        :param sale_to_poi_data: The sale_to_poi_data of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :type: object
        """

        self._sale_to_poi_data = sale_to_poi_data

    @property
    def sale_transaction_identification(self):
        """Gets the sale_transaction_identification of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501


        :return: The sale_transaction_identification of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification
        """
        return self._sale_transaction_identification

    @sale_transaction_identification.setter
    def sale_transaction_identification(self, sale_transaction_identification):
        """Sets the sale_transaction_identification of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.


        :param sale_transaction_identification: The sale_transaction_identification of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification
        """

        self._sale_transaction_identification = sale_transaction_identification

    @property
    def total_amount(self):
        """Gets the total_amount of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :return: The total_amount of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :rtype: object
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :param total_amount: The total_amount of this PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest.  # noqa: E501
        :type: object
        """

        self._total_amount = total_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestCardAcquisitionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
