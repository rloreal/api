# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_type': 'object',
        'enveloped_data': 'PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardDataEnvelopedData'
    }

    attribute_map = {
        'content_type': 'ContentType',
        'enveloped_data': 'EnvelopedData'
    }

    def __init__(self, content_type=None, enveloped_data=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData - a model defined in Swagger"""  # noqa: E501
        self._content_type = None
        self._enveloped_data = None
        self.discriminator = None
        self.content_type = content_type
        self.enveloped_data = enveloped_data

    @property
    def content_type(self):
        """Gets the content_type of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData.  # noqa: E501

        Identification of the type of a Cryptographic Message Syntax (CMS) data structure.<br/>- **DATA: PlainData**  : *Generic, non cryptographic, or unqualified data content - (ASN.1 Object Identifier: id-data).*<br/>- **SIGN: SignedData**  : *Digital signature - (ASN.1 Object Identifier: id-signedData).*<br/>- **EVLP: EnvelopedData**  : *Encrypted data, with encryption key - (ASN.1 Object Identifier: id-envelopedData).*<br/>- **DGST: DigestedData**  : *Message digest - (ASN.1 Object Identifier: id-digestedData).*<br/>- **AUTH: AuthenticatedData**  : *MAC (Message Authentication Code), with encryption key - (ASN.1 Object Identifier: id-ct-authData).*<br/>  # noqa: E501

        :return: The content_type of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData.  # noqa: E501
        :rtype: object
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData.

        Identification of the type of a Cryptographic Message Syntax (CMS) data structure.<br/>- **DATA: PlainData**  : *Generic, non cryptographic, or unqualified data content - (ASN.1 Object Identifier: id-data).*<br/>- **SIGN: SignedData**  : *Digital signature - (ASN.1 Object Identifier: id-signedData).*<br/>- **EVLP: EnvelopedData**  : *Encrypted data, with encryption key - (ASN.1 Object Identifier: id-envelopedData).*<br/>- **DGST: DigestedData**  : *Message digest - (ASN.1 Object Identifier: id-digestedData).*<br/>- **AUTH: AuthenticatedData**  : *MAC (Message Authentication Code), with encryption key - (ASN.1 Object Identifier: id-ct-authData).*<br/>  # noqa: E501

        :param content_type: The content_type of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData.  # noqa: E501
        :type: object
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501

        self._content_type = content_type

    @property
    def enveloped_data(self):
        """Gets the enveloped_data of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData.  # noqa: E501


        :return: The enveloped_data of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardDataEnvelopedData
        """
        return self._enveloped_data

    @enveloped_data.setter
    def enveloped_data(self, enveloped_data):
        """Sets the enveloped_data of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData.


        :param enveloped_data: The enveloped_data of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardDataEnvelopedData
        """
        if enveloped_data is None:
            raise ValueError("Invalid value for `enveloped_data`, must not be `None`")  # noqa: E501

        self._enveloped_data = enveloped_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
