# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mac': 'object',
        'mac_algorithm': 'PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithm',
        'encapsulated_content': 'PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataEncapsulatedContent',
        'recipient': 'object',
        'version': 'object'
    }

    attribute_map = {
        'mac': 'MAC',
        'mac_algorithm': 'MACAlgorithm',
        'encapsulated_content': 'EncapsulatedContent',
        'recipient': 'Recipient',
        'version': 'Version'
    }

    def __init__(self, mac=None, mac_algorithm=None, encapsulated_content=None, recipient=None, version=None):  # noqa: E501
        """PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData - a model defined in Swagger"""  # noqa: E501
        self._mac = None
        self._mac_algorithm = None
        self._encapsulated_content = None
        self._recipient = None
        self._version = None
        self.discriminator = None
        self.mac = mac
        self.mac_algorithm = mac_algorithm
        self.encapsulated_content = encapsulated_content
        self.recipient = recipient
        if version is not None:
            self.version = version

    @property
    def mac(self):
        """Gets the mac of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.  # noqa: E501

        Specifies a binary string with a maximum length of 140 binary bytes.<br/>  # noqa: E501

        :return: The mac of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.  # noqa: E501
        :rtype: object
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.

        Specifies a binary string with a maximum length of 140 binary bytes.<br/>  # noqa: E501

        :param mac: The mac of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.  # noqa: E501
        :type: object
        """
        if mac is None:
            raise ValueError("Invalid value for `mac`, must not be `None`")  # noqa: E501

        self._mac = mac

    @property
    def mac_algorithm(self):
        """Gets the mac_algorithm of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.  # noqa: E501


        :return: The mac_algorithm of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithm
        """
        return self._mac_algorithm

    @mac_algorithm.setter
    def mac_algorithm(self, mac_algorithm):
        """Sets the mac_algorithm of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.


        :param mac_algorithm: The mac_algorithm of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.  # noqa: E501
        :type: PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithm
        """
        if mac_algorithm is None:
            raise ValueError("Invalid value for `mac_algorithm`, must not be `None`")  # noqa: E501

        self._mac_algorithm = mac_algorithm

    @property
    def encapsulated_content(self):
        """Gets the encapsulated_content of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.  # noqa: E501


        :return: The encapsulated_content of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataEncapsulatedContent
        """
        return self._encapsulated_content

    @encapsulated_content.setter
    def encapsulated_content(self, encapsulated_content):
        """Sets the encapsulated_content of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.


        :param encapsulated_content: The encapsulated_content of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.  # noqa: E501
        :type: PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataEncapsulatedContent
        """
        if encapsulated_content is None:
            raise ValueError("Invalid value for `encapsulated_content`, must not be `None`")  # noqa: E501

        self._encapsulated_content = encapsulated_content

    @property
    def recipient(self):
        """Gets the recipient of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.  # noqa: E501

        Session key or protection key identification used by the recipient.  # noqa: E501

        :return: The recipient of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.  # noqa: E501
        :rtype: object
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.

        Session key or protection key identification used by the recipient.  # noqa: E501

        :param recipient: The recipient of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.  # noqa: E501
        :type: object
        """
        if recipient is None:
            raise ValueError("Invalid value for `recipient`, must not be `None`")  # noqa: E501

        self._recipient = recipient

    @property
    def version(self):
        """Gets the version of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.  # noqa: E501

        Number of objects represented as an integer.<br/>  # noqa: E501

        :return: The version of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.  # noqa: E501
        :rtype: object
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.

        Number of objects represented as an integer.<br/>  # noqa: E501

        :param version: The version of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData.  # noqa: E501
        :type: object
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceSecurityTrailerAuthenticatedData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
