# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tms_contact_date_time': 'object',
        'tms_contact_level': 'object',
        'tms_identification': 'object'
    }

    attribute_map = {
        'tms_contact_date_time': 'TMSContactDateTime',
        'tms_contact_level': 'TMSContactLevel',
        'tms_identification': 'TMSIdentification'
    }

    def __init__(self, tms_contact_date_time=None, tms_contact_level=None, tms_identification=None):  # noqa: E501
        """SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger - a model defined in Swagger"""  # noqa: E501
        self._tms_contact_date_time = None
        self._tms_contact_level = None
        self._tms_identification = None
        self.discriminator = None
        if tms_contact_date_time is not None:
            self.tms_contact_date_time = tms_contact_date_time
        self.tms_contact_level = tms_contact_level
        if tms_identification is not None:
            self.tms_identification = tms_identification

    @property
    def tms_contact_date_time(self):
        """Gets the tms_contact_date_time of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger.  # noqa: E501

        A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. Note on the time format: 1) beginning / end of calendar day 00:00:00 = the beginning of a calendar day 24:00:00 = the end of a calendar day 2) fractions of second in time format Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.<br/>  # noqa: E501

        :return: The tms_contact_date_time of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger.  # noqa: E501
        :rtype: object
        """
        return self._tms_contact_date_time

    @tms_contact_date_time.setter
    def tms_contact_date_time(self, tms_contact_date_time):
        """Sets the tms_contact_date_time of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger.

        A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. Note on the time format: 1) beginning / end of calendar day 00:00:00 = the beginning of a calendar day 24:00:00 = the end of a calendar day 2) fractions of second in time format Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.<br/>  # noqa: E501

        :param tms_contact_date_time: The tms_contact_date_time of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger.  # noqa: E501
        :type: object
        """

        self._tms_contact_date_time = tms_contact_date_time

    @property
    def tms_contact_level(self):
        """Gets the tms_contact_level of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger.  # noqa: E501

        Level of urgency in contacting the terminal management system.<br/>- **CRIT: Critical**  : *Terminal management system has to be contacted before the next transaction.*<br/>- **ASAP: AsSoonAsPossible**  : *Terminal management system has to be contacted as soon as possible (for example after reconciliation).*<br/>- **DTIM: DateTime**  : *Terminal management system has to be contacted at the date and time provided.*<br/>  # noqa: E501

        :return: The tms_contact_level of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger.  # noqa: E501
        :rtype: object
        """
        return self._tms_contact_level

    @tms_contact_level.setter
    def tms_contact_level(self, tms_contact_level):
        """Sets the tms_contact_level of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger.

        Level of urgency in contacting the terminal management system.<br/>- **CRIT: Critical**  : *Terminal management system has to be contacted before the next transaction.*<br/>- **ASAP: AsSoonAsPossible**  : *Terminal management system has to be contacted as soon as possible (for example after reconciliation).*<br/>- **DTIM: DateTime**  : *Terminal management system has to be contacted at the date and time provided.*<br/>  # noqa: E501

        :param tms_contact_level: The tms_contact_level of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger.  # noqa: E501
        :type: object
        """
        if tms_contact_level is None:
            raise ValueError("Invalid value for `tms_contact_level`, must not be `None`")  # noqa: E501

        self._tms_contact_level = tms_contact_level

    @property
    def tms_identification(self):
        """Gets the tms_identification of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The tms_identification of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger.  # noqa: E501
        :rtype: object
        """
        return self._tms_identification

    @tms_identification.setter
    def tms_identification(self, tms_identification):
        """Sets the tms_identification of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param tms_identification: The tms_identification of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger.  # noqa: E501
        :type: object
        """

        self._tms_identification = tms_identification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
