# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_service': 'object',
        'customer_language': 'object',
        'customer_order': 'object',
        'image_captured_signature': 'SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultImageCapturedSignature',
        'merchant_override_flag': 'object',
        'online_flag': 'object',
        'protected_captured_signature': 'PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData',
        'requested_transaction': 'PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransaction',
        'service_attribute': 'object',
        'transaction_response': 'SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse',
        'transaction_type': 'object'
    }

    attribute_map = {
        'additional_service': 'AdditionalService',
        'customer_language': 'CustomerLanguage',
        'customer_order': 'CustomerOrder',
        'image_captured_signature': 'ImageCapturedSignature',
        'merchant_override_flag': 'MerchantOverrideFlag',
        'online_flag': 'OnlineFlag',
        'protected_captured_signature': 'ProtectedCapturedSignature',
        'requested_transaction': 'RequestedTransaction',
        'service_attribute': 'ServiceAttribute',
        'transaction_response': 'TransactionResponse',
        'transaction_type': 'TransactionType'
    }

    def __init__(self, additional_service=None, customer_language=None, customer_order=None, image_captured_signature=None, merchant_override_flag=None, online_flag=None, protected_captured_signature=None, requested_transaction=None, service_attribute=None, transaction_response=None, transaction_type=None):  # noqa: E501
        """SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult - a model defined in Swagger"""  # noqa: E501
        self._additional_service = None
        self._customer_language = None
        self._customer_order = None
        self._image_captured_signature = None
        self._merchant_override_flag = None
        self._online_flag = None
        self._protected_captured_signature = None
        self._requested_transaction = None
        self._service_attribute = None
        self._transaction_response = None
        self._transaction_type = None
        self.discriminator = None
        if additional_service is not None:
            self.additional_service = additional_service
        if customer_language is not None:
            self.customer_language = customer_language
        if customer_order is not None:
            self.customer_order = customer_order
        if image_captured_signature is not None:
            self.image_captured_signature = image_captured_signature
        if merchant_override_flag is not None:
            self.merchant_override_flag = merchant_override_flag
        if online_flag is not None:
            self.online_flag = online_flag
        if protected_captured_signature is not None:
            self.protected_captured_signature = protected_captured_signature
        if requested_transaction is not None:
            self.requested_transaction = requested_transaction
        if service_attribute is not None:
            self.service_attribute = service_attribute
        if transaction_response is not None:
            self.transaction_response = transaction_response
        self.transaction_type = transaction_type

    @property
    def additional_service(self):
        """Gets the additional_service of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501

        Service provided by the card payment transaction, in addition to the main service.  # noqa: E501

        :return: The additional_service of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :rtype: object
        """
        return self._additional_service

    @additional_service.setter
    def additional_service(self, additional_service):
        """Sets the additional_service of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.

        Service provided by the card payment transaction, in addition to the main service.  # noqa: E501

        :param additional_service: The additional_service of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :type: object
        """

        self._additional_service = additional_service

    @property
    def customer_language(self):
        """Gets the customer_language of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501

        Specifies a language.<br/>  # noqa: E501

        :return: The customer_language of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :rtype: object
        """
        return self._customer_language

    @customer_language.setter
    def customer_language(self, customer_language):
        """Sets the customer_language of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.

        Specifies a language.<br/>  # noqa: E501

        :param customer_language: The customer_language of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :type: object
        """

        self._customer_language = customer_language

    @property
    def customer_order(self):
        """Gets the customer_order of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501

        Customer order attached to a customer, recorded in the POI system.  # noqa: E501

        :return: The customer_order of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :rtype: object
        """
        return self._customer_order

    @customer_order.setter
    def customer_order(self, customer_order):
        """Sets the customer_order of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.

        Customer order attached to a customer, recorded in the POI system.  # noqa: E501

        :param customer_order: The customer_order of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :type: object
        """

        self._customer_order = customer_order

    @property
    def image_captured_signature(self):
        """Gets the image_captured_signature of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501


        :return: The image_captured_signature of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :rtype: SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultImageCapturedSignature
        """
        return self._image_captured_signature

    @image_captured_signature.setter
    def image_captured_signature(self, image_captured_signature):
        """Sets the image_captured_signature of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.


        :param image_captured_signature: The image_captured_signature of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :type: SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultImageCapturedSignature
        """

        self._image_captured_signature = image_captured_signature

    @property
    def merchant_override_flag(self):
        """Gets the merchant_override_flag of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501

        A flag indicating a True or False value.<br/>  # noqa: E501

        :return: The merchant_override_flag of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :rtype: object
        """
        return self._merchant_override_flag

    @merchant_override_flag.setter
    def merchant_override_flag(self, merchant_override_flag):
        """Sets the merchant_override_flag of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.

        A flag indicating a True or False value.<br/>  # noqa: E501

        :param merchant_override_flag: The merchant_override_flag of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :type: object
        """

        self._merchant_override_flag = merchant_override_flag

    @property
    def online_flag(self):
        """Gets the online_flag of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501

        A flag indicating a True or False value.<br/>  # noqa: E501

        :return: The online_flag of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :rtype: object
        """
        return self._online_flag

    @online_flag.setter
    def online_flag(self, online_flag):
        """Sets the online_flag of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.

        A flag indicating a True or False value.<br/>  # noqa: E501

        :param online_flag: The online_flag of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :type: object
        """

        self._online_flag = online_flag

    @property
    def protected_captured_signature(self):
        """Gets the protected_captured_signature of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501


        :return: The protected_captured_signature of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData
        """
        return self._protected_captured_signature

    @protected_captured_signature.setter
    def protected_captured_signature(self, protected_captured_signature):
        """Sets the protected_captured_signature of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.


        :param protected_captured_signature: The protected_captured_signature of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData
        """

        self._protected_captured_signature = protected_captured_signature

    @property
    def requested_transaction(self):
        """Gets the requested_transaction of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501


        :return: The requested_transaction of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransaction
        """
        return self._requested_transaction

    @requested_transaction.setter
    def requested_transaction(self, requested_transaction):
        """Sets the requested_transaction of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.


        :param requested_transaction: The requested_transaction of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransaction
        """

        self._requested_transaction = requested_transaction

    @property
    def service_attribute(self):
        """Gets the service_attribute of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501

        Additional attributes of the service provided by the card payment transaction.<br/>- **IRES: InitialReservation**  : *Initial reservation.*<br/>- **URES: UpdateReservation**  : *Update reservation.*<br/>- **PRES: PaymentReservation**  : *Payment after reservation.*<br/>- **ARES: AdditionalPayment**  : *Additional payment after reservation.*<br/>- **FREC: FirstRecurring**  : *Initial recurring payment.*<br/>- **RREC: FollowingRecurring**  : *Repeat recurring payment.*<br/>- **GOPT: GuaranteeOfPayment**  : *Acceptor claims for guarantee of payment.*<br/>  # noqa: E501

        :return: The service_attribute of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :rtype: object
        """
        return self._service_attribute

    @service_attribute.setter
    def service_attribute(self, service_attribute):
        """Sets the service_attribute of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.

        Additional attributes of the service provided by the card payment transaction.<br/>- **IRES: InitialReservation**  : *Initial reservation.*<br/>- **URES: UpdateReservation**  : *Update reservation.*<br/>- **PRES: PaymentReservation**  : *Payment after reservation.*<br/>- **ARES: AdditionalPayment**  : *Additional payment after reservation.*<br/>- **FREC: FirstRecurring**  : *Initial recurring payment.*<br/>- **RREC: FollowingRecurring**  : *Repeat recurring payment.*<br/>- **GOPT: GuaranteeOfPayment**  : *Acceptor claims for guarantee of payment.*<br/>  # noqa: E501

        :param service_attribute: The service_attribute of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :type: object
        """

        self._service_attribute = service_attribute

    @property
    def transaction_response(self):
        """Gets the transaction_response of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501


        :return: The transaction_response of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :rtype: SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse
        """
        return self._transaction_response

    @transaction_response.setter
    def transaction_response(self, transaction_response):
        """Sets the transaction_response of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.


        :param transaction_response: The transaction_response of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :type: SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse
        """

        self._transaction_response = transaction_response

    @property
    def transaction_type(self):
        """Gets the transaction_type of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501

        Main service provided during the card payment transaction.<br/>- **BALC: Balance**  : *Balance enquiry.*<br/>- **CACT: CardActivation**  : *Card activation.*<br/>- **CRDP: CardPayment**  : *Card payment.*<br/>- **CAFH: CardsFundTransferPush**  : *Transfer of funds to a card or an account.*<br/>- **CAVR: CardVerification**  : *Card verification.*<br/>- **CSHW: CashAdvance**  : *Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter.*<br/>- **CSHD: CashDeposit**  : *Cash deposit.*<br/>- **DEFR: DeferredPayment**  : *Deferred payment.*<br/>- **LOAD: Loading**  : *Loading or reloading non-financial account.*<br/>- **ORCR: OriginalCredit**  : *Original credit.*<br/>- **PINC: PINChange**  : *PIN (Personal Identification Number) change.*<br/>- **QUCH: QuasiCash**  : *Quasi-cash.*<br/>- **RFND: Refund**  : *Refund transaction.*<br/>- **RESA: Reservation**  : *Reservation (pre-authorisation).*<br/>- **VALC: ValidityCheck**  : *Card validity check.*<br/>- **UNLD: Unloading**  : *Unloading non-financial account.*<br/>- **CAFT: CardsFundTransfer**  : *Transfer of funds to and/or from a card account.*<br/>- **CAFL: CardsFundTransferPull**  : *Transfer of funds from a card or an account.*<br/>- **CIDD: CardInitiatingDirectDebit**  : *Direct Debit initiated by Card.*<br/>  # noqa: E501

        :return: The transaction_type of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :rtype: object
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.

        Main service provided during the card payment transaction.<br/>- **BALC: Balance**  : *Balance enquiry.*<br/>- **CACT: CardActivation**  : *Card activation.*<br/>- **CRDP: CardPayment**  : *Card payment.*<br/>- **CAFH: CardsFundTransferPush**  : *Transfer of funds to a card or an account.*<br/>- **CAVR: CardVerification**  : *Card verification.*<br/>- **CSHW: CashAdvance**  : *Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter.*<br/>- **CSHD: CashDeposit**  : *Cash deposit.*<br/>- **DEFR: DeferredPayment**  : *Deferred payment.*<br/>- **LOAD: Loading**  : *Loading or reloading non-financial account.*<br/>- **ORCR: OriginalCredit**  : *Original credit.*<br/>- **PINC: PINChange**  : *PIN (Personal Identification Number) change.*<br/>- **QUCH: QuasiCash**  : *Quasi-cash.*<br/>- **RFND: Refund**  : *Refund transaction.*<br/>- **RESA: Reservation**  : *Reservation (pre-authorisation).*<br/>- **VALC: ValidityCheck**  : *Card validity check.*<br/>- **UNLD: Unloading**  : *Unloading non-financial account.*<br/>- **CAFT: CardsFundTransfer**  : *Transfer of funds to and/or from a card account.*<br/>- **CAFL: CardsFundTransferPull**  : *Transfer of funds from a card or an account.*<br/>- **CIDD: CardInitiatingDirectDebit**  : *Direct Debit initiated by Card.*<br/>  # noqa: E501

        :param transaction_type: The transaction_type of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult.  # noqa: E501
        :type: object
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501

        self._transaction_type = transaction_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
