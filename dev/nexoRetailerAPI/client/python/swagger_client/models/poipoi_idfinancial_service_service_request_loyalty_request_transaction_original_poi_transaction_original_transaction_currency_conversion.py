# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionOriginalTransactionCurrencyConversion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conversion_details': 'object',
        'result': 'object',
        'result_reason': 'object'
    }

    attribute_map = {
        'conversion_details': 'ConversionDetails',
        'result': 'Result',
        'result_reason': 'ResultReason'
    }

    def __init__(self, conversion_details=None, result=None, result_reason=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionOriginalTransactionCurrencyConversion - a model defined in Swagger"""  # noqa: E501
        self._conversion_details = None
        self._result = None
        self._result_reason = None
        self.discriminator = None
        if conversion_details is not None:
            self.conversion_details = conversion_details
        self.result = result
        if result_reason is not None:
            self.result_reason = result_reason

    @property
    def conversion_details(self):
        """Gets the conversion_details of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionOriginalTransactionCurrencyConversion.  # noqa: E501

        Information about the conversion of currency.  # noqa: E501

        :return: The conversion_details of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionOriginalTransactionCurrencyConversion.  # noqa: E501
        :rtype: object
        """
        return self._conversion_details

    @conversion_details.setter
    def conversion_details(self, conversion_details):
        """Sets the conversion_details of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionOriginalTransactionCurrencyConversion.

        Information about the conversion of currency.  # noqa: E501

        :param conversion_details: The conversion_details of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionOriginalTransactionCurrencyConversion.  # noqa: E501
        :type: object
        """

        self._conversion_details = conversion_details

    @property
    def result(self):
        """Gets the result of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionOriginalTransactionCurrencyConversion.  # noqa: E501

        Result of a requested currency conversion.<br/>- **ODCC: Allowed**  : *Dynamic currency conversion may be offered to the cardholder.*<br/>- **DCCA: Assumed**  : *Transaction authorised with dynamic currency conversion.*<br/>- **ICRD: InvalidCard**  : *The card is not valid for dynamic currency conversion.*<br/>- **IMER: InvalidMerchant**  : *The card acceptor has not been recognised.*<br/>- **IPRD: InvalidProduct**  : *Dynamic currency conversion service cannot be offered for this card product.*<br/>- **IRAT: NoRate**  : *Exchange rates are not available.*<br/>- **NDCC: NotAvailable**  : *Dynamic currency conversion is not available for other reason.*<br/>- **REST: Restriction**  : *Conversion accepted for the requested amount exclusively.*<br/>- **CATG: Catalogue**  : *Conversion accepted for a range of amounts.*<br/>  # noqa: E501

        :return: The result of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionOriginalTransactionCurrencyConversion.  # noqa: E501
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionOriginalTransactionCurrencyConversion.

        Result of a requested currency conversion.<br/>- **ODCC: Allowed**  : *Dynamic currency conversion may be offered to the cardholder.*<br/>- **DCCA: Assumed**  : *Transaction authorised with dynamic currency conversion.*<br/>- **ICRD: InvalidCard**  : *The card is not valid for dynamic currency conversion.*<br/>- **IMER: InvalidMerchant**  : *The card acceptor has not been recognised.*<br/>- **IPRD: InvalidProduct**  : *Dynamic currency conversion service cannot be offered for this card product.*<br/>- **IRAT: NoRate**  : *Exchange rates are not available.*<br/>- **NDCC: NotAvailable**  : *Dynamic currency conversion is not available for other reason.*<br/>- **REST: Restriction**  : *Conversion accepted for the requested amount exclusively.*<br/>- **CATG: Catalogue**  : *Conversion accepted for a range of amounts.*<br/>  # noqa: E501

        :param result: The result of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionOriginalTransactionCurrencyConversion.  # noqa: E501
        :type: object
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def result_reason(self):
        """Gets the result_reason of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionOriginalTransactionCurrencyConversion.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The result_reason of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionOriginalTransactionCurrencyConversion.  # noqa: E501
        :rtype: object
        """
        return self._result_reason

    @result_reason.setter
    def result_reason(self, result_reason):
        """Sets the result_reason of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionOriginalTransactionCurrencyConversion.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param result_reason: The result_reason of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionOriginalTransactionCurrencyConversion.  # noqa: E501
        :type: object
        """

        self._result_reason = result_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionOriginalTransactionCurrencyConversion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionOriginalTransactionCurrencyConversion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
