# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestPaymentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loyalty_data': 'object',
        'payment_transaction': 'PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransaction'
    }

    attribute_map = {
        'loyalty_data': 'LoyaltyData',
        'payment_transaction': 'PaymentTransaction'
    }

    def __init__(self, loyalty_data=None, payment_transaction=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestPaymentRequest - a model defined in Swagger"""  # noqa: E501
        self._loyalty_data = None
        self._payment_transaction = None
        self.discriminator = None
        if loyalty_data is not None:
            self.loyalty_data = loyalty_data
        if payment_transaction is not None:
            self.payment_transaction = payment_transaction

    @property
    def loyalty_data(self):
        """Gets the loyalty_data of this PoipoiIdfinancialServiceServiceRequestPaymentRequest.  # noqa: E501

        Data linked to card loyalty during payment.  # noqa: E501

        :return: The loyalty_data of this PoipoiIdfinancialServiceServiceRequestPaymentRequest.  # noqa: E501
        :rtype: object
        """
        return self._loyalty_data

    @loyalty_data.setter
    def loyalty_data(self, loyalty_data):
        """Sets the loyalty_data of this PoipoiIdfinancialServiceServiceRequestPaymentRequest.

        Data linked to card loyalty during payment.  # noqa: E501

        :param loyalty_data: The loyalty_data of this PoipoiIdfinancialServiceServiceRequestPaymentRequest.  # noqa: E501
        :type: object
        """

        self._loyalty_data = loyalty_data

    @property
    def payment_transaction(self):
        """Gets the payment_transaction of this PoipoiIdfinancialServiceServiceRequestPaymentRequest.  # noqa: E501


        :return: The payment_transaction of this PoipoiIdfinancialServiceServiceRequestPaymentRequest.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransaction
        """
        return self._payment_transaction

    @payment_transaction.setter
    def payment_transaction(self, payment_transaction):
        """Sets the payment_transaction of this PoipoiIdfinancialServiceServiceRequestPaymentRequest.


        :param payment_transaction: The payment_transaction of this PoipoiIdfinancialServiceServiceRequestPaymentRequest.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransaction
        """

        self._payment_transaction = payment_transaction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestPaymentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestPaymentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
