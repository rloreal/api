# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creditor_identification': 'PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentification',
        'debtor_identification': 'PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextDebtorIdentification',
        'mandate_related_information': 'PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation'
    }

    attribute_map = {
        'creditor_identification': 'CreditorIdentification',
        'debtor_identification': 'DebtorIdentification',
        'mandate_related_information': 'MandateRelatedInformation'
    }

    def __init__(self, creditor_identification=None, debtor_identification=None, mandate_related_information=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext - a model defined in Swagger"""  # noqa: E501
        self._creditor_identification = None
        self._debtor_identification = None
        self._mandate_related_information = None
        self.discriminator = None
        self.creditor_identification = creditor_identification
        if debtor_identification is not None:
            self.debtor_identification = debtor_identification
        self.mandate_related_information = mandate_related_information

    @property
    def creditor_identification(self):
        """Gets the creditor_identification of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext.  # noqa: E501


        :return: The creditor_identification of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentification
        """
        return self._creditor_identification

    @creditor_identification.setter
    def creditor_identification(self, creditor_identification):
        """Sets the creditor_identification of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext.


        :param creditor_identification: The creditor_identification of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentification
        """
        if creditor_identification is None:
            raise ValueError("Invalid value for `creditor_identification`, must not be `None`")  # noqa: E501

        self._creditor_identification = creditor_identification

    @property
    def debtor_identification(self):
        """Gets the debtor_identification of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext.  # noqa: E501


        :return: The debtor_identification of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextDebtorIdentification
        """
        return self._debtor_identification

    @debtor_identification.setter
    def debtor_identification(self, debtor_identification):
        """Sets the debtor_identification of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext.


        :param debtor_identification: The debtor_identification of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextDebtorIdentification
        """

        self._debtor_identification = debtor_identification

    @property
    def mandate_related_information(self):
        """Gets the mandate_related_information of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext.  # noqa: E501


        :return: The mandate_related_information of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation
        """
        return self._mandate_related_information

    @mandate_related_information.setter
    def mandate_related_information(self, mandate_related_information):
        """Sets the mandate_related_information of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext.


        :param mandate_related_information: The mandate_related_information of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextMandateRelatedInformation
        """
        if mandate_related_information is None:
            raise ValueError("Invalid value for `mandate_related_information`, must not be `None`")  # noqa: E501

        self._mandate_related_information = mandate_related_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestContextDirectDebitContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
