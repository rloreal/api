# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestContextPaymentContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attendance_context': 'object',
        'attendant_language': 'object',
        'attendant_message_capable': 'object',
        'business_area': 'object',
        'card_data_entry_mode': 'object',
        'card_present': 'object',
        'cardholder_present': 'object',
        'fallback_indicator': 'object',
        'on_line_context': 'object',
        'supported_option': 'object',
        'transaction_channel': 'object',
        'transaction_environment': 'object'
    }

    attribute_map = {
        'attendance_context': 'AttendanceContext',
        'attendant_language': 'AttendantLanguage',
        'attendant_message_capable': 'AttendantMessageCapable',
        'business_area': 'BusinessArea',
        'card_data_entry_mode': 'CardDataEntryMode',
        'card_present': 'CardPresent',
        'cardholder_present': 'CardholderPresent',
        'fallback_indicator': 'FallbackIndicator',
        'on_line_context': 'OnLineContext',
        'supported_option': 'SupportedOption',
        'transaction_channel': 'TransactionChannel',
        'transaction_environment': 'TransactionEnvironment'
    }

    def __init__(self, attendance_context=None, attendant_language=None, attendant_message_capable=None, business_area=None, card_data_entry_mode=None, card_present=None, cardholder_present=None, fallback_indicator=None, on_line_context=None, supported_option=None, transaction_channel=None, transaction_environment=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestContextPaymentContext - a model defined in Swagger"""  # noqa: E501
        self._attendance_context = None
        self._attendant_language = None
        self._attendant_message_capable = None
        self._business_area = None
        self._card_data_entry_mode = None
        self._card_present = None
        self._cardholder_present = None
        self._fallback_indicator = None
        self._on_line_context = None
        self._supported_option = None
        self._transaction_channel = None
        self._transaction_environment = None
        self.discriminator = None
        if attendance_context is not None:
            self.attendance_context = attendance_context
        if attendant_language is not None:
            self.attendant_language = attendant_language
        if attendant_message_capable is not None:
            self.attendant_message_capable = attendant_message_capable
        if business_area is not None:
            self.business_area = business_area
        if card_data_entry_mode is not None:
            self.card_data_entry_mode = card_data_entry_mode
        if card_present is not None:
            self.card_present = card_present
        if cardholder_present is not None:
            self.cardholder_present = cardholder_present
        if fallback_indicator is not None:
            self.fallback_indicator = fallback_indicator
        if on_line_context is not None:
            self.on_line_context = on_line_context
        if supported_option is not None:
            self.supported_option = supported_option
        if transaction_channel is not None:
            self.transaction_channel = transaction_channel
        if transaction_environment is not None:
            self.transaction_environment = transaction_environment

    @property
    def attendance_context(self):
        """Gets the attendance_context of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501

        Human attendance at the POI location during the transaction.<br/>- **ATTD: Attended**  : *Attended payment, with an attendant.*<br/>- **SATT: SemiAttended**  : *Semi-attended, including self checkout. An attendant supervises several payment, and could be called to help the cardholder.*<br/>- **UATT: Unattended**  : *Unattended payment, no attendant present.*<br/>  # noqa: E501

        :return: The attendance_context of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :rtype: object
        """
        return self._attendance_context

    @attendance_context.setter
    def attendance_context(self, attendance_context):
        """Sets the attendance_context of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.

        Human attendance at the POI location during the transaction.<br/>- **ATTD: Attended**  : *Attended payment, with an attendant.*<br/>- **SATT: SemiAttended**  : *Semi-attended, including self checkout. An attendant supervises several payment, and could be called to help the cardholder.*<br/>- **UATT: Unattended**  : *Unattended payment, no attendant present.*<br/>  # noqa: E501

        :param attendance_context: The attendance_context of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :type: object
        """

        self._attendance_context = attendance_context

    @property
    def attendant_language(self):
        """Gets the attendant_language of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501

        Specifies a language.<br/>  # noqa: E501

        :return: The attendant_language of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :rtype: object
        """
        return self._attendant_language

    @attendant_language.setter
    def attendant_language(self, attendant_language):
        """Sets the attendant_language of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.

        Specifies a language.<br/>  # noqa: E501

        :param attendant_language: The attendant_language of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :type: object
        """

        self._attendant_language = attendant_language

    @property
    def attendant_message_capable(self):
        """Gets the attendant_message_capable of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501

        A flag indicating a True or False value.<br/>  # noqa: E501

        :return: The attendant_message_capable of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :rtype: object
        """
        return self._attendant_message_capable

    @attendant_message_capable.setter
    def attendant_message_capable(self, attendant_message_capable):
        """Sets the attendant_message_capable of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.

        A flag indicating a True or False value.<br/>  # noqa: E501

        :param attendant_message_capable: The attendant_message_capable of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :type: object
        """

        self._attendant_message_capable = attendant_message_capable

    @property
    def business_area(self):
        """Gets the business_area of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501

        Specifies the business context of the transaction<br/>- **AIBD: ArtificialIntelligenceBasedDecision**  : *The payment is initiated by an artificial intelligence based decision.*<br/>- **PPAY: PlainPayment**  : *The card is used to perform a plain payment.*<br/>- **TKNF: TransitKnownFare**  : *The card is used in a Transit business case where the fare amount is known when the transaction is initiated.*<br/>- **EOPT: EnergyOpenPayment**  : *Indicates when the card is used in an energy business case where the amount could not be assessed when the transaction is initiated.*<br/>- **TOPT: TransitOpenPayment**  : *Indicates when the card is used in a transit business case where the fare amount is not known when the transaction is initiated.*<br/>  # noqa: E501

        :return: The business_area of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :rtype: object
        """
        return self._business_area

    @business_area.setter
    def business_area(self, business_area):
        """Sets the business_area of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.

        Specifies the business context of the transaction<br/>- **AIBD: ArtificialIntelligenceBasedDecision**  : *The payment is initiated by an artificial intelligence based decision.*<br/>- **PPAY: PlainPayment**  : *The card is used to perform a plain payment.*<br/>- **TKNF: TransitKnownFare**  : *The card is used in a Transit business case where the fare amount is known when the transaction is initiated.*<br/>- **EOPT: EnergyOpenPayment**  : *Indicates when the card is used in an energy business case where the amount could not be assessed when the transaction is initiated.*<br/>- **TOPT: TransitOpenPayment**  : *Indicates when the card is used in a transit business case where the fare amount is not known when the transaction is initiated.*<br/>  # noqa: E501

        :param business_area: The business_area of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :type: object
        """

        self._business_area = business_area

    @property
    def card_data_entry_mode(self):
        """Gets the card_data_entry_mode of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501

        Type of reading of the card data.<br/>- **TAGC: Tag**  : *Tag reading capabilities (RFID, etc.).*<br/>- **PHYS: Physical**  : *Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.*<br/>- **BRCD: BarCode**  : *Bar code.*<br/>- **MGST: MagneticStripe**  : *Magnetic stripe.*<br/>- **CICC: ICC**  : *ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.*<br/>- **DFLE: AccountData**  : *Account data on file.*<br/>- **CTLS: ProximityReader**  : *Contactless proximity reader.*<br/>- **ECTL: EMVProximityReader**  : *Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).*<br/>- **CDFL: CardOnFile**  : *Card information are stored on a file.*<br/>- **SICC: SynchronousIntegratedCircuitCard**  : *Synchronous ICC - (Integrated Circuit Card) with contact.*<br/>- **UNKW: Unknown**  : *Unknown card reading capability.*<br/>- **QRCD: QRCode**  : *Quick response code.*<br/>- **OPTC: OpticalCode**  : *Optical coded reading capabilities (e.g. barcode, QR code, etc.)*<br/>  # noqa: E501

        :return: The card_data_entry_mode of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :rtype: object
        """
        return self._card_data_entry_mode

    @card_data_entry_mode.setter
    def card_data_entry_mode(self, card_data_entry_mode):
        """Sets the card_data_entry_mode of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.

        Type of reading of the card data.<br/>- **TAGC: Tag**  : *Tag reading capabilities (RFID, etc.).*<br/>- **PHYS: Physical**  : *Keyboard entry or OCR reading of embossing or printed data, either at time of transaction or after the event.*<br/>- **BRCD: BarCode**  : *Bar code.*<br/>- **MGST: MagneticStripe**  : *Magnetic stripe.*<br/>- **CICC: ICC**  : *ICC (Integrated Circuit Card) with contact containing software applications conform to ISO 7816.*<br/>- **DFLE: AccountData**  : *Account data on file.*<br/>- **CTLS: ProximityReader**  : *Contactless proximity reader.*<br/>- **ECTL: EMVProximityReader**  : *Contactless proximity reader, with application conform to the standard EMV (standard initiated by Europay, Mastercard and Visa).*<br/>- **CDFL: CardOnFile**  : *Card information are stored on a file.*<br/>- **SICC: SynchronousIntegratedCircuitCard**  : *Synchronous ICC - (Integrated Circuit Card) with contact.*<br/>- **UNKW: Unknown**  : *Unknown card reading capability.*<br/>- **QRCD: QRCode**  : *Quick response code.*<br/>- **OPTC: OpticalCode**  : *Optical coded reading capabilities (e.g. barcode, QR code, etc.)*<br/>  # noqa: E501

        :param card_data_entry_mode: The card_data_entry_mode of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :type: object
        """

        self._card_data_entry_mode = card_data_entry_mode

    @property
    def card_present(self):
        """Gets the card_present of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501

        A flag indicating a True or False value.<br/>  # noqa: E501

        :return: The card_present of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :rtype: object
        """
        return self._card_present

    @card_present.setter
    def card_present(self, card_present):
        """Sets the card_present of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.

        A flag indicating a True or False value.<br/>  # noqa: E501

        :param card_present: The card_present of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :type: object
        """

        self._card_present = card_present

    @property
    def cardholder_present(self):
        """Gets the cardholder_present of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501

        A flag indicating a True or False value.<br/>  # noqa: E501

        :return: The cardholder_present of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :rtype: object
        """
        return self._cardholder_present

    @cardholder_present.setter
    def cardholder_present(self, cardholder_present):
        """Sets the cardholder_present of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.

        A flag indicating a True or False value.<br/>  # noqa: E501

        :param cardholder_present: The cardholder_present of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :type: object
        """

        self._cardholder_present = cardholder_present

    @property
    def fallback_indicator(self):
        """Gets the fallback_indicator of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501

        Information about card entry mode fallback.<br/>- **FFLB: FallbackAfterFailure**  : *Card fall-back occurred during the transaction in progress. The previous transaction on the terminal failed.*<br/>- **SFLB: FallbackAfterSuccess**  : *Card fall-back occurred during the transaction in progress. The previous transaction on the terminal was successful.*<br/>- **NFLB: NoFallback**  : *No card fall-back during the transaction in progress.*<br/>  # noqa: E501

        :return: The fallback_indicator of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :rtype: object
        """
        return self._fallback_indicator

    @fallback_indicator.setter
    def fallback_indicator(self, fallback_indicator):
        """Sets the fallback_indicator of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.

        Information about card entry mode fallback.<br/>- **FFLB: FallbackAfterFailure**  : *Card fall-back occurred during the transaction in progress. The previous transaction on the terminal failed.*<br/>- **SFLB: FallbackAfterSuccess**  : *Card fall-back occurred during the transaction in progress. The previous transaction on the terminal was successful.*<br/>- **NFLB: NoFallback**  : *No card fall-back during the transaction in progress.*<br/>  # noqa: E501

        :param fallback_indicator: The fallback_indicator of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :type: object
        """

        self._fallback_indicator = fallback_indicator

    @property
    def on_line_context(self):
        """Gets the on_line_context of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501

        A flag indicating a True or False value.<br/>  # noqa: E501

        :return: The on_line_context of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :rtype: object
        """
        return self._on_line_context

    @on_line_context.setter
    def on_line_context(self, on_line_context):
        """Sets the on_line_context of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.

        A flag indicating a True or False value.<br/>  # noqa: E501

        :param on_line_context: The on_line_context of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :type: object
        """

        self._on_line_context = on_line_context

    @property
    def supported_option(self):
        """Gets the supported_option of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501

        Payment options the card acceptor can support.  # noqa: E501

        :return: The supported_option of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :rtype: object
        """
        return self._supported_option

    @supported_option.setter
    def supported_option(self, supported_option):
        """Sets the supported_option of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.

        Payment options the card acceptor can support.  # noqa: E501

        :param supported_option: The supported_option of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :type: object
        """

        self._supported_option = supported_option

    @property
    def transaction_channel(self):
        """Gets the transaction_channel of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501

        Identifies the type of the communication channels used by the cardholder to the acceptor system.<br/>- **MAIL: MailOrder**  : *Mail order.*<br/>- **TLPH: TelephoneOrder**  : *Telephone order.*<br/>- **ECOM: ElectronicCommerce**  : *Electronic commerce.*<br/>- **TVPY: TelevisionPayment**  : *Payment on television.*<br/>- **SECM: SecuredElectronicCommerce**  : *Electronic commerce with cardholder authentication.*<br/>- **MOBL: MobilePayment**  : *Payment performed through a cardholder mobile device.*<br/>- **MPOS: MobilePOS**  : *Payment performed through a merchant mobile device.*<br/>  # noqa: E501

        :return: The transaction_channel of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :rtype: object
        """
        return self._transaction_channel

    @transaction_channel.setter
    def transaction_channel(self, transaction_channel):
        """Sets the transaction_channel of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.

        Identifies the type of the communication channels used by the cardholder to the acceptor system.<br/>- **MAIL: MailOrder**  : *Mail order.*<br/>- **TLPH: TelephoneOrder**  : *Telephone order.*<br/>- **ECOM: ElectronicCommerce**  : *Electronic commerce.*<br/>- **TVPY: TelevisionPayment**  : *Payment on television.*<br/>- **SECM: SecuredElectronicCommerce**  : *Electronic commerce with cardholder authentication.*<br/>- **MOBL: MobilePayment**  : *Payment performed through a cardholder mobile device.*<br/>- **MPOS: MobilePOS**  : *Payment performed through a merchant mobile device.*<br/>  # noqa: E501

        :param transaction_channel: The transaction_channel of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :type: object
        """

        self._transaction_channel = transaction_channel

    @property
    def transaction_environment(self):
        """Gets the transaction_environment of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501

        Indicates the environment of the transaction.<br/>- **MERC: Merchant**  : *Merchant environment.*<br/>- **PRIV: Private**  : *Private environment.*<br/>- **PUBL: Public**  : *Public environment.*<br/>  # noqa: E501

        :return: The transaction_environment of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :rtype: object
        """
        return self._transaction_environment

    @transaction_environment.setter
    def transaction_environment(self, transaction_environment):
        """Sets the transaction_environment of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.

        Indicates the environment of the transaction.<br/>- **MERC: Merchant**  : *Merchant environment.*<br/>- **PRIV: Private**  : *Private environment.*<br/>- **PUBL: Public**  : *Public environment.*<br/>  # noqa: E501

        :param transaction_environment: The transaction_environment of this PoipoiIdfinancialServiceServiceRequestContextPaymentContext.  # noqa: E501
        :type: object
        """

        self._transaction_environment = transaction_environment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestContextPaymentContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestContextPaymentContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
