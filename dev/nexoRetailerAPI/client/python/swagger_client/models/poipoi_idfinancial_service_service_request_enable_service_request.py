# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestEnableServiceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_output': 'PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput',
        'services_enabled': 'object',
        'transaction_action': 'object'
    }

    attribute_map = {
        'display_output': 'DisplayOutput',
        'services_enabled': 'ServicesEnabled',
        'transaction_action': 'TransactionAction'
    }

    def __init__(self, display_output=None, services_enabled=None, transaction_action=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestEnableServiceRequest - a model defined in Swagger"""  # noqa: E501
        self._display_output = None
        self._services_enabled = None
        self._transaction_action = None
        self.discriminator = None
        if display_output is not None:
            self.display_output = display_output
        if services_enabled is not None:
            self.services_enabled = services_enabled
        self.transaction_action = transaction_action

    @property
    def display_output(self):
        """Gets the display_output of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequest.  # noqa: E501


        :return: The display_output of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequest.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput
        """
        return self._display_output

    @display_output.setter
    def display_output(self, display_output):
        """Sets the display_output of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequest.


        :param display_output: The display_output of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequest.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput
        """

        self._display_output = display_output

    @property
    def services_enabled(self):
        """Gets the services_enabled of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequest.  # noqa: E501

        List of specific services for ServiceRequest<br/>- **FSPQ: FinancialPaymentRequest**  : *The Sale System requests to the POI System to perform a payment(Purchase/Refund/PWCB/MOTO Payment/...).*<br/>- **FSRQ: FinancialReversalRequest**  : *The Sale System requests to the POI System to perform a reversal partial or complete to cancel a former payment service.*<br/>- **FSIQ: FinancialBalanceInquiryRequest**  : *The Sale System requests to the POI System to perform balance inquiry on the main account.*<br/>- **FSBQ: FinancialBatchRequest**  : *The Batch message pair is used to request or get the result of transactions (payment, loyalty and reversal) performed without connection to the Sale system (Payment delivery).*<br/>- **FSLQ: FinancialLoyaltyRequest**  : *The Sale System requests to the POI System a loyalty service like loading or redeem.*<br/>- **FSVQ: FinancialStoredValueRequest**  : *The Sale System requests to the POI System to manage a stored value card or account (eg. Load, Payment, Reimbursement).*<br/>- **FSEQ: FinancialEnableServiceRequest**  : *The Sale System requests to the POI System to enable a service on its side.*<br/>- **FSAQ: FinancialCardAcquisitionRequest**  : *The Sale System requests to the POI System to handle a card data acquisition on the card reader.*<br/>- **FSCQ: FinancialReconciliationRequest**  : *The Sale System request to the POI System different kinds of transaction reconciliation.*<br/>  # noqa: E501

        :return: The services_enabled of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequest.  # noqa: E501
        :rtype: object
        """
        return self._services_enabled

    @services_enabled.setter
    def services_enabled(self, services_enabled):
        """Sets the services_enabled of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequest.

        List of specific services for ServiceRequest<br/>- **FSPQ: FinancialPaymentRequest**  : *The Sale System requests to the POI System to perform a payment(Purchase/Refund/PWCB/MOTO Payment/...).*<br/>- **FSRQ: FinancialReversalRequest**  : *The Sale System requests to the POI System to perform a reversal partial or complete to cancel a former payment service.*<br/>- **FSIQ: FinancialBalanceInquiryRequest**  : *The Sale System requests to the POI System to perform balance inquiry on the main account.*<br/>- **FSBQ: FinancialBatchRequest**  : *The Batch message pair is used to request or get the result of transactions (payment, loyalty and reversal) performed without connection to the Sale system (Payment delivery).*<br/>- **FSLQ: FinancialLoyaltyRequest**  : *The Sale System requests to the POI System a loyalty service like loading or redeem.*<br/>- **FSVQ: FinancialStoredValueRequest**  : *The Sale System requests to the POI System to manage a stored value card or account (eg. Load, Payment, Reimbursement).*<br/>- **FSEQ: FinancialEnableServiceRequest**  : *The Sale System requests to the POI System to enable a service on its side.*<br/>- **FSAQ: FinancialCardAcquisitionRequest**  : *The Sale System requests to the POI System to handle a card data acquisition on the card reader.*<br/>- **FSCQ: FinancialReconciliationRequest**  : *The Sale System request to the POI System different kinds of transaction reconciliation.*<br/>  # noqa: E501

        :param services_enabled: The services_enabled of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequest.  # noqa: E501
        :type: object
        """

        self._services_enabled = services_enabled

    @property
    def transaction_action(self):
        """Gets the transaction_action of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequest.  # noqa: E501

        Action to realise on a transaction.<br/>- **STAR: StartTransaction**  : *Start a transaction by a swipe ahead mechanism, with the services which are enabled.*<br/>- **STOP: Stop**  : *Keep quite after a swipe ahead mechanism.*<br/>  # noqa: E501

        :return: The transaction_action of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequest.  # noqa: E501
        :rtype: object
        """
        return self._transaction_action

    @transaction_action.setter
    def transaction_action(self, transaction_action):
        """Sets the transaction_action of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequest.

        Action to realise on a transaction.<br/>- **STAR: StartTransaction**  : *Start a transaction by a swipe ahead mechanism, with the services which are enabled.*<br/>- **STOP: Stop**  : *Keep quite after a swipe ahead mechanism.*<br/>  # noqa: E501

        :param transaction_action: The transaction_action of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequest.  # noqa: E501
        :type: object
        """
        if transaction_action is None:
            raise ValueError("Invalid value for `transaction_action`, must not be `None`")  # noqa: E501

        self._transaction_action = transaction_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestEnableServiceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestEnableServiceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
