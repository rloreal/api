# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'grace_period': 'object',
        'plan_identification': 'object',
        'plan_notice': 'object',
        'period_unit': 'object',
        'sequence_number': 'object'
    }

    attribute_map = {
        'grace_period': 'GracePeriod',
        'plan_identification': 'PlanIdentification',
        'plan_notice': 'PlanNotice',
        'period_unit': 'PeriodUnit',
        'sequence_number': 'SequenceNumber'
    }

    def __init__(self, grace_period=None, plan_identification=None, plan_notice=None, period_unit=None, sequence_number=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring - a model defined in Swagger"""  # noqa: E501
        self._grace_period = None
        self._plan_identification = None
        self._plan_notice = None
        self._period_unit = None
        self._sequence_number = None
        self.discriminator = None
        if grace_period is not None:
            self.grace_period = grace_period
        if plan_identification is not None:
            self.plan_identification = plan_identification
        if plan_notice is not None:
            self.plan_notice = plan_notice
        if period_unit is not None:
            self.period_unit = period_unit
        if sequence_number is not None:
            self.sequence_number = sequence_number

    @property
    def grace_period(self):
        """Gets the grace_period of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.  # noqa: E501

        Contains grace period details.  # noqa: E501

        :return: The grace_period of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.  # noqa: E501
        :rtype: object
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.

        Contains grace period details.  # noqa: E501

        :param grace_period: The grace_period of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.  # noqa: E501
        :type: object
        """

        self._grace_period = grace_period

    @property
    def plan_identification(self):
        """Gets the plan_identification of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The plan_identification of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.  # noqa: E501
        :rtype: object
        """
        return self._plan_identification

    @plan_identification.setter
    def plan_identification(self, plan_identification):
        """Sets the plan_identification of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param plan_identification: The plan_identification of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.  # noqa: E501
        :type: object
        """

        self._plan_identification = plan_identification

    @property
    def plan_notice(self):
        """Gets the plan_notice of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.  # noqa: E501

        Notice related to the RecurringPlan.  # noqa: E501

        :return: The plan_notice of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.  # noqa: E501
        :rtype: object
        """
        return self._plan_notice

    @plan_notice.setter
    def plan_notice(self, plan_notice):
        """Sets the plan_notice of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.

        Notice related to the RecurringPlan.  # noqa: E501

        :param plan_notice: The plan_notice of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.  # noqa: E501
        :type: object
        """

        self._plan_notice = plan_notice

    @property
    def period_unit(self):
        """Gets the period_unit of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.  # noqa: E501

        Specifies the regularity of an event.<br/>- **YEAR: Annual**  : *Event takes place every year or once a year.*<br/>- **MNTH: Monthly**  : *Event takes place every month or once a month.*<br/>- **QURT: Quarterly**  : *Event takes place every three months or four times a year.*<br/>- **MIAN: SemiAnnual**  : *Event takes place every six months or two times a year.*<br/>- **WEEK: Weekly**  : *Event takes place once a week.*<br/>- **DAIL: Daily**  : *Event takes place every day.*<br/>- **TEND: TenDays**  : *Event takes place every ten business days.*<br/>  # noqa: E501

        :return: The period_unit of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.  # noqa: E501
        :rtype: object
        """
        return self._period_unit

    @period_unit.setter
    def period_unit(self, period_unit):
        """Sets the period_unit of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.

        Specifies the regularity of an event.<br/>- **YEAR: Annual**  : *Event takes place every year or once a year.*<br/>- **MNTH: Monthly**  : *Event takes place every month or once a month.*<br/>- **QURT: Quarterly**  : *Event takes place every three months or four times a year.*<br/>- **MIAN: SemiAnnual**  : *Event takes place every six months or two times a year.*<br/>- **WEEK: Weekly**  : *Event takes place once a week.*<br/>- **DAIL: Daily**  : *Event takes place every day.*<br/>- **TEND: TenDays**  : *Event takes place every ten business days.*<br/>  # noqa: E501

        :param period_unit: The period_unit of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.  # noqa: E501
        :type: object
        """

        self._period_unit = period_unit

    @property
    def sequence_number(self):
        """Gets the sequence_number of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.  # noqa: E501

        Number of objects represented as an integer.<br/>  # noqa: E501

        :return: The sequence_number of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.  # noqa: E501
        :rtype: object
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.

        Number of objects represented as an integer.<br/>  # noqa: E501

        :param sequence_number: The sequence_number of this PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring.  # noqa: E501
        :type: object
        """

        self._sequence_number = sequence_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsRecurring):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
