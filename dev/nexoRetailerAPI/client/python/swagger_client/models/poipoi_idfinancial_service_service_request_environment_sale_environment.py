# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'object',
        'debit_preferred_flag': 'object',
        'loyalty_handling': 'object',
        'maximum_cash_back_amount': 'object',
        'minimum_amount_to_deliver': 'object',
        'minimum_split_amount': 'object',
        'sale_capabilities': 'object'
    }

    attribute_map = {
        'currency': 'Currency',
        'debit_preferred_flag': 'DebitPreferredFlag',
        'loyalty_handling': 'LoyaltyHandling',
        'maximum_cash_back_amount': 'MaximumCashBackAmount',
        'minimum_amount_to_deliver': 'MinimumAmountToDeliver',
        'minimum_split_amount': 'MinimumSplitAmount',
        'sale_capabilities': 'SaleCapabilities'
    }

    def __init__(self, currency=None, debit_preferred_flag=None, loyalty_handling=None, maximum_cash_back_amount=None, minimum_amount_to_deliver=None, minimum_split_amount=None, sale_capabilities=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment - a model defined in Swagger"""  # noqa: E501
        self._currency = None
        self._debit_preferred_flag = None
        self._loyalty_handling = None
        self._maximum_cash_back_amount = None
        self._minimum_amount_to_deliver = None
        self._minimum_split_amount = None
        self._sale_capabilities = None
        self.discriminator = None
        if currency is not None:
            self.currency = currency
        if debit_preferred_flag is not None:
            self.debit_preferred_flag = debit_preferred_flag
        if loyalty_handling is not None:
            self.loyalty_handling = loyalty_handling
        if maximum_cash_back_amount is not None:
            self.maximum_cash_back_amount = maximum_cash_back_amount
        if minimum_amount_to_deliver is not None:
            self.minimum_amount_to_deliver = minimum_amount_to_deliver
        if minimum_split_amount is not None:
            self.minimum_split_amount = minimum_split_amount
        if sale_capabilities is not None:
            self.sale_capabilities = sale_capabilities

    @property
    def currency(self):
        """Gets the currency of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501

        A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".<br/>  # noqa: E501

        :return: The currency of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501
        :rtype: object
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.

        A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".<br/>  # noqa: E501

        :param currency: The currency of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501
        :type: object
        """

        self._currency = currency

    @property
    def debit_preferred_flag(self):
        """Gets the debit_preferred_flag of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501

        A flag indicating a True or False value.<br/>  # noqa: E501

        :return: The debit_preferred_flag of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501
        :rtype: object
        """
        return self._debit_preferred_flag

    @debit_preferred_flag.setter
    def debit_preferred_flag(self, debit_preferred_flag):
        """Sets the debit_preferred_flag of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.

        A flag indicating a True or False value.<br/>  # noqa: E501

        :param debit_preferred_flag: The debit_preferred_flag of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501
        :type: object
        """

        self._debit_preferred_flag = debit_preferred_flag

    @property
    def loyalty_handling(self):
        """Gets the loyalty_handling of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501

        Possible types of Loyalty processing.<br/>- **ALLO: Allowed**  : *The loyalty is accepted, but the POI has not to require or ask a loyalty card. The loyalty is involved by the payment card (e.g. an hybrid or linked card). *<br/>- **DENY: Forbidden**  : *No loyalty card to read and loyalty transaction to process.  Any attempt to enter a pure loyalty card is rejected.*<br/>- **PRCS: Processed**  : *The loyalty transaction is already processed, no loyalty card or loyalty transaction to process.*<br/>- **PROP: Proposed**  : *The loyalty is accepted, and the POI has to ask a loyalty card. If the Customer does not enter a loyalty card, no loyalty transaction is realised.*<br/>- **REQU: Required**  : *The loyalty is required, and the POI refuses the processing  of the message request if the cardholder does not enter a loyalty card.*<br/>  # noqa: E501

        :return: The loyalty_handling of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501
        :rtype: object
        """
        return self._loyalty_handling

    @loyalty_handling.setter
    def loyalty_handling(self, loyalty_handling):
        """Sets the loyalty_handling of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.

        Possible types of Loyalty processing.<br/>- **ALLO: Allowed**  : *The loyalty is accepted, but the POI has not to require or ask a loyalty card. The loyalty is involved by the payment card (e.g. an hybrid or linked card). *<br/>- **DENY: Forbidden**  : *No loyalty card to read and loyalty transaction to process.  Any attempt to enter a pure loyalty card is rejected.*<br/>- **PRCS: Processed**  : *The loyalty transaction is already processed, no loyalty card or loyalty transaction to process.*<br/>- **PROP: Proposed**  : *The loyalty is accepted, and the POI has to ask a loyalty card. If the Customer does not enter a loyalty card, no loyalty transaction is realised.*<br/>- **REQU: Required**  : *The loyalty is required, and the POI refuses the processing  of the message request if the cardholder does not enter a loyalty card.*<br/>  # noqa: E501

        :param loyalty_handling: The loyalty_handling of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501
        :type: object
        """

        self._loyalty_handling = loyalty_handling

    @property
    def maximum_cash_back_amount(self):
        """Gets the maximum_cash_back_amount of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :return: The maximum_cash_back_amount of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501
        :rtype: object
        """
        return self._maximum_cash_back_amount

    @maximum_cash_back_amount.setter
    def maximum_cash_back_amount(self, maximum_cash_back_amount):
        """Sets the maximum_cash_back_amount of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :param maximum_cash_back_amount: The maximum_cash_back_amount of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501
        :type: object
        """

        self._maximum_cash_back_amount = maximum_cash_back_amount

    @property
    def minimum_amount_to_deliver(self):
        """Gets the minimum_amount_to_deliver of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :return: The minimum_amount_to_deliver of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501
        :rtype: object
        """
        return self._minimum_amount_to_deliver

    @minimum_amount_to_deliver.setter
    def minimum_amount_to_deliver(self, minimum_amount_to_deliver):
        """Sets the minimum_amount_to_deliver of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :param minimum_amount_to_deliver: The minimum_amount_to_deliver of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501
        :type: object
        """

        self._minimum_amount_to_deliver = minimum_amount_to_deliver

    @property
    def minimum_split_amount(self):
        """Gets the minimum_split_amount of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :return: The minimum_split_amount of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501
        :rtype: object
        """
        return self._minimum_split_amount

    @minimum_split_amount.setter
    def minimum_split_amount(self, minimum_split_amount):
        """Sets the minimum_split_amount of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :param minimum_split_amount: The minimum_split_amount of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501
        :type: object
        """

        self._minimum_split_amount = minimum_split_amount

    @property
    def sale_capabilities(self):
        """Gets the sale_capabilities of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501

        Capabilities of the Sale system.  # noqa: E501

        :return: The sale_capabilities of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501
        :rtype: object
        """
        return self._sale_capabilities

    @sale_capabilities.setter
    def sale_capabilities(self, sale_capabilities):
        """Sets the sale_capabilities of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.

        Capabilities of the Sale system.  # noqa: E501

        :param sale_capabilities: The sale_capabilities of this PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment.  # noqa: E501
        :type: object
        """

        self._sale_capabilities = sale_capabilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestEnvironmentSaleEnvironment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
