# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceSecurityTrailerSignedData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate': 'object',
        'digest_algorithm': 'object',
        'encapsulated_content': 'PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataEncapsulatedContent',
        'signer': 'object',
        'version': 'object'
    }

    attribute_map = {
        'certificate': 'Certificate',
        'digest_algorithm': 'DigestAlgorithm',
        'encapsulated_content': 'EncapsulatedContent',
        'signer': 'Signer',
        'version': 'Version'
    }

    def __init__(self, certificate=None, digest_algorithm=None, encapsulated_content=None, signer=None, version=None):  # noqa: E501
        """PoipoiIdfinancialServiceSecurityTrailerSignedData - a model defined in Swagger"""  # noqa: E501
        self._certificate = None
        self._digest_algorithm = None
        self._encapsulated_content = None
        self._signer = None
        self._version = None
        self.discriminator = None
        if certificate is not None:
            self.certificate = certificate
        if digest_algorithm is not None:
            self.digest_algorithm = digest_algorithm
        if encapsulated_content is not None:
            self.encapsulated_content = encapsulated_content
        if signer is not None:
            self.signer = signer
        if version is not None:
            self.version = version

    @property
    def certificate(self):
        """Gets the certificate of this PoipoiIdfinancialServiceSecurityTrailerSignedData.  # noqa: E501

        Chain of X.509 certificates.  # noqa: E501

        :return: The certificate of this PoipoiIdfinancialServiceSecurityTrailerSignedData.  # noqa: E501
        :rtype: object
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this PoipoiIdfinancialServiceSecurityTrailerSignedData.

        Chain of X.509 certificates.  # noqa: E501

        :param certificate: The certificate of this PoipoiIdfinancialServiceSecurityTrailerSignedData.  # noqa: E501
        :type: object
        """

        self._certificate = certificate

    @property
    def digest_algorithm(self):
        """Gets the digest_algorithm of this PoipoiIdfinancialServiceSecurityTrailerSignedData.  # noqa: E501

        Identification of digest algorithm applied before signature.  # noqa: E501

        :return: The digest_algorithm of this PoipoiIdfinancialServiceSecurityTrailerSignedData.  # noqa: E501
        :rtype: object
        """
        return self._digest_algorithm

    @digest_algorithm.setter
    def digest_algorithm(self, digest_algorithm):
        """Sets the digest_algorithm of this PoipoiIdfinancialServiceSecurityTrailerSignedData.

        Identification of digest algorithm applied before signature.  # noqa: E501

        :param digest_algorithm: The digest_algorithm of this PoipoiIdfinancialServiceSecurityTrailerSignedData.  # noqa: E501
        :type: object
        """

        self._digest_algorithm = digest_algorithm

    @property
    def encapsulated_content(self):
        """Gets the encapsulated_content of this PoipoiIdfinancialServiceSecurityTrailerSignedData.  # noqa: E501


        :return: The encapsulated_content of this PoipoiIdfinancialServiceSecurityTrailerSignedData.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataEncapsulatedContent
        """
        return self._encapsulated_content

    @encapsulated_content.setter
    def encapsulated_content(self, encapsulated_content):
        """Sets the encapsulated_content of this PoipoiIdfinancialServiceSecurityTrailerSignedData.


        :param encapsulated_content: The encapsulated_content of this PoipoiIdfinancialServiceSecurityTrailerSignedData.  # noqa: E501
        :type: PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataEncapsulatedContent
        """

        self._encapsulated_content = encapsulated_content

    @property
    def signer(self):
        """Gets the signer of this PoipoiIdfinancialServiceSecurityTrailerSignedData.  # noqa: E501

        Digital signature and identification of a signer.  # noqa: E501

        :return: The signer of this PoipoiIdfinancialServiceSecurityTrailerSignedData.  # noqa: E501
        :rtype: object
        """
        return self._signer

    @signer.setter
    def signer(self, signer):
        """Sets the signer of this PoipoiIdfinancialServiceSecurityTrailerSignedData.

        Digital signature and identification of a signer.  # noqa: E501

        :param signer: The signer of this PoipoiIdfinancialServiceSecurityTrailerSignedData.  # noqa: E501
        :type: object
        """

        self._signer = signer

    @property
    def version(self):
        """Gets the version of this PoipoiIdfinancialServiceSecurityTrailerSignedData.  # noqa: E501

        Number of objects represented as an integer.<br/>  # noqa: E501

        :return: The version of this PoipoiIdfinancialServiceSecurityTrailerSignedData.  # noqa: E501
        :rtype: object
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PoipoiIdfinancialServiceSecurityTrailerSignedData.

        Number of objects represented as an integer.<br/>  # noqa: E501

        :param version: The version of this PoipoiIdfinancialServiceSecurityTrailerSignedData.  # noqa: E501
        :type: object
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceSecurityTrailerSignedData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceSecurityTrailerSignedData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
