# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loyalty_account': 'PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestAccount',
        'poi_transaction_identification': 'PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification',
        'payment_account': 'SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponsePaymentAccount',
        'receipt_v07': 'object',
        'sale_transaction_identification': 'PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification',
        'stored_value_account': 'object'
    }

    attribute_map = {
        'loyalty_account': 'LoyaltyAccount',
        'poi_transaction_identification': 'POITransactionIdentification',
        'payment_account': 'PaymentAccount',
        'receipt_v07': 'ReceiptV07',
        'sale_transaction_identification': 'SaleTransactionIdentification',
        'stored_value_account': 'StoredValueAccount'
    }

    def __init__(self, loyalty_account=None, poi_transaction_identification=None, payment_account=None, receipt_v07=None, sale_transaction_identification=None, stored_value_account=None):  # noqa: E501
        """SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse - a model defined in Swagger"""  # noqa: E501
        self._loyalty_account = None
        self._poi_transaction_identification = None
        self._payment_account = None
        self._receipt_v07 = None
        self._sale_transaction_identification = None
        self._stored_value_account = None
        self.discriminator = None
        if loyalty_account is not None:
            self.loyalty_account = loyalty_account
        if poi_transaction_identification is not None:
            self.poi_transaction_identification = poi_transaction_identification
        if payment_account is not None:
            self.payment_account = payment_account
        if receipt_v07 is not None:
            self.receipt_v07 = receipt_v07
        if sale_transaction_identification is not None:
            self.sale_transaction_identification = sale_transaction_identification
        if stored_value_account is not None:
            self.stored_value_account = stored_value_account

    @property
    def loyalty_account(self):
        """Gets the loyalty_account of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501


        :return: The loyalty_account of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestAccount
        """
        return self._loyalty_account

    @loyalty_account.setter
    def loyalty_account(self, loyalty_account):
        """Sets the loyalty_account of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.


        :param loyalty_account: The loyalty_account of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestAccount
        """

        self._loyalty_account = loyalty_account

    @property
    def poi_transaction_identification(self):
        """Gets the poi_transaction_identification of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501


        :return: The poi_transaction_identification of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification
        """
        return self._poi_transaction_identification

    @poi_transaction_identification.setter
    def poi_transaction_identification(self, poi_transaction_identification):
        """Sets the poi_transaction_identification of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.


        :param poi_transaction_identification: The poi_transaction_identification of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification
        """

        self._poi_transaction_identification = poi_transaction_identification

    @property
    def payment_account(self):
        """Gets the payment_account of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501


        :return: The payment_account of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501
        :rtype: SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponsePaymentAccount
        """
        return self._payment_account

    @payment_account.setter
    def payment_account(self, payment_account):
        """Sets the payment_account of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.


        :param payment_account: The payment_account of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501
        :type: SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponsePaymentAccount
        """

        self._payment_account = payment_account

    @property
    def receipt_v07(self):
        """Gets the receipt_v07 of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501

        Scope  The Receipt message is sent by the transaction administrator to a member of the system. It is sent to acknowledge the receipt of one or multiple messages sent previously.  The Receipt message is an application receipt acknowledgement and conveys information about the processing of the original message(s).  Usage  The Receipt message is used when the exchange of messages takes place in an asynchronous manner.  This may happen, for instance, when an action is requested from the transaction administrator (a deletion, modification or cancellation). The transaction administrator will first acknowledge the request (with a Receipt message) and then execute it.  The message can contain information based on the following elements: reference of the message(s) it acknowledges, the status code (optional) and further explanation:  - reference of the message it acknowledges  - potentially, a status code and an explanation.  # noqa: E501

        :return: The receipt_v07 of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501
        :rtype: object
        """
        return self._receipt_v07

    @receipt_v07.setter
    def receipt_v07(self, receipt_v07):
        """Sets the receipt_v07 of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.

        Scope  The Receipt message is sent by the transaction administrator to a member of the system. It is sent to acknowledge the receipt of one or multiple messages sent previously.  The Receipt message is an application receipt acknowledgement and conveys information about the processing of the original message(s).  Usage  The Receipt message is used when the exchange of messages takes place in an asynchronous manner.  This may happen, for instance, when an action is requested from the transaction administrator (a deletion, modification or cancellation). The transaction administrator will first acknowledge the request (with a Receipt message) and then execute it.  The message can contain information based on the following elements: reference of the message(s) it acknowledges, the status code (optional) and further explanation:  - reference of the message it acknowledges  - potentially, a status code and an explanation.  # noqa: E501

        :param receipt_v07: The receipt_v07 of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501
        :type: object
        """

        self._receipt_v07 = receipt_v07

    @property
    def sale_transaction_identification(self):
        """Gets the sale_transaction_identification of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501


        :return: The sale_transaction_identification of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification
        """
        return self._sale_transaction_identification

    @sale_transaction_identification.setter
    def sale_transaction_identification(self, sale_transaction_identification):
        """Sets the sale_transaction_identification of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.


        :param sale_transaction_identification: The sale_transaction_identification of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification
        """

        self._sale_transaction_identification = sale_transaction_identification

    @property
    def stored_value_account(self):
        """Gets the stored_value_account of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501

        Stored value account information.  # noqa: E501

        :return: The stored_value_account of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501
        :rtype: object
        """
        return self._stored_value_account

    @stored_value_account.setter
    def stored_value_account(self, stored_value_account):
        """Sets the stored_value_account of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.

        Stored value account information.  # noqa: E501

        :param stored_value_account: The stored_value_account of this SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.  # noqa: E501
        :type: object
        """

        self._stored_value_account = stored_value_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
