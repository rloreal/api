# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'barcode_type': 'object',
        'barcode_value': 'object',
        'qr_code_binary_value': 'object',
        'qr_code_error_correction': 'object',
        'qr_code_encoding_mode': 'object',
        'qr_code_version': 'object'
    }

    attribute_map = {
        'barcode_type': 'BarcodeType',
        'barcode_value': 'BarcodeValue',
        'qr_code_binary_value': 'QRCodeBinaryValue',
        'qr_code_error_correction': 'QRCodeErrorCorrection',
        'qr_code_encoding_mode': 'QRCodeEncodingMode',
        'qr_code_version': 'QRCodeVersion'
    }

    def __init__(self, barcode_type=None, barcode_value=None, qr_code_binary_value=None, qr_code_error_correction=None, qr_code_encoding_mode=None, qr_code_version=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode - a model defined in Swagger"""  # noqa: E501
        self._barcode_type = None
        self._barcode_value = None
        self._qr_code_binary_value = None
        self._qr_code_error_correction = None
        self._qr_code_encoding_mode = None
        self._qr_code_version = None
        self.discriminator = None
        self.barcode_type = barcode_type
        if barcode_value is not None:
            self.barcode_value = barcode_value
        if qr_code_binary_value is not None:
            self.qr_code_binary_value = qr_code_binary_value
        if qr_code_error_correction is not None:
            self.qr_code_error_correction = qr_code_error_correction
        if qr_code_encoding_mode is not None:
            self.qr_code_encoding_mode = qr_code_encoding_mode
        if qr_code_version is not None:
            self.qr_code_version = qr_code_version

    @property
    def barcode_type(self):
        """Gets the barcode_type of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501

        Type of BarCode coding.<br/>- **COQR: BarcodeEncodedAs2DQRCode**  : *Barcode encoded according to the 2Dimensions Quick Response Code Standard.*<br/>- **C128: BarcodeEncodedAsCode128**  : *Barcode encoded according to the Code 128 standard.*<br/>- **C025: BarcodeEncodedAsCode25**  : *Barcode encoded according to the Code 25 standard.*<br/>- **C039: BarcodeEncodedAsCode39**  : *Barcode encoded according to the Code 39 standard.*<br/>- **EA13: BarcodeEncodedAsEA13**  : *Barcode encoded according to the EAN13 standard.*<br/>- **EAN8: BarcodeEncodedAsEAN8**  : *Barcode encoded according to the EAN8 standard.*<br/>- **P417: BarcodeEncodedAsPDF417**  : *Barcode encoded according to the PDF417 standard.*<br/>- **UPCA: BarcodeEncodedAsUPCA**  : *Barcode encoded according to the UPCA standard.*<br/>  # noqa: E501

        :return: The barcode_type of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501
        :rtype: object
        """
        return self._barcode_type

    @barcode_type.setter
    def barcode_type(self, barcode_type):
        """Sets the barcode_type of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.

        Type of BarCode coding.<br/>- **COQR: BarcodeEncodedAs2DQRCode**  : *Barcode encoded according to the 2Dimensions Quick Response Code Standard.*<br/>- **C128: BarcodeEncodedAsCode128**  : *Barcode encoded according to the Code 128 standard.*<br/>- **C025: BarcodeEncodedAsCode25**  : *Barcode encoded according to the Code 25 standard.*<br/>- **C039: BarcodeEncodedAsCode39**  : *Barcode encoded according to the Code 39 standard.*<br/>- **EA13: BarcodeEncodedAsEA13**  : *Barcode encoded according to the EAN13 standard.*<br/>- **EAN8: BarcodeEncodedAsEAN8**  : *Barcode encoded according to the EAN8 standard.*<br/>- **P417: BarcodeEncodedAsPDF417**  : *Barcode encoded according to the PDF417 standard.*<br/>- **UPCA: BarcodeEncodedAsUPCA**  : *Barcode encoded according to the UPCA standard.*<br/>  # noqa: E501

        :param barcode_type: The barcode_type of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501
        :type: object
        """
        if barcode_type is None:
            raise ValueError("Invalid value for `barcode_type`, must not be `None`")  # noqa: E501

        self._barcode_type = barcode_type

    @property
    def barcode_value(self):
        """Gets the barcode_value of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501

        Specifies a character string with a maximum length of 8000 characters.<br/>  # noqa: E501

        :return: The barcode_value of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501
        :rtype: object
        """
        return self._barcode_value

    @barcode_value.setter
    def barcode_value(self, barcode_value):
        """Sets the barcode_value of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.

        Specifies a character string with a maximum length of 8000 characters.<br/>  # noqa: E501

        :param barcode_value: The barcode_value of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501
        :type: object
        """

        self._barcode_value = barcode_value

    @property
    def qr_code_binary_value(self):
        """Gets the qr_code_binary_value of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501

        Specifies a binary string with a maximum length of 3000 binary bytes.<br/>  # noqa: E501

        :return: The qr_code_binary_value of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501
        :rtype: object
        """
        return self._qr_code_binary_value

    @qr_code_binary_value.setter
    def qr_code_binary_value(self, qr_code_binary_value):
        """Sets the qr_code_binary_value of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.

        Specifies a binary string with a maximum length of 3000 binary bytes.<br/>  # noqa: E501

        :param qr_code_binary_value: The qr_code_binary_value of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501
        :type: object
        """

        self._qr_code_binary_value = qr_code_binary_value

    @property
    def qr_code_error_correction(self):
        """Gets the qr_code_error_correction of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501

        Error Correction mode of Quick Response Code.<br/>- **M015: ErrorCorrection15Percent**  : *Reed-Solomon error correction 15%*<br/>- **Q025: ErrorCorrection25Percent**  : *Reed-Solomon error correction 25%*<br/>- **H030: ErrorCorrection30Percent**  : *Reed-Solomon error correction 30%*<br/>- **L007: ErrorCorrection7Percent**  : *Reed-Solomon error correction  7%*<br/>  # noqa: E501

        :return: The qr_code_error_correction of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501
        :rtype: object
        """
        return self._qr_code_error_correction

    @qr_code_error_correction.setter
    def qr_code_error_correction(self, qr_code_error_correction):
        """Sets the qr_code_error_correction of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.

        Error Correction mode of Quick Response Code.<br/>- **M015: ErrorCorrection15Percent**  : *Reed-Solomon error correction 15%*<br/>- **Q025: ErrorCorrection25Percent**  : *Reed-Solomon error correction 25%*<br/>- **H030: ErrorCorrection30Percent**  : *Reed-Solomon error correction 30%*<br/>- **L007: ErrorCorrection7Percent**  : *Reed-Solomon error correction  7%*<br/>  # noqa: E501

        :param qr_code_error_correction: The qr_code_error_correction of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501
        :type: object
        """

        self._qr_code_error_correction = qr_code_error_correction

    @property
    def qr_code_encoding_mode(self):
        """Gets the qr_code_encoding_mode of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501

        Encoding Mode of Quick Response Code.<br/>- **ALFA: Alphanumeric**  : *Alphanumeric value provided in Barcode field.*<br/>- **BINA: Binary**  : *Binary value provided in Quick Response Code Binary Value.*<br/>- **KANJ: Kanji**  : *Kanji value provided in Quick Response Code Binary Value.*<br/>- **NUME: Numeric**  : *Numeric value provided in Barcode field.*<br/>  # noqa: E501

        :return: The qr_code_encoding_mode of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501
        :rtype: object
        """
        return self._qr_code_encoding_mode

    @qr_code_encoding_mode.setter
    def qr_code_encoding_mode(self, qr_code_encoding_mode):
        """Sets the qr_code_encoding_mode of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.

        Encoding Mode of Quick Response Code.<br/>- **ALFA: Alphanumeric**  : *Alphanumeric value provided in Barcode field.*<br/>- **BINA: Binary**  : *Binary value provided in Quick Response Code Binary Value.*<br/>- **KANJ: Kanji**  : *Kanji value provided in Quick Response Code Binary Value.*<br/>- **NUME: Numeric**  : *Numeric value provided in Barcode field.*<br/>  # noqa: E501

        :param qr_code_encoding_mode: The qr_code_encoding_mode of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501
        :type: object
        """

        self._qr_code_encoding_mode = qr_code_encoding_mode

    @property
    def qr_code_version(self):
        """Gets the qr_code_version of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501

        Specifies a character string with a maximum length of 16 characters.<br/>  # noqa: E501

        :return: The qr_code_version of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501
        :rtype: object
        """
        return self._qr_code_version

    @qr_code_version.setter
    def qr_code_version(self, qr_code_version):
        """Sets the qr_code_version of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.

        Specifies a character string with a maximum length of 16 characters.<br/>  # noqa: E501

        :param qr_code_version: The qr_code_version of this PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode.  # noqa: E501
        :type: object
        """

        self._qr_code_version = qr_code_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
