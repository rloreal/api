# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accessed_by': 'object',
        'additional_information': 'object',
        'currency': 'object',
        'customer_order_identification': 'object',
        'current_amount': 'object',
        'end_date': 'object',
        'forecasted_amount': 'object',
        'open_order_state': 'object',
        'sale_reference_identification': 'object',
        'start_date': 'object',
        'unit': 'object'
    }

    attribute_map = {
        'accessed_by': 'AccessedBy',
        'additional_information': 'AdditionalInformation',
        'currency': 'Currency',
        'customer_order_identification': 'CustomerOrderIdentification',
        'current_amount': 'CurrentAmount',
        'end_date': 'EndDate',
        'forecasted_amount': 'ForecastedAmount',
        'open_order_state': 'OpenOrderState',
        'sale_reference_identification': 'SaleReferenceIdentification',
        'start_date': 'StartDate',
        'unit': 'Unit'
    }

    def __init__(self, accessed_by=None, additional_information=None, currency=None, customer_order_identification=None, current_amount=None, end_date=None, forecasted_amount=None, open_order_state=None, sale_reference_identification=None, start_date=None, unit=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder - a model defined in Swagger"""  # noqa: E501
        self._accessed_by = None
        self._additional_information = None
        self._currency = None
        self._customer_order_identification = None
        self._current_amount = None
        self._end_date = None
        self._forecasted_amount = None
        self._open_order_state = None
        self._sale_reference_identification = None
        self._start_date = None
        self._unit = None
        self.discriminator = None
        if accessed_by is not None:
            self.accessed_by = accessed_by
        if additional_information is not None:
            self.additional_information = additional_information
        if currency is not None:
            self.currency = currency
        self.customer_order_identification = customer_order_identification
        if current_amount is not None:
            self.current_amount = current_amount
        if end_date is not None:
            self.end_date = end_date
        self.forecasted_amount = forecasted_amount
        if open_order_state is not None:
            self.open_order_state = open_order_state
        self.sale_reference_identification = sale_reference_identification
        self.start_date = start_date
        if unit is not None:
            self.unit = unit

    @property
    def accessed_by(self):
        """Gets the accessed_by of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The accessed_by of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :rtype: object
        """
        return self._accessed_by

    @accessed_by.setter
    def accessed_by(self, accessed_by):
        """Sets the accessed_by of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param accessed_by: The accessed_by of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :type: object
        """

        self._accessed_by = accessed_by

    @property
    def additional_information(self):
        """Gets the additional_information of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501

        Specifies a character string with a maximum length of 1025 characters.<br/>  # noqa: E501

        :return: The additional_information of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :rtype: object
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.

        Specifies a character string with a maximum length of 1025 characters.<br/>  # noqa: E501

        :param additional_information: The additional_information of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :type: object
        """

        self._additional_information = additional_information

    @property
    def currency(self):
        """Gets the currency of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501

        A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".<br/>  # noqa: E501

        :return: The currency of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :rtype: object
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.

        A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".<br/>  # noqa: E501

        :param currency: The currency of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :type: object
        """

        self._currency = currency

    @property
    def customer_order_identification(self):
        """Gets the customer_order_identification of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The customer_order_identification of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :rtype: object
        """
        return self._customer_order_identification

    @customer_order_identification.setter
    def customer_order_identification(self, customer_order_identification):
        """Sets the customer_order_identification of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param customer_order_identification: The customer_order_identification of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :type: object
        """
        if customer_order_identification is None:
            raise ValueError("Invalid value for `customer_order_identification`, must not be `None`")  # noqa: E501

        self._customer_order_identification = customer_order_identification

    @property
    def current_amount(self):
        """Gets the current_amount of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :return: The current_amount of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :rtype: object
        """
        return self._current_amount

    @current_amount.setter
    def current_amount(self, current_amount):
        """Sets the current_amount of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :param current_amount: The current_amount of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :type: object
        """

        self._current_amount = current_amount

    @property
    def end_date(self):
        """Gets the end_date of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501

        A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. Note on the time format: 1) beginning / end of calendar day 00:00:00 = the beginning of a calendar day 24:00:00 = the end of a calendar day 2) fractions of second in time format Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.<br/>  # noqa: E501

        :return: The end_date of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :rtype: object
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.

        A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. Note on the time format: 1) beginning / end of calendar day 00:00:00 = the beginning of a calendar day 24:00:00 = the end of a calendar day 2) fractions of second in time format Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.<br/>  # noqa: E501

        :param end_date: The end_date of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :type: object
        """

        self._end_date = end_date

    @property
    def forecasted_amount(self):
        """Gets the forecasted_amount of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :return: The forecasted_amount of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :rtype: object
        """
        return self._forecasted_amount

    @forecasted_amount.setter
    def forecasted_amount(self, forecasted_amount):
        """Sets the forecasted_amount of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.

        Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot. Note: a zero amount is considered a positive amount.<br/>  # noqa: E501

        :param forecasted_amount: The forecasted_amount of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :type: object
        """
        if forecasted_amount is None:
            raise ValueError("Invalid value for `forecasted_amount`, must not be `None`")  # noqa: E501

        self._forecasted_amount = forecasted_amount

    @property
    def open_order_state(self):
        """Gets the open_order_state of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501

        A flag indicating a True or False value.<br/>  # noqa: E501

        :return: The open_order_state of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :rtype: object
        """
        return self._open_order_state

    @open_order_state.setter
    def open_order_state(self, open_order_state):
        """Sets the open_order_state of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.

        A flag indicating a True or False value.<br/>  # noqa: E501

        :param open_order_state: The open_order_state of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :type: object
        """

        self._open_order_state = open_order_state

    @property
    def sale_reference_identification(self):
        """Gets the sale_reference_identification of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The sale_reference_identification of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :rtype: object
        """
        return self._sale_reference_identification

    @sale_reference_identification.setter
    def sale_reference_identification(self, sale_reference_identification):
        """Sets the sale_reference_identification of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param sale_reference_identification: The sale_reference_identification of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :type: object
        """
        if sale_reference_identification is None:
            raise ValueError("Invalid value for `sale_reference_identification`, must not be `None`")  # noqa: E501

        self._sale_reference_identification = sale_reference_identification

    @property
    def start_date(self):
        """Gets the start_date of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501

        A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. Note on the time format: 1) beginning / end of calendar day 00:00:00 = the beginning of a calendar day 24:00:00 = the end of a calendar day 2) fractions of second in time format Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.<br/>  # noqa: E501

        :return: The start_date of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :rtype: object
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.

        A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. Note on the time format: 1) beginning / end of calendar day 00:00:00 = the beginning of a calendar day 24:00:00 = the end of a calendar day 2) fractions of second in time format Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.<br/>  # noqa: E501

        :param start_date: The start_date of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :type: object
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def unit(self):
        """Gets the unit of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501

        Unit of a amount (for loyalty or account).<br/>- **MONE: Monetary**  : *The amount is expressed in a monetary value in a currency.*<br/>- **POIN: Point**  : *The amount is expressed in point.*<br/>  # noqa: E501

        :return: The unit of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :rtype: object
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.

        Unit of a amount (for loyalty or account).<br/>- **MONE: Monetary**  : *The amount is expressed in a monetary value in a currency.*<br/>- **POIN: Point**  : *The amount is expressed in point.*<br/>  # noqa: E501

        :param unit: The unit of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder.  # noqa: E501
        :type: object
        """

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestCustomerOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
