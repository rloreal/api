# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identification': 'object',
        'issuer': 'object',
        'short_name': 'object',
        'type': 'object'
    }

    attribute_map = {
        'identification': 'Identification',
        'issuer': 'Issuer',
        'short_name': 'ShortName',
        'type': 'Type'
    }

    def __init__(self, identification=None, issuer=None, short_name=None, type=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification - a model defined in Swagger"""  # noqa: E501
        self._identification = None
        self._issuer = None
        self._short_name = None
        self._type = None
        self.discriminator = None
        self.identification = identification
        if issuer is not None:
            self.issuer = issuer
        if short_name is not None:
            self.short_name = short_name
        if type is not None:
            self.type = type

    @property
    def identification(self):
        """Gets the identification of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The identification of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification.  # noqa: E501
        :rtype: object
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param identification: The identification of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification.  # noqa: E501
        :type: object
        """
        if identification is None:
            raise ValueError("Invalid value for `identification`, must not be `None`")  # noqa: E501

        self._identification = identification

    @property
    def issuer(self):
        """Gets the issuer of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification.  # noqa: E501

        Entity assigning an identification (for example merchant, acceptor, acquirer, tax authority, etc.).<br/>- **MERC: Merchant**  : *Merchant providing goods and service in the card payment transaction.*<br/>- **ACCP: Acceptor**  : *Card acceptor, party accepting the card and presenting transaction data to the acquirer.*<br/>- **ITAG: IntermediaryAgent**  : *Party acting on behalf of other parties to process or forward data to other parties.*<br/>- **ACQR: Acquirer**  : *Entity acquiring card transactions.*<br/>- **CISS: CardIssuer**  : *Party that issues cards.*<br/>- **TAXH: TaxAuthority**  : *Tax authority.*<br/>  # noqa: E501

        :return: The issuer of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification.  # noqa: E501
        :rtype: object
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification.

        Entity assigning an identification (for example merchant, acceptor, acquirer, tax authority, etc.).<br/>- **MERC: Merchant**  : *Merchant providing goods and service in the card payment transaction.*<br/>- **ACCP: Acceptor**  : *Card acceptor, party accepting the card and presenting transaction data to the acquirer.*<br/>- **ITAG: IntermediaryAgent**  : *Party acting on behalf of other parties to process or forward data to other parties.*<br/>- **ACQR: Acquirer**  : *Entity acquiring card transactions.*<br/>- **CISS: CardIssuer**  : *Party that issues cards.*<br/>- **TAXH: TaxAuthority**  : *Tax authority.*<br/>  # noqa: E501

        :param issuer: The issuer of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification.  # noqa: E501
        :type: object
        """

        self._issuer = issuer

    @property
    def short_name(self):
        """Gets the short_name of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The short_name of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification.  # noqa: E501
        :rtype: object
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param short_name: The short_name of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification.  # noqa: E501
        :type: object
        """

        self._short_name = short_name

    @property
    def type(self):
        """Gets the type of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification.  # noqa: E501

        Identification of the type of entity involved in a transaction.<br/>- **OPOI: OriginatingPOI**  : *Point Of Interaction initiating the card payment transaction.*<br/>- **MERC: Merchant**  : *Merchant providing goods and service in the card payment transaction.*<br/>- **ACCP: Acceptor**  : *Card acceptor, party accepting the card and presenting transaction data to the acquirer.*<br/>- **ITAG: IntermediaryAgent**  : *Party acting on behalf of other parties to process or forward data to other parties.*<br/>- **ACQR: Acquirer**  : *Entity acquiring card transactions.*<br/>- **CISS: CardIssuer**  : *Party that issues cards.*<br/>- **DLIS: DelegateIssuer**  : *Party to whom the card issuer delegates to authorise card payment transactions.*<br/>  # noqa: E501

        :return: The type of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification.

        Identification of the type of entity involved in a transaction.<br/>- **OPOI: OriginatingPOI**  : *Point Of Interaction initiating the card payment transaction.*<br/>- **MERC: Merchant**  : *Merchant providing goods and service in the card payment transaction.*<br/>- **ACCP: Acceptor**  : *Card acceptor, party accepting the card and presenting transaction data to the acquirer.*<br/>- **ITAG: IntermediaryAgent**  : *Party acting on behalf of other parties to process or forward data to other parties.*<br/>- **ACQR: Acquirer**  : *Entity acquiring card transactions.*<br/>- **CISS: CardIssuer**  : *Party that issues cards.*<br/>- **DLIS: DelegateIssuer**  : *Party to whom the card issuer delegates to authorise card payment transactions.*<br/>  # noqa: E501

        :param type: The type of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification.  # noqa: E501
        :type: object
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantIdentification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
