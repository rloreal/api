# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'object',
        'country_sub_division': 'object',
        'post_code_identification': 'object',
        'street_name': 'object',
        'town_name': 'object'
    }

    attribute_map = {
        'country': 'Country',
        'country_sub_division': 'CountrySubDivision',
        'post_code_identification': 'PostCodeIdentification',
        'street_name': 'StreetName',
        'town_name': 'TownName'
    }

    def __init__(self, country=None, country_sub_division=None, post_code_identification=None, street_name=None, town_name=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress - a model defined in Swagger"""  # noqa: E501
        self._country = None
        self._country_sub_division = None
        self._post_code_identification = None
        self._street_name = None
        self._town_name = None
        self.discriminator = None
        self.country = country
        if country_sub_division is not None:
            self.country_sub_division = country_sub_division
        self.post_code_identification = post_code_identification
        if street_name is not None:
            self.street_name = street_name
        self.town_name = town_name

    @property
    def country(self):
        """Gets the country of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.  # noqa: E501

        Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).<br/>  # noqa: E501

        :return: The country of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.  # noqa: E501
        :rtype: object
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.

        Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).<br/>  # noqa: E501

        :param country: The country of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.  # noqa: E501
        :type: object
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def country_sub_division(self):
        """Gets the country_sub_division of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The country_sub_division of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.  # noqa: E501
        :rtype: object
        """
        return self._country_sub_division

    @country_sub_division.setter
    def country_sub_division(self, country_sub_division):
        """Sets the country_sub_division of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param country_sub_division: The country_sub_division of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.  # noqa: E501
        :type: object
        """

        self._country_sub_division = country_sub_division

    @property
    def post_code_identification(self):
        """Gets the post_code_identification of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.  # noqa: E501

        Specifies a character string with a maximum length of 16 characters.<br/>  # noqa: E501

        :return: The post_code_identification of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.  # noqa: E501
        :rtype: object
        """
        return self._post_code_identification

    @post_code_identification.setter
    def post_code_identification(self, post_code_identification):
        """Sets the post_code_identification of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.

        Specifies a character string with a maximum length of 16 characters.<br/>  # noqa: E501

        :param post_code_identification: The post_code_identification of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.  # noqa: E501
        :type: object
        """
        if post_code_identification is None:
            raise ValueError("Invalid value for `post_code_identification`, must not be `None`")  # noqa: E501

        self._post_code_identification = post_code_identification

    @property
    def street_name(self):
        """Gets the street_name of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.  # noqa: E501

        Specifies a character string with a maximum length of 70characters.<br/>  # noqa: E501

        :return: The street_name of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.  # noqa: E501
        :rtype: object
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.

        Specifies a character string with a maximum length of 70characters.<br/>  # noqa: E501

        :param street_name: The street_name of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.  # noqa: E501
        :type: object
        """

        self._street_name = street_name

    @property
    def town_name(self):
        """Gets the town_name of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.  # noqa: E501

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :return: The town_name of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.  # noqa: E501
        :rtype: object
        """
        return self._town_name

    @town_name.setter
    def town_name(self, town_name):
        """Sets the town_name of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.

        Specifies a character string with a maximum length of 35 characters.<br/>  # noqa: E501

        :param town_name: The town_name of this PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress.  # noqa: E501
        :type: object
        """
        if town_name is None:
            raise ValueError("Invalid value for `town_name`, must not be `None`")  # noqa: E501

        self._town_name = town_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestContextDirectDebitContextCreditorIdentificationCreditorNameAndAddressAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
