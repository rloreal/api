# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loyalty_account_request': 'PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequest',
        'payment_account_request': 'PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestPaymentAccountRequest',
        'sale_transaction_identification': 'PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification',
        'stored_value_account_request': 'PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestStoredValueAccountRequest'
    }

    attribute_map = {
        'loyalty_account_request': 'LoyaltyAccountRequest',
        'payment_account_request': 'PaymentAccountRequest',
        'sale_transaction_identification': 'SaleTransactionIdentification',
        'stored_value_account_request': 'StoredValueAccountRequest'
    }

    def __init__(self, loyalty_account_request=None, payment_account_request=None, sale_transaction_identification=None, stored_value_account_request=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest - a model defined in Swagger"""  # noqa: E501
        self._loyalty_account_request = None
        self._payment_account_request = None
        self._sale_transaction_identification = None
        self._stored_value_account_request = None
        self.discriminator = None
        if loyalty_account_request is not None:
            self.loyalty_account_request = loyalty_account_request
        if payment_account_request is not None:
            self.payment_account_request = payment_account_request
        if sale_transaction_identification is not None:
            self.sale_transaction_identification = sale_transaction_identification
        if stored_value_account_request is not None:
            self.stored_value_account_request = stored_value_account_request

    @property
    def loyalty_account_request(self):
        """Gets the loyalty_account_request of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest.  # noqa: E501


        :return: The loyalty_account_request of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequest
        """
        return self._loyalty_account_request

    @loyalty_account_request.setter
    def loyalty_account_request(self, loyalty_account_request):
        """Sets the loyalty_account_request of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest.


        :param loyalty_account_request: The loyalty_account_request of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequest
        """

        self._loyalty_account_request = loyalty_account_request

    @property
    def payment_account_request(self):
        """Gets the payment_account_request of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest.  # noqa: E501


        :return: The payment_account_request of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestPaymentAccountRequest
        """
        return self._payment_account_request

    @payment_account_request.setter
    def payment_account_request(self, payment_account_request):
        """Sets the payment_account_request of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest.


        :param payment_account_request: The payment_account_request of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestPaymentAccountRequest
        """

        self._payment_account_request = payment_account_request

    @property
    def sale_transaction_identification(self):
        """Gets the sale_transaction_identification of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest.  # noqa: E501


        :return: The sale_transaction_identification of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification
        """
        return self._sale_transaction_identification

    @sale_transaction_identification.setter
    def sale_transaction_identification(self, sale_transaction_identification):
        """Sets the sale_transaction_identification of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest.


        :param sale_transaction_identification: The sale_transaction_identification of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification
        """

        self._sale_transaction_identification = sale_transaction_identification

    @property
    def stored_value_account_request(self):
        """Gets the stored_value_account_request of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest.  # noqa: E501


        :return: The stored_value_account_request of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestStoredValueAccountRequest
        """
        return self._stored_value_account_request

    @stored_value_account_request.setter
    def stored_value_account_request(self, stored_value_account_request):
        """Sets the stored_value_account_request of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest.


        :param stored_value_account_request: The stored_value_account_request of this PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestStoredValueAccountRequest
        """

        self._stored_value_account_request = stored_value_account_request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
