# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorisation_code': 'object',
        'authorisation_entity': 'PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultAuthorisationEntity',
        'completion_required': 'object',
        'response_to_authorisation': 'PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation',
        'tms_trigger': 'SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger'
    }

    attribute_map = {
        'authorisation_code': 'AuthorisationCode',
        'authorisation_entity': 'AuthorisationEntity',
        'completion_required': 'CompletionRequired',
        'response_to_authorisation': 'ResponseToAuthorisation',
        'tms_trigger': 'TMSTrigger'
    }

    def __init__(self, authorisation_code=None, authorisation_entity=None, completion_required=None, response_to_authorisation=None, tms_trigger=None):  # noqa: E501
        """SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult - a model defined in Swagger"""  # noqa: E501
        self._authorisation_code = None
        self._authorisation_entity = None
        self._completion_required = None
        self._response_to_authorisation = None
        self._tms_trigger = None
        self.discriminator = None
        if authorisation_code is not None:
            self.authorisation_code = authorisation_code
        if authorisation_entity is not None:
            self.authorisation_entity = authorisation_entity
        if completion_required is not None:
            self.completion_required = completion_required
        self.response_to_authorisation = response_to_authorisation
        if tms_trigger is not None:
            self.tms_trigger = tms_trigger

    @property
    def authorisation_code(self):
        """Gets the authorisation_code of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.  # noqa: E501

        Specifies a character string with a maximum length of 8 characters.<br/>  # noqa: E501

        :return: The authorisation_code of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.  # noqa: E501
        :rtype: object
        """
        return self._authorisation_code

    @authorisation_code.setter
    def authorisation_code(self, authorisation_code):
        """Sets the authorisation_code of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.

        Specifies a character string with a maximum length of 8 characters.<br/>  # noqa: E501

        :param authorisation_code: The authorisation_code of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.  # noqa: E501
        :type: object
        """

        self._authorisation_code = authorisation_code

    @property
    def authorisation_entity(self):
        """Gets the authorisation_entity of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.  # noqa: E501


        :return: The authorisation_entity of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultAuthorisationEntity
        """
        return self._authorisation_entity

    @authorisation_entity.setter
    def authorisation_entity(self, authorisation_entity):
        """Sets the authorisation_entity of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.


        :param authorisation_entity: The authorisation_entity of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultAuthorisationEntity
        """

        self._authorisation_entity = authorisation_entity

    @property
    def completion_required(self):
        """Gets the completion_required of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.  # noqa: E501

        A flag indicating a True or False value.<br/>  # noqa: E501

        :return: The completion_required of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.  # noqa: E501
        :rtype: object
        """
        return self._completion_required

    @completion_required.setter
    def completion_required(self, completion_required):
        """Sets the completion_required of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.

        A flag indicating a True or False value.<br/>  # noqa: E501

        :param completion_required: The completion_required of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.  # noqa: E501
        :type: object
        """

        self._completion_required = completion_required

    @property
    def response_to_authorisation(self):
        """Gets the response_to_authorisation of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.  # noqa: E501


        :return: The response_to_authorisation of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation
        """
        return self._response_to_authorisation

    @response_to_authorisation.setter
    def response_to_authorisation(self, response_to_authorisation):
        """Sets the response_to_authorisation of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.


        :param response_to_authorisation: The response_to_authorisation of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionAuthorisationResultResponseToAuthorisation
        """
        if response_to_authorisation is None:
            raise ValueError("Invalid value for `response_to_authorisation`, must not be `None`")  # noqa: E501

        self._response_to_authorisation = response_to_authorisation

    @property
    def tms_trigger(self):
        """Gets the tms_trigger of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.  # noqa: E501


        :return: The tms_trigger of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.  # noqa: E501
        :rtype: SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger
        """
        return self._tms_trigger

    @tms_trigger.setter
    def tms_trigger(self, tms_trigger):
        """Sets the tms_trigger of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.


        :param tms_trigger: The tms_trigger of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult.  # noqa: E501
        :type: SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResultTMSTrigger
        """

        self._tms_trigger = tms_trigger

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
