# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'object',
        'additional_available_product': 'object',
        'allowed_product_code': 'object',
        'authorisation_result': 'SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult',
        'balance': 'SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseBalance',
        'currency_conversion_eligibility': 'PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion',
        'not_allowed_product_code': 'object',
        'protected_balance': 'PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData'
    }

    attribute_map = {
        'action': 'Action',
        'additional_available_product': 'AdditionalAvailableProduct',
        'allowed_product_code': 'AllowedProductCode',
        'authorisation_result': 'AuthorisationResult',
        'balance': 'Balance',
        'currency_conversion_eligibility': 'CurrencyConversionEligibility',
        'not_allowed_product_code': 'NotAllowedProductCode',
        'protected_balance': 'ProtectedBalance'
    }

    def __init__(self, action=None, additional_available_product=None, allowed_product_code=None, authorisation_result=None, balance=None, currency_conversion_eligibility=None, not_allowed_product_code=None, protected_balance=None):  # noqa: E501
        """SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._additional_available_product = None
        self._allowed_product_code = None
        self._authorisation_result = None
        self._balance = None
        self._currency_conversion_eligibility = None
        self._not_allowed_product_code = None
        self._protected_balance = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if additional_available_product is not None:
            self.additional_available_product = additional_available_product
        if allowed_product_code is not None:
            self.allowed_product_code = allowed_product_code
        self.authorisation_result = authorisation_result
        if balance is not None:
            self.balance = balance
        if currency_conversion_eligibility is not None:
            self.currency_conversion_eligibility = currency_conversion_eligibility
        if not_allowed_product_code is not None:
            self.not_allowed_product_code = not_allowed_product_code
        if protected_balance is not None:
            self.protected_balance = protected_balance

    @property
    def action(self):
        """Gets the action of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501

        Set of actions to be performed by the POI (Point Of Interaction) system.  # noqa: E501

        :return: The action of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501
        :rtype: object
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.

        Set of actions to be performed by the POI (Point Of Interaction) system.  # noqa: E501

        :param action: The action of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501
        :type: object
        """

        self._action = action

    @property
    def additional_available_product(self):
        """Gets the additional_available_product of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501

        Products that may be added to the purchase after the authorisation.  # noqa: E501

        :return: The additional_available_product of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501
        :rtype: object
        """
        return self._additional_available_product

    @additional_available_product.setter
    def additional_available_product(self, additional_available_product):
        """Sets the additional_available_product of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.

        Products that may be added to the purchase after the authorisation.  # noqa: E501

        :param additional_available_product: The additional_available_product of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501
        :type: object
        """

        self._additional_available_product = additional_available_product

    @property
    def allowed_product_code(self):
        """Gets the allowed_product_code of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501

        Product code which are allowed by the payment card.  # noqa: E501

        :return: The allowed_product_code of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501
        :rtype: object
        """
        return self._allowed_product_code

    @allowed_product_code.setter
    def allowed_product_code(self, allowed_product_code):
        """Sets the allowed_product_code of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.

        Product code which are allowed by the payment card.  # noqa: E501

        :param allowed_product_code: The allowed_product_code of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501
        :type: object
        """

        self._allowed_product_code = allowed_product_code

    @property
    def authorisation_result(self):
        """Gets the authorisation_result of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501


        :return: The authorisation_result of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501
        :rtype: SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult
        """
        return self._authorisation_result

    @authorisation_result.setter
    def authorisation_result(self, authorisation_result):
        """Sets the authorisation_result of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.


        :param authorisation_result: The authorisation_result of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501
        :type: SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseAuthorisationResult
        """
        if authorisation_result is None:
            raise ValueError("Invalid value for `authorisation_result`, must not be `None`")  # noqa: E501

        self._authorisation_result = authorisation_result

    @property
    def balance(self):
        """Gets the balance of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501


        :return: The balance of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501
        :rtype: SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseBalance
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.


        :param balance: The balance of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501
        :type: SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponseBalance
        """

        self._balance = balance

    @property
    def currency_conversion_eligibility(self):
        """Gets the currency_conversion_eligibility of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501


        :return: The currency_conversion_eligibility of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion
        """
        return self._currency_conversion_eligibility

    @currency_conversion_eligibility.setter
    def currency_conversion_eligibility(self, currency_conversion_eligibility):
        """Sets the currency_conversion_eligibility of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.


        :param currency_conversion_eligibility: The currency_conversion_eligibility of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestLoyaltyRequestTransactionOriginalPOITransactionTransactionDetailsCurrencyConversionResultConversion
        """

        self._currency_conversion_eligibility = currency_conversion_eligibility

    @property
    def not_allowed_product_code(self):
        """Gets the not_allowed_product_code of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501

        Product code not allowed by the payment card.  # noqa: E501

        :return: The not_allowed_product_code of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501
        :rtype: object
        """
        return self._not_allowed_product_code

    @not_allowed_product_code.setter
    def not_allowed_product_code(self, not_allowed_product_code):
        """Sets the not_allowed_product_code of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.

        Product code not allowed by the payment card.  # noqa: E501

        :param not_allowed_product_code: The not_allowed_product_code of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501
        :type: object
        """

        self._not_allowed_product_code = not_allowed_product_code

    @property
    def protected_balance(self):
        """Gets the protected_balance of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501


        :return: The protected_balance of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData
        """
        return self._protected_balance

    @protected_balance.setter
    def protected_balance(self, protected_balance):
        """Sets the protected_balance of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.


        :param protected_balance: The protected_balance of this SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestEnvironmentCardProtectedCardData
        """

        self._protected_balance = protected_balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultTransactionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
