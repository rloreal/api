# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_sequence_number': 'object',
        'cardholder_name': 'object',
        'effective_date': 'object',
        'pan': 'object',
        'service_code': 'object',
        'track1': 'object',
        'track2': 'object',
        'track3': 'object',
        'expiry_date': 'object'
    }

    attribute_map = {
        'card_sequence_number': 'CardSequenceNumber',
        'cardholder_name': 'CardholderName',
        'effective_date': 'EffectiveDate',
        'pan': 'PAN',
        'service_code': 'ServiceCode',
        'track1': 'Track1',
        'track2': 'Track2',
        'track3': 'Track3',
        'expiry_date': 'ExpiryDate'
    }

    def __init__(self, card_sequence_number=None, cardholder_name=None, effective_date=None, pan=None, service_code=None, track1=None, track2=None, track3=None, expiry_date=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData - a model defined in Swagger"""  # noqa: E501
        self._card_sequence_number = None
        self._cardholder_name = None
        self._effective_date = None
        self._pan = None
        self._service_code = None
        self._track1 = None
        self._track2 = None
        self._track3 = None
        self._expiry_date = None
        self.discriminator = None
        if card_sequence_number is not None:
            self.card_sequence_number = card_sequence_number
        if cardholder_name is not None:
            self.cardholder_name = cardholder_name
        if effective_date is not None:
            self.effective_date = effective_date
        self.pan = pan
        if service_code is not None:
            self.service_code = service_code
        if track1 is not None:
            self.track1 = track1
        if track2 is not None:
            self.track2 = track2
        if track3 is not None:
            self.track3 = track3
        if expiry_date is not None:
            self.expiry_date = expiry_date

    @property
    def card_sequence_number(self):
        """Gets the card_sequence_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501

        Specifies a numeric string with a minimum length of 2 digits, and a maximum length of 3 digits.<br/>  # noqa: E501

        :return: The card_sequence_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :rtype: object
        """
        return self._card_sequence_number

    @card_sequence_number.setter
    def card_sequence_number(self, card_sequence_number):
        """Sets the card_sequence_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.

        Specifies a numeric string with a minimum length of 2 digits, and a maximum length of 3 digits.<br/>  # noqa: E501

        :param card_sequence_number: The card_sequence_number of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :type: object
        """

        self._card_sequence_number = card_sequence_number

    @property
    def cardholder_name(self):
        """Gets the cardholder_name of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501

        Specifies a character string with a maximum length of 45 characters.<br/>  # noqa: E501

        :return: The cardholder_name of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :rtype: object
        """
        return self._cardholder_name

    @cardholder_name.setter
    def cardholder_name(self, cardholder_name):
        """Sets the cardholder_name of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.

        Specifies a character string with a maximum length of 45 characters.<br/>  # noqa: E501

        :param cardholder_name: The cardholder_name of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :type: object
        """

        self._cardholder_name = cardholder_name

    @property
    def effective_date(self):
        """Gets the effective_date of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501

        Specifies a character string with a maximum length of 10 characters.<br/>  # noqa: E501

        :return: The effective_date of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :rtype: object
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.

        Specifies a character string with a maximum length of 10 characters.<br/>  # noqa: E501

        :param effective_date: The effective_date of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :type: object
        """

        self._effective_date = effective_date

    @property
    def pan(self):
        """Gets the pan of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501

        Specifies a numeric string with a minimum length of 8 digits, and a maximum length of 28 digits.<br/>  # noqa: E501

        :return: The pan of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :rtype: object
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """Sets the pan of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.

        Specifies a numeric string with a minimum length of 8 digits, and a maximum length of 28 digits.<br/>  # noqa: E501

        :param pan: The pan of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :type: object
        """
        if pan is None:
            raise ValueError("Invalid value for `pan`, must not be `None`")  # noqa: E501

        self._pan = pan

    @property
    def service_code(self):
        """Gets the service_code of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501

        Specifies a numeric string with an exact length of 3 digits.<br/>  # noqa: E501

        :return: The service_code of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :rtype: object
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.

        Specifies a numeric string with an exact length of 3 digits.<br/>  # noqa: E501

        :param service_code: The service_code of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :type: object
        """

        self._service_code = service_code

    @property
    def track1(self):
        """Gets the track1 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501

        Specifies a character string with a maximum length of 76 characters.<br/>  # noqa: E501

        :return: The track1 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :rtype: object
        """
        return self._track1

    @track1.setter
    def track1(self, track1):
        """Sets the track1 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.

        Specifies a character string with a maximum length of 76 characters.<br/>  # noqa: E501

        :param track1: The track1 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :type: object
        """

        self._track1 = track1

    @property
    def track2(self):
        """Gets the track2 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501

        Specifies a character string with a maximum length of 37 characters.<br/>  # noqa: E501

        :return: The track2 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :rtype: object
        """
        return self._track2

    @track2.setter
    def track2(self, track2):
        """Sets the track2 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.

        Specifies a character string with a maximum length of 37 characters.<br/>  # noqa: E501

        :param track2: The track2 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :type: object
        """

        self._track2 = track2

    @property
    def track3(self):
        """Gets the track3 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501

        Specifies a character string with a maximum length of 104 characters.<br/>  # noqa: E501

        :return: The track3 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :rtype: object
        """
        return self._track3

    @track3.setter
    def track3(self, track3):
        """Sets the track3 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.

        Specifies a character string with a maximum length of 104 characters.<br/>  # noqa: E501

        :param track3: The track3 of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :type: object
        """

        self._track3 = track3

    @property
    def expiry_date(self):
        """Gets the expiry_date of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501

        Specifies a character string with a maximum length of 10 characters.<br/>  # noqa: E501

        :return: The expiry_date of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :rtype: object
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.

        Specifies a character string with a maximum length of 10 characters.<br/>  # noqa: E501

        :param expiry_date: The expiry_date of this PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData.  # noqa: E501
        :type: object
        """

        self._expiry_date = expiry_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestEnvironmentCardPlainCardData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
