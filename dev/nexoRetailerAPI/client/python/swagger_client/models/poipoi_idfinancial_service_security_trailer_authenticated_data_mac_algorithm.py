# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'algorithm': 'object',
        'parameter': 'PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithmParameter'
    }

    attribute_map = {
        'algorithm': 'Algorithm',
        'parameter': 'Parameter'
    }

    def __init__(self, algorithm=None, parameter=None):  # noqa: E501
        """PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithm - a model defined in Swagger"""  # noqa: E501
        self._algorithm = None
        self._parameter = None
        self.discriminator = None
        self.algorithm = algorithm
        if parameter is not None:
            self.parameter = parameter

    @property
    def algorithm(self):
        """Gets the algorithm of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithm.  # noqa: E501

        Cryptographic algorithms for the MAC (Message Authentication Code).<br/>- **MACC: RetailCBCMAC**  : *Retail CBC (Chaining Block Cypher) MAC (Message Authentication Code) (cf. ISO 9807, ANSI X9.19) - (ASN.1 Object Identifier: id-retail-cbc-mac).*<br/>- **MCCS: RetailSHA256MAC**  : *Retail-CBC-MAC with SHA-256 (Secure HAsh standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-256).*<br/>- **CMA1: SHA256CMACwithAES128**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message.*<br/>- **MCC1: RetailSHA1MAC**  : *The DEPRECATED Retail-CBC-MAC with SHA-1 (Secure Hash standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-1).*<br/>- **CMA9: SHA384CMACwithAES192**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-384 digest of the message.*<br/>- **CMA5: SHA512CMACwithAES256**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-512 digest of the message.*<br/>- **CMA2: SHA256CMACWithAES256**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message.*<br/>- **CM31: SHA3-256CMACWithAES128**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-256 digest of the message.*<br/>- **CM32: SHA3-384CMACWithAES192**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-384 digest of the message.*<br/>- **CM33: SHA3-512CMACWithAES256**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-512 digest of the message.*<br/>- **MCS3: SHA3-256-3DESMAC**  : *3DES CBC-MAC with SHA3-256 (SecureHAsh standard) and ISO/IEC9797-1 method 2 padding.*<br/>- **CCA1: CMACAES128**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).*<br/>- **CCA2: CMACAES192**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).*<br/>- **CCA3: CMACAES256**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).*<br/>- **S34C: SM3SM4CBC**  : *ShangMi 4 enciphering method used in CBC mode coupled with ShangMi 3 hash function.*<br/>- **S34R: SM3SM4CTR**  : *ShangMi 4 enciphering method used in CTR mode coupled with ShangMi 3 hash function.*<br/>  # noqa: E501

        :return: The algorithm of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithm.  # noqa: E501
        :rtype: object
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithm.

        Cryptographic algorithms for the MAC (Message Authentication Code).<br/>- **MACC: RetailCBCMAC**  : *Retail CBC (Chaining Block Cypher) MAC (Message Authentication Code) (cf. ISO 9807, ANSI X9.19) - (ASN.1 Object Identifier: id-retail-cbc-mac).*<br/>- **MCCS: RetailSHA256MAC**  : *Retail-CBC-MAC with SHA-256 (Secure HAsh standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-256).*<br/>- **CMA1: SHA256CMACwithAES128**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message.*<br/>- **MCC1: RetailSHA1MAC**  : *The DEPRECATED Retail-CBC-MAC with SHA-1 (Secure Hash standard) - (ASN.1 Object Identifier: id-retail-cbc-mac-sha-1).*<br/>- **CMA9: SHA384CMACwithAES192**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-384 digest of the message.*<br/>- **CMA5: SHA512CMACwithAES256**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-512 digest of the message.*<br/>- **CMA2: SHA256CMACWithAES256**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA-256 digest of the message.*<br/>- **CM31: SHA3-256CMACWithAES128**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-256 digest of the message.*<br/>- **CM32: SHA3-384CMACWithAES192**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-384 digest of the message.*<br/>- **CM33: SHA3-512CMACWithAES256**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard). The CMAC algorithm is computed on the SHA3-512 digest of the message.*<br/>- **MCS3: SHA3-256-3DESMAC**  : *3DES CBC-MAC with SHA3-256 (SecureHAsh standard) and ISO/IEC9797-1 method 2 padding.*<br/>- **CCA1: CMACAES128**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 128 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).*<br/>- **CCA2: CMACAES192**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 192 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).*<br/>- **CCA3: CMACAES256**  : *CMAC (Cipher based Message Authentication Code) defined by the National Institute of Standards and Technology (NIST 800-38B - May 2005), using the block cipher Advanced Encryption Standard with a 256 bits cryptographic key, approved by the Federal Information Processing Standards (FIPS 197 - November 6, 2001 - Advanced Encryption Standard).*<br/>- **S34C: SM3SM4CBC**  : *ShangMi 4 enciphering method used in CBC mode coupled with ShangMi 3 hash function.*<br/>- **S34R: SM3SM4CTR**  : *ShangMi 4 enciphering method used in CTR mode coupled with ShangMi 3 hash function.*<br/>  # noqa: E501

        :param algorithm: The algorithm of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithm.  # noqa: E501
        :type: object
        """
        if algorithm is None:
            raise ValueError("Invalid value for `algorithm`, must not be `None`")  # noqa: E501

        self._algorithm = algorithm

    @property
    def parameter(self):
        """Gets the parameter of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithm.  # noqa: E501


        :return: The parameter of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithm.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithmParameter
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithm.


        :param parameter: The parameter of this PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithm.  # noqa: E501
        :type: PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithmParameter
        """

        self._parameter = parameter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceSecurityTrailerAuthenticatedDataMACAlgorithm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
