# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_contact_information': 'object',
        'customer_service': 'object',
        'email': 'object',
        'phone': 'object',
        'postal_address': 'PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderBillingAddress',
        'url_address': 'object'
    }

    attribute_map = {
        'additional_contact_information': 'AdditionalContactInformation',
        'customer_service': 'CustomerService',
        'email': 'Email',
        'phone': 'Phone',
        'postal_address': 'PostalAddress',
        'url_address': 'URLAddress'
    }

    def __init__(self, additional_contact_information=None, customer_service=None, email=None, phone=None, postal_address=None, url_address=None):  # noqa: E501
        """PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact - a model defined in Swagger"""  # noqa: E501
        self._additional_contact_information = None
        self._customer_service = None
        self._email = None
        self._phone = None
        self._postal_address = None
        self._url_address = None
        self.discriminator = None
        if additional_contact_information is not None:
            self.additional_contact_information = additional_contact_information
        if customer_service is not None:
            self.customer_service = customer_service
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if postal_address is not None:
            self.postal_address = postal_address
        if url_address is not None:
            self.url_address = url_address

    @property
    def additional_contact_information(self):
        """Gets the additional_contact_information of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501

        Specifies a character string with a maximum length of 256 characters.<br/>  # noqa: E501

        :return: The additional_contact_information of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501
        :rtype: object
        """
        return self._additional_contact_information

    @additional_contact_information.setter
    def additional_contact_information(self, additional_contact_information):
        """Sets the additional_contact_information of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.

        Specifies a character string with a maximum length of 256 characters.<br/>  # noqa: E501

        :param additional_contact_information: The additional_contact_information of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501
        :type: object
        """

        self._additional_contact_information = additional_contact_information

    @property
    def customer_service(self):
        """Gets the customer_service of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501

        The collection of information which identifies a specific phone or FAX number as defined by telecom services. It consists of a \"+\" followed by the country code (from 1 to 3 characters) then a \"-\" and finally, any combination of numbers, \"(\", \")\", \"+\" and \"-\" (up to 30 characters).<br/>  # noqa: E501

        :return: The customer_service of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501
        :rtype: object
        """
        return self._customer_service

    @customer_service.setter
    def customer_service(self, customer_service):
        """Sets the customer_service of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.

        The collection of information which identifies a specific phone or FAX number as defined by telecom services. It consists of a \"+\" followed by the country code (from 1 to 3 characters) then a \"-\" and finally, any combination of numbers, \"(\", \")\", \"+\" and \"-\" (up to 30 characters).<br/>  # noqa: E501

        :param customer_service: The customer_service of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501
        :type: object
        """

        self._customer_service = customer_service

    @property
    def email(self):
        """Gets the email of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501

        Specifies a character string with a maximum length of 256 characters.<br/>  # noqa: E501

        :return: The email of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501
        :rtype: object
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.

        Specifies a character string with a maximum length of 256 characters.<br/>  # noqa: E501

        :param email: The email of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501
        :type: object
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501

        The collection of information which identifies a specific phone or FAX number as defined by telecom services. It consists of a \"+\" followed by the country code (from 1 to 3 characters) then a \"-\" and finally, any combination of numbers, \"(\", \")\", \"+\" and \"-\" (up to 30 characters).<br/>  # noqa: E501

        :return: The phone of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501
        :rtype: object
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.

        The collection of information which identifies a specific phone or FAX number as defined by telecom services. It consists of a \"+\" followed by the country code (from 1 to 3 characters) then a \"-\" and finally, any combination of numbers, \"(\", \")\", \"+\" and \"-\" (up to 30 characters).<br/>  # noqa: E501

        :param phone: The phone of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501
        :type: object
        """

        self._phone = phone

    @property
    def postal_address(self):
        """Gets the postal_address of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501


        :return: The postal_address of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501
        :rtype: PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderBillingAddress
        """
        return self._postal_address

    @postal_address.setter
    def postal_address(self, postal_address):
        """Sets the postal_address of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.


        :param postal_address: The postal_address of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501
        :type: PoipoiIdfinancialServiceServiceRequestEnvironmentCardholderBillingAddress
        """

        self._postal_address = postal_address

    @property
    def url_address(self):
        """Gets the url_address of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501

        Specifies a character string with a maximum length of 256 characters.<br/>  # noqa: E501

        :return: The url_address of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501
        :rtype: object
        """
        return self._url_address

    @url_address.setter
    def url_address(self, url_address):
        """Sets the url_address of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.

        Specifies a character string with a maximum length of 256 characters.<br/>  # noqa: E501

        :param url_address: The url_address of this PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact.  # noqa: E501
        :type: object
        """

        self._url_address = url_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoipoiIdfinancialServiceServiceRequestEnvironmentMerchantLocationAndContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
