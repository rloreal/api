# coding: utf-8

"""
    nexo retailer API

    API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: romain.loreal@lorealconsulting.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FinancialApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_service(self, body, poi_id, **kwargs):  # noqa: E501
        """creates a service request to a POI  # noqa: E501

        request a service, such as payment, to be done on the specified POI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service(body, poi_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PoiIdFinancialServiceBody body: (required)
        :param object poi_id: Identifier of the POI (required)
        :param object idempotency_key: The idempotency key is a free identifier created by the client to identify a request. It is used by the service to identify subsequent retries of the same request and ensure idempotent behavior by sending the same response without executing the request a second time.  Clients should be careful as any subsequent requests with the same key may return the same response without further check. Therefore, it is recommended to use an UUID version 4 (random) or any other random string with enough entropy to avoid collisions.  Idempotency keys expire after 24 hours. Clients are responsible to stay within this limits, if they require idempotent behavior. 
        :param object traceparent: describes the position of the incoming request in its trace graph  in a portable, fixed-length format.  Its design focuses on fast parsing.  Every tracing tool MUST properly set traceparent even when it only relies  on vendor-specific information in tracestate. The traceparent HTTP header field identifies the incoming request in a tracing system. It has four fields: - version-format: 2 bytes, \"00-\" in ASCII - trace-id: 32 bytes, a unique identifier for the trace, represented as a 16-byte array, formatted as a 32-digit hexadecimal number - parent-id: 16 bytes, a unique identifier for the span, represented as an 8-byte array, formatted as a 16-digit hexadecimal number - trace-flags: An 8-bit field that controls tracing flags such as sampling, trace level, etc   Example Value = 00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01   base16(version) = 00   base16(trace-id) = 4bf92f3577b34da6a3ce929d0e0e4736   base16(parent-id) = 00f067aa0ba902b7   base16(trace-flags) = 01  // sampled 
        :param object tracestate: extends traceparent with vendor-specific data represented by a set of name/value pairs. Storing information in tracestate is optional. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_with_http_info(body, poi_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_with_http_info(body, poi_id, **kwargs)  # noqa: E501
            return data

    def create_service_with_http_info(self, body, poi_id, **kwargs):  # noqa: E501
        """creates a service request to a POI  # noqa: E501

        request a service, such as payment, to be done on the specified POI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_with_http_info(body, poi_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PoiIdFinancialServiceBody body: (required)
        :param object poi_id: Identifier of the POI (required)
        :param object idempotency_key: The idempotency key is a free identifier created by the client to identify a request. It is used by the service to identify subsequent retries of the same request and ensure idempotent behavior by sending the same response without executing the request a second time.  Clients should be careful as any subsequent requests with the same key may return the same response without further check. Therefore, it is recommended to use an UUID version 4 (random) or any other random string with enough entropy to avoid collisions.  Idempotency keys expire after 24 hours. Clients are responsible to stay within this limits, if they require idempotent behavior. 
        :param object traceparent: describes the position of the incoming request in its trace graph  in a portable, fixed-length format.  Its design focuses on fast parsing.  Every tracing tool MUST properly set traceparent even when it only relies  on vendor-specific information in tracestate. The traceparent HTTP header field identifies the incoming request in a tracing system. It has four fields: - version-format: 2 bytes, \"00-\" in ASCII - trace-id: 32 bytes, a unique identifier for the trace, represented as a 16-byte array, formatted as a 32-digit hexadecimal number - parent-id: 16 bytes, a unique identifier for the span, represented as an 8-byte array, formatted as a 16-digit hexadecimal number - trace-flags: An 8-bit field that controls tracing flags such as sampling, trace level, etc   Example Value = 00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01   base16(version) = 00   base16(trace-id) = 4bf92f3577b34da6a3ce929d0e0e4736   base16(parent-id) = 00f067aa0ba902b7   base16(trace-flags) = 01  // sampled 
        :param object tracestate: extends traceparent with vendor-specific data represented by a set of name/value pairs. Storing information in tracestate is optional. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'poi_id', 'idempotency_key', 'traceparent', 'tracestate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_service`")  # noqa: E501
        # verify the required parameter 'poi_id' is set
        if ('poi_id' not in params or
                params['poi_id'] is None):
            raise ValueError("Missing the required parameter `poi_id` when calling `create_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'poi_id' in params:
            path_params['poiId'] = params['poi_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'idempotency_key' in params:
            header_params['Idempotency-Key'] = params['idempotency_key']  # noqa: E501
        if 'traceparent' in params:
            header_params['traceparent'] = params['traceparent']  # noqa: E501
        if 'tracestate' in params:
            header_params['tracestate'] = params['tracestate']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/poi/{poiId}/financialService', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
