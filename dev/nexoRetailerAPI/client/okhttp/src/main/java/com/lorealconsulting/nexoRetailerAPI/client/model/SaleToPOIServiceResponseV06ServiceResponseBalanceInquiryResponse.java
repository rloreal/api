/*
 * nexo retailer API
 * API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ 
 *
 * OpenAPI spec version: 0.1.0
 * Contact: romain.loreal@lorealconsulting.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.lorealconsulting.nexoRetailerAPI.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.lorealconsulting.nexoRetailerAPI.client.model.PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestAccount;
import com.lorealconsulting.nexoRetailerAPI.client.model.PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification;
import com.lorealconsulting.nexoRetailerAPI.client.model.SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponsePaymentAccount;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Content of the balance inquiry response message.&lt;br/&gt;
 */
@Schema(description = "Content of the balance inquiry response message.<br/>")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-09T14:21:17.741236018+02:00[Europe/Paris]")

public class SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse {
  @SerializedName("LoyaltyAccount")
  private PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestAccount loyaltyAccount = null;

  @SerializedName("POITransactionIdentification")
  private PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification poITransactionIdentification = null;

  @SerializedName("PaymentAccount")
  private SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponsePaymentAccount paymentAccount = null;

  @SerializedName("ReceiptV07")
  private Object receiptV07 = null;

  @SerializedName("SaleTransactionIdentification")
  private PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification saleTransactionIdentification = null;

  @SerializedName("StoredValueAccount")
  private Object storedValueAccount = null;

  public SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse loyaltyAccount(PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestAccount loyaltyAccount) {
    this.loyaltyAccount = loyaltyAccount;
    return this;
  }

   /**
   * Get loyaltyAccount
   * @return loyaltyAccount
  **/
  @Schema(description = "")
  public PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestAccount getLoyaltyAccount() {
    return loyaltyAccount;
  }

  public void setLoyaltyAccount(PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestLoyaltyAccountRequestAccount loyaltyAccount) {
    this.loyaltyAccount = loyaltyAccount;
  }

  public SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse poITransactionIdentification(PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification poITransactionIdentification) {
    this.poITransactionIdentification = poITransactionIdentification;
    return this;
  }

   /**
   * Get poITransactionIdentification
   * @return poITransactionIdentification
  **/
  @Schema(description = "")
  public PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification getPoITransactionIdentification() {
    return poITransactionIdentification;
  }

  public void setPoITransactionIdentification(PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification poITransactionIdentification) {
    this.poITransactionIdentification = poITransactionIdentification;
  }

  public SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse paymentAccount(SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponsePaymentAccount paymentAccount) {
    this.paymentAccount = paymentAccount;
    return this;
  }

   /**
   * Get paymentAccount
   * @return paymentAccount
  **/
  @Schema(description = "")
  public SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponsePaymentAccount getPaymentAccount() {
    return paymentAccount;
  }

  public void setPaymentAccount(SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponsePaymentAccount paymentAccount) {
    this.paymentAccount = paymentAccount;
  }

  public SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse receiptV07(Object receiptV07) {
    this.receiptV07 = receiptV07;
    return this;
  }

   /**
   * Scope  The Receipt message is sent by the transaction administrator to a member of the system. It is sent to acknowledge the receipt of one or multiple messages sent previously.  The Receipt message is an application receipt acknowledgement and conveys information about the processing of the original message(s).  Usage  The Receipt message is used when the exchange of messages takes place in an asynchronous manner.  This may happen, for instance, when an action is requested from the transaction administrator (a deletion, modification or cancellation). The transaction administrator will first acknowledge the request (with a Receipt message) and then execute it.  The message can contain information based on the following elements: reference of the message(s) it acknowledges, the status code (optional) and further explanation:  - reference of the message it acknowledges  - potentially, a status code and an explanation.
   * @return receiptV07
  **/
  @Schema(description = "Scope  The Receipt message is sent by the transaction administrator to a member of the system. It is sent to acknowledge the receipt of one or multiple messages sent previously.  The Receipt message is an application receipt acknowledgement and conveys information about the processing of the original message(s).  Usage  The Receipt message is used when the exchange of messages takes place in an asynchronous manner.  This may happen, for instance, when an action is requested from the transaction administrator (a deletion, modification or cancellation). The transaction administrator will first acknowledge the request (with a Receipt message) and then execute it.  The message can contain information based on the following elements: reference of the message(s) it acknowledges, the status code (optional) and further explanation:  - reference of the message it acknowledges  - potentially, a status code and an explanation.")
  public Object getReceiptV07() {
    return receiptV07;
  }

  public void setReceiptV07(Object receiptV07) {
    this.receiptV07 = receiptV07;
  }

  public SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse saleTransactionIdentification(PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification saleTransactionIdentification) {
    this.saleTransactionIdentification = saleTransactionIdentification;
    return this;
  }

   /**
   * Get saleTransactionIdentification
   * @return saleTransactionIdentification
  **/
  @Schema(description = "")
  public PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification getSaleTransactionIdentification() {
    return saleTransactionIdentification;
  }

  public void setSaleTransactionIdentification(PoipoiIdfinancialServiceServiceRequestBalanceInquiryRequestSaleTransactionIdentification saleTransactionIdentification) {
    this.saleTransactionIdentification = saleTransactionIdentification;
  }

  public SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse storedValueAccount(Object storedValueAccount) {
    this.storedValueAccount = storedValueAccount;
    return this;
  }

   /**
   * Stored value account information.
   * @return storedValueAccount
  **/
  @Schema(description = "Stored value account information.")
  public Object getStoredValueAccount() {
    return storedValueAccount;
  }

  public void setStoredValueAccount(Object storedValueAccount) {
    this.storedValueAccount = storedValueAccount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse saleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse = (SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse) o;
    return Objects.equals(this.loyaltyAccount, saleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.loyaltyAccount) &&
        Objects.equals(this.poITransactionIdentification, saleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.poITransactionIdentification) &&
        Objects.equals(this.paymentAccount, saleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.paymentAccount) &&
        Objects.equals(this.receiptV07, saleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.receiptV07) &&
        Objects.equals(this.saleTransactionIdentification, saleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.saleTransactionIdentification) &&
        Objects.equals(this.storedValueAccount, saleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse.storedValueAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loyaltyAccount, poITransactionIdentification, paymentAccount, receiptV07, saleTransactionIdentification, storedValueAccount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaleToPOIServiceResponseV06ServiceResponseBalanceInquiryResponse {\n");
    
    sb.append("    loyaltyAccount: ").append(toIndentedString(loyaltyAccount)).append("\n");
    sb.append("    poITransactionIdentification: ").append(toIndentedString(poITransactionIdentification)).append("\n");
    sb.append("    paymentAccount: ").append(toIndentedString(paymentAccount)).append("\n");
    sb.append("    receiptV07: ").append(toIndentedString(receiptV07)).append("\n");
    sb.append("    saleTransactionIdentification: ").append(toIndentedString(saleTransactionIdentification)).append("\n");
    sb.append("    storedValueAccount: ").append(toIndentedString(storedValueAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
