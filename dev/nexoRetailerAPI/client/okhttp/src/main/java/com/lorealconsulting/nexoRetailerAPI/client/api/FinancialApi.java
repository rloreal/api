/*
 * nexo retailer API
 * API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ 
 *
 * OpenAPI spec version: 0.1.0
 * Contact: romain.loreal@lorealconsulting.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.lorealconsulting.nexoRetailerAPI.client.api;

import com.lorealconsulting.nexoRetailerAPI.client.invoker.ApiCallback;
import com.lorealconsulting.nexoRetailerAPI.client.invoker.ApiClient;
import com.lorealconsulting.nexoRetailerAPI.client.invoker.ApiException;
import com.lorealconsulting.nexoRetailerAPI.client.invoker.ApiResponse;
import com.lorealconsulting.nexoRetailerAPI.client.invoker.Configuration;
import com.lorealconsulting.nexoRetailerAPI.client.invoker.Pair;
import com.lorealconsulting.nexoRetailerAPI.client.invoker.ProgressRequestBody;
import com.lorealconsulting.nexoRetailerAPI.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.lorealconsulting.nexoRetailerAPI.client.model.PoiIdFinancialServiceBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FinancialApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public FinancialApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FinancialApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for createService
     * @param body  (required)
     * @param poiId Identifier of the POI (required)
     * @param idempotencyKey The idempotency key is a free identifier created by the client to identify a request. It is used by the service to identify subsequent retries of the same request and ensure idempotent behavior by sending the same response without executing the request a second time.  Clients should be careful as any subsequent requests with the same key may return the same response without further check. Therefore, it is recommended to use an UUID version 4 (random) or any other random string with enough entropy to avoid collisions.  Idempotency keys expire after 24 hours. Clients are responsible to stay within this limits, if they require idempotent behavior.  (optional)
     * @param traceparent describes the position of the incoming request in its trace graph  in a portable, fixed-length format.  Its design focuses on fast parsing.  Every tracing tool MUST properly set traceparent even when it only relies  on vendor-specific information in tracestate. The traceparent HTTP header field identifies the incoming request in a tracing system. It has four fields: - version-format: 2 bytes, \&quot;00-\&quot; in ASCII - trace-id: 32 bytes, a unique identifier for the trace, represented as a 16-byte array, formatted as a 32-digit hexadecimal number - parent-id: 16 bytes, a unique identifier for the span, represented as an 8-byte array, formatted as a 16-digit hexadecimal number - trace-flags: An 8-bit field that controls tracing flags such as sampling, trace level, etc   Example Value &#x3D; 00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01   base16(version) &#x3D; 00   base16(trace-id) &#x3D; 4bf92f3577b34da6a3ce929d0e0e4736   base16(parent-id) &#x3D; 00f067aa0ba902b7   base16(trace-flags) &#x3D; 01  // sampled  (optional)
     * @param tracestate extends traceparent with vendor-specific data represented by a set of name/value pairs. Storing information in tracestate is optional.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createServiceCall(PoiIdFinancialServiceBody body, Object poiId, Object idempotencyKey, Object traceparent, Object tracestate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/poi/{poiId}/financialService"
            .replaceAll("\\{" + "poiId" + "\\}", apiClient.escapeString(poiId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (idempotencyKey != null)
        localVarHeaderParams.put("Idempotency-Key", apiClient.parameterToString(idempotencyKey));
        if (traceparent != null)
        localVarHeaderParams.put("traceparent", apiClient.parameterToString(traceparent));
        if (tracestate != null)
        localVarHeaderParams.put("tracestate", apiClient.parameterToString(tracestate));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createServiceValidateBeforeCall(PoiIdFinancialServiceBody body, Object poiId, Object idempotencyKey, Object traceparent, Object tracestate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createService(Async)");
        }
        // verify the required parameter 'poiId' is set
        if (poiId == null) {
            throw new ApiException("Missing the required parameter 'poiId' when calling createService(Async)");
        }
        
        com.squareup.okhttp.Call call = createServiceCall(body, poiId, idempotencyKey, traceparent, tracestate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * creates a service request to a POI
     * request a service, such as payment, to be done on the specified POI
     * @param body  (required)
     * @param poiId Identifier of the POI (required)
     * @param idempotencyKey The idempotency key is a free identifier created by the client to identify a request. It is used by the service to identify subsequent retries of the same request and ensure idempotent behavior by sending the same response without executing the request a second time.  Clients should be careful as any subsequent requests with the same key may return the same response without further check. Therefore, it is recommended to use an UUID version 4 (random) or any other random string with enough entropy to avoid collisions.  Idempotency keys expire after 24 hours. Clients are responsible to stay within this limits, if they require idempotent behavior.  (optional)
     * @param traceparent describes the position of the incoming request in its trace graph  in a portable, fixed-length format.  Its design focuses on fast parsing.  Every tracing tool MUST properly set traceparent even when it only relies  on vendor-specific information in tracestate. The traceparent HTTP header field identifies the incoming request in a tracing system. It has four fields: - version-format: 2 bytes, \&quot;00-\&quot; in ASCII - trace-id: 32 bytes, a unique identifier for the trace, represented as a 16-byte array, formatted as a 32-digit hexadecimal number - parent-id: 16 bytes, a unique identifier for the span, represented as an 8-byte array, formatted as a 16-digit hexadecimal number - trace-flags: An 8-bit field that controls tracing flags such as sampling, trace level, etc   Example Value &#x3D; 00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01   base16(version) &#x3D; 00   base16(trace-id) &#x3D; 4bf92f3577b34da6a3ce929d0e0e4736   base16(parent-id) &#x3D; 00f067aa0ba902b7   base16(trace-flags) &#x3D; 01  // sampled  (optional)
     * @param tracestate extends traceparent with vendor-specific data represented by a set of name/value pairs. Storing information in tracestate is optional.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createService(PoiIdFinancialServiceBody body, Object poiId, Object idempotencyKey, Object traceparent, Object tracestate) throws ApiException {
        createServiceWithHttpInfo(body, poiId, idempotencyKey, traceparent, tracestate);
    }

    /**
     * creates a service request to a POI
     * request a service, such as payment, to be done on the specified POI
     * @param body  (required)
     * @param poiId Identifier of the POI (required)
     * @param idempotencyKey The idempotency key is a free identifier created by the client to identify a request. It is used by the service to identify subsequent retries of the same request and ensure idempotent behavior by sending the same response without executing the request a second time.  Clients should be careful as any subsequent requests with the same key may return the same response without further check. Therefore, it is recommended to use an UUID version 4 (random) or any other random string with enough entropy to avoid collisions.  Idempotency keys expire after 24 hours. Clients are responsible to stay within this limits, if they require idempotent behavior.  (optional)
     * @param traceparent describes the position of the incoming request in its trace graph  in a portable, fixed-length format.  Its design focuses on fast parsing.  Every tracing tool MUST properly set traceparent even when it only relies  on vendor-specific information in tracestate. The traceparent HTTP header field identifies the incoming request in a tracing system. It has four fields: - version-format: 2 bytes, \&quot;00-\&quot; in ASCII - trace-id: 32 bytes, a unique identifier for the trace, represented as a 16-byte array, formatted as a 32-digit hexadecimal number - parent-id: 16 bytes, a unique identifier for the span, represented as an 8-byte array, formatted as a 16-digit hexadecimal number - trace-flags: An 8-bit field that controls tracing flags such as sampling, trace level, etc   Example Value &#x3D; 00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01   base16(version) &#x3D; 00   base16(trace-id) &#x3D; 4bf92f3577b34da6a3ce929d0e0e4736   base16(parent-id) &#x3D; 00f067aa0ba902b7   base16(trace-flags) &#x3D; 01  // sampled  (optional)
     * @param tracestate extends traceparent with vendor-specific data represented by a set of name/value pairs. Storing information in tracestate is optional.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createServiceWithHttpInfo(PoiIdFinancialServiceBody body, Object poiId, Object idempotencyKey, Object traceparent, Object tracestate) throws ApiException {
        com.squareup.okhttp.Call call = createServiceValidateBeforeCall(body, poiId, idempotencyKey, traceparent, tracestate, null, null);
        return apiClient.execute(call);
    }

    /**
     * creates a service request to a POI (asynchronously)
     * request a service, such as payment, to be done on the specified POI
     * @param body  (required)
     * @param poiId Identifier of the POI (required)
     * @param idempotencyKey The idempotency key is a free identifier created by the client to identify a request. It is used by the service to identify subsequent retries of the same request and ensure idempotent behavior by sending the same response without executing the request a second time.  Clients should be careful as any subsequent requests with the same key may return the same response without further check. Therefore, it is recommended to use an UUID version 4 (random) or any other random string with enough entropy to avoid collisions.  Idempotency keys expire after 24 hours. Clients are responsible to stay within this limits, if they require idempotent behavior.  (optional)
     * @param traceparent describes the position of the incoming request in its trace graph  in a portable, fixed-length format.  Its design focuses on fast parsing.  Every tracing tool MUST properly set traceparent even when it only relies  on vendor-specific information in tracestate. The traceparent HTTP header field identifies the incoming request in a tracing system. It has four fields: - version-format: 2 bytes, \&quot;00-\&quot; in ASCII - trace-id: 32 bytes, a unique identifier for the trace, represented as a 16-byte array, formatted as a 32-digit hexadecimal number - parent-id: 16 bytes, a unique identifier for the span, represented as an 8-byte array, formatted as a 16-digit hexadecimal number - trace-flags: An 8-bit field that controls tracing flags such as sampling, trace level, etc   Example Value &#x3D; 00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01   base16(version) &#x3D; 00   base16(trace-id) &#x3D; 4bf92f3577b34da6a3ce929d0e0e4736   base16(parent-id) &#x3D; 00f067aa0ba902b7   base16(trace-flags) &#x3D; 01  // sampled  (optional)
     * @param tracestate extends traceparent with vendor-specific data represented by a set of name/value pairs. Storing information in tracestate is optional.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createServiceAsync(PoiIdFinancialServiceBody body, Object poiId, Object idempotencyKey, Object traceparent, Object tracestate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createServiceValidateBeforeCall(body, poiId, idempotencyKey, traceparent, tracestate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
