/*
 * nexo retailer API
 * API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ 
 *
 * OpenAPI spec version: 0.1.0
 * Contact: romain.loreal@lorealconsulting.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.lorealconsulting.nexoRetailerAPI.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.lorealconsulting.nexoRetailerAPI.client.model.PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputMessageContentSignature;
import com.lorealconsulting.nexoRetailerAPI.client.model.PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Information to display, print or store.&lt;br/&gt;
 */
@Schema(description = "Information to display, print or store.<br/>")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-09T14:21:17.741236018+02:00[Europe/Paris]")

public class PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput {
  @SerializedName("Format")
  private Object format = null;

  @SerializedName("InformationQualifier")
  private Object informationQualifier = null;

  @SerializedName("MinimumDisplayTime")
  private Object minimumDisplayTime = null;

  @SerializedName("MessageContent")
  private Object messageContent = null;

  @SerializedName("MessageContentSignature")
  private PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputMessageContentSignature messageContentSignature = null;

  @SerializedName("MessageDestination")
  private Object messageDestination = null;

  @SerializedName("OutputBarcode")
  private PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode outputBarcode = null;

  @SerializedName("ResponseRequiredFlag")
  private Object responseRequiredFlag = null;

  public PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput format(Object format) {
    this.format = format;
    return this;
  }

   /**
   * Type of output format.&lt;br/&gt;- **BARC: Barcode**  : *Barcode to output in several possible format.*&lt;br/&gt;- **MENT: MenuEntry**  : *A text to display as a menu before requesting an input.*&lt;br/&gt;- **MREF: MessageReference**  : *Predefined configured messages, identified by a reference.*&lt;br/&gt;- **SREF: ScreenReference**  : *Screen to display identified by a reference.*&lt;br/&gt;- **TEXT: SimpleText**  : *Text without format attributes.*&lt;br/&gt;- **HTML: XHTML**  : *XHTML document which includes a subset of the XHTML output tag.*&lt;br/&gt;
   * @return format
  **/
  @Schema(description = "Type of output format.<br/>- **BARC: Barcode**  : *Barcode to output in several possible format.*<br/>- **MENT: MenuEntry**  : *A text to display as a menu before requesting an input.*<br/>- **MREF: MessageReference**  : *Predefined configured messages, identified by a reference.*<br/>- **SREF: ScreenReference**  : *Screen to display identified by a reference.*<br/>- **TEXT: SimpleText**  : *Text without format attributes.*<br/>- **HTML: XHTML**  : *XHTML document which includes a subset of the XHTML output tag.*<br/>")
  public Object getFormat() {
    return format;
  }

  public void setFormat(Object format) {
    this.format = format;
  }

  public PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput informationQualifier(Object informationQualifier) {
    this.informationQualifier = informationQualifier;
    return this;
  }

   /**
   * Qualification of the information to sent to an output logical device, to display or print to the Cashier or the Customer.&lt;br/&gt;- **CUSA: CustomerAssistance**  : *Input of the Cardholder POI interface which can be entered by the Cashier to assist the Customer.*&lt;br/&gt;- **DISP: Display**  : *Standard display interface.*&lt;br/&gt;- **DOCT: Document**  : *When the POI System wants to print specific document (check, dynamic currency conversion ...). Used by the Sale System when the printer is not located on the Sale System.*&lt;br/&gt;- **ERRO: Error**  : *The information is related to an error situation occurring on the message sender.*&lt;br/&gt;- **INPT: Input**  : *Answer to a question or information to be entered by the Cashier or the Customer, at the request of the POI Terminal or the Sale Terminal.*&lt;br/&gt;- **POIR: POIReplication**  : *Information displayed on the Cardholder POI interface, replicated on the Cashier interface.*&lt;br/&gt;- **RCPT: Receipt**  : *Where you print the Payment receipt that could be located on the Sale System or in some cases a restricted Sale ticket on the POI Terminal.*&lt;br/&gt;- **SOND: Sound**  : *Standard sound interface.*&lt;br/&gt;- **STAT: Status**  : *The information is a new state on which the message sender is entering. For instance, during a payment, the POI could display to the Cashier that POI request an authorisation to the host acquirer.*&lt;br/&gt;- **VCHR: Voucher**  : *Coupons, voucher or special ticket generated by the POI or the Sale System and to be printed.*&lt;br/&gt;
   * @return informationQualifier
  **/
  @Schema(description = "Qualification of the information to sent to an output logical device, to display or print to the Cashier or the Customer.<br/>- **CUSA: CustomerAssistance**  : *Input of the Cardholder POI interface which can be entered by the Cashier to assist the Customer.*<br/>- **DISP: Display**  : *Standard display interface.*<br/>- **DOCT: Document**  : *When the POI System wants to print specific document (check, dynamic currency conversion ...). Used by the Sale System when the printer is not located on the Sale System.*<br/>- **ERRO: Error**  : *The information is related to an error situation occurring on the message sender.*<br/>- **INPT: Input**  : *Answer to a question or information to be entered by the Cashier or the Customer, at the request of the POI Terminal or the Sale Terminal.*<br/>- **POIR: POIReplication**  : *Information displayed on the Cardholder POI interface, replicated on the Cashier interface.*<br/>- **RCPT: Receipt**  : *Where you print the Payment receipt that could be located on the Sale System or in some cases a restricted Sale ticket on the POI Terminal.*<br/>- **SOND: Sound**  : *Standard sound interface.*<br/>- **STAT: Status**  : *The information is a new state on which the message sender is entering. For instance, during a payment, the POI could display to the Cashier that POI request an authorisation to the host acquirer.*<br/>- **VCHR: Voucher**  : *Coupons, voucher or special ticket generated by the POI or the Sale System and to be printed.*<br/>")
  public Object getInformationQualifier() {
    return informationQualifier;
  }

  public void setInformationQualifier(Object informationQualifier) {
    this.informationQualifier = informationQualifier;
  }

  public PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput minimumDisplayTime(Object minimumDisplayTime) {
    this.minimumDisplayTime = minimumDisplayTime;
    return this;
  }

   /**
   * Number of objects represented as an integer.&lt;br/&gt;
   * @return minimumDisplayTime
  **/
  @Schema(example = "123456789012345678", description = "Number of objects represented as an integer.<br/>")
  public Object getMinimumDisplayTime() {
    return minimumDisplayTime;
  }

  public void setMinimumDisplayTime(Object minimumDisplayTime) {
    this.minimumDisplayTime = minimumDisplayTime;
  }

  public PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput messageContent(Object messageContent) {
    this.messageContent = messageContent;
    return this;
  }

   /**
   * Specifies a character string with a maximum length of 20, 000 characters.&lt;br/&gt;
   * @return messageContent
  **/
  @Schema(description = "Specifies a character string with a maximum length of 20, 000 characters.<br/>")
  public Object getMessageContent() {
    return messageContent;
  }

  public void setMessageContent(Object messageContent) {
    this.messageContent = messageContent;
  }

  public PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput messageContentSignature(PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputMessageContentSignature messageContentSignature) {
    this.messageContentSignature = messageContentSignature;
    return this;
  }

   /**
   * Get messageContentSignature
   * @return messageContentSignature
  **/
  @Schema(description = "")
  public PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputMessageContentSignature getMessageContentSignature() {
    return messageContentSignature;
  }

  public void setMessageContentSignature(PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputMessageContentSignature messageContentSignature) {
    this.messageContentSignature = messageContentSignature;
  }

  public PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput messageDestination(Object messageDestination) {
    this.messageDestination = messageDestination;
    return this;
  }

   /**
   * Destination of the message.&lt;br/&gt;- **CDSP: CardholderDisplay**  : *Cardholder display or interface.*&lt;br/&gt;- **CRCP: CardholderReceipt**  : *Cardholder receipt.*&lt;br/&gt;- **MDSP: MerchantDisplay**  : *Merchant display or interface.*&lt;br/&gt;- **MRCP: MerchantReceipt**  : *Merchant receipt.*&lt;br/&gt;- **CRDO: OtherCardholderInterface**  : *Other interface of the cardholder, for instance e-mail or smartphone message.*&lt;br/&gt;
   * @return messageDestination
  **/
  @Schema(required = true, description = "Destination of the message.<br/>- **CDSP: CardholderDisplay**  : *Cardholder display or interface.*<br/>- **CRCP: CardholderReceipt**  : *Cardholder receipt.*<br/>- **MDSP: MerchantDisplay**  : *Merchant display or interface.*<br/>- **MRCP: MerchantReceipt**  : *Merchant receipt.*<br/>- **CRDO: OtherCardholderInterface**  : *Other interface of the cardholder, for instance e-mail or smartphone message.*<br/>")
  public Object getMessageDestination() {
    return messageDestination;
  }

  public void setMessageDestination(Object messageDestination) {
    this.messageDestination = messageDestination;
  }

  public PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput outputBarcode(PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode outputBarcode) {
    this.outputBarcode = outputBarcode;
    return this;
  }

   /**
   * Get outputBarcode
   * @return outputBarcode
  **/
  @Schema(description = "")
  public PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode getOutputBarcode() {
    return outputBarcode;
  }

  public void setOutputBarcode(PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutputOutputBarcode outputBarcode) {
    this.outputBarcode = outputBarcode;
  }

  public PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput responseRequiredFlag(Object responseRequiredFlag) {
    this.responseRequiredFlag = responseRequiredFlag;
    return this;
  }

   /**
   * A flag indicating a True or False value.&lt;br/&gt;
   * @return responseRequiredFlag
  **/
  @Schema(description = "A flag indicating a True or False value.<br/>")
  public Object getResponseRequiredFlag() {
    return responseRequiredFlag;
  }

  public void setResponseRequiredFlag(Object responseRequiredFlag) {
    this.responseRequiredFlag = responseRequiredFlag;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput poipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput = (PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput) o;
    return Objects.equals(this.format, poipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput.format) &&
        Objects.equals(this.informationQualifier, poipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput.informationQualifier) &&
        Objects.equals(this.minimumDisplayTime, poipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput.minimumDisplayTime) &&
        Objects.equals(this.messageContent, poipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput.messageContent) &&
        Objects.equals(this.messageContentSignature, poipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput.messageContentSignature) &&
        Objects.equals(this.messageDestination, poipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput.messageDestination) &&
        Objects.equals(this.outputBarcode, poipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput.outputBarcode) &&
        Objects.equals(this.responseRequiredFlag, poipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput.responseRequiredFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, informationQualifier, minimumDisplayTime, messageContent, messageContentSignature, messageDestination, outputBarcode, responseRequiredFlag);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PoipoiIdfinancialServiceServiceRequestEnableServiceRequestDisplayOutput {\n");
    
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    informationQualifier: ").append(toIndentedString(informationQualifier)).append("\n");
    sb.append("    minimumDisplayTime: ").append(toIndentedString(minimumDisplayTime)).append("\n");
    sb.append("    messageContent: ").append(toIndentedString(messageContent)).append("\n");
    sb.append("    messageContentSignature: ").append(toIndentedString(messageContentSignature)).append("\n");
    sb.append("    messageDestination: ").append(toIndentedString(messageDestination)).append("\n");
    sb.append("    outputBarcode: ").append(toIndentedString(outputBarcode)).append("\n");
    sb.append("    responseRequiredFlag: ").append(toIndentedString(responseRequiredFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
