/*
 * nexo retailer API
 * API defining resources for interactions between POI and POS, using underlying nexo messages  ### Check out its awesome features:  * simply declare POS and POI * send requests to POI * monitor activity ðŸ˜Ž * Receive real-time information about transaction executionsðŸ“ˆ 
 *
 * OpenAPI spec version: 0.1.0
 * Contact: romain.loreal@lorealconsulting.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.lorealconsulting.nexoRetailerAPI.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Provides all information related to a handwritten signature capture.&lt;br/&gt;
 */
@Schema(description = "Provides all information related to a handwritten signature capture.<br/>")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-09T14:21:17.741236018+02:00[Europe/Paris]")

public class SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultImageCapturedSignature {
  @SerializedName("AdditionalInformation")
  private Object additionalInformation = null;

  @SerializedName("ImageData")
  private Object imageData = null;

  @SerializedName("ImageFormat")
  private Object imageFormat = null;

  @SerializedName("ImageReference")
  private Object imageReference = null;

  public SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultImageCapturedSignature additionalInformation(Object additionalInformation) {
    this.additionalInformation = additionalInformation;
    return this;
  }

   /**
   * Specifies a character string with a maximum length of 140 characters.&lt;br/&gt;
   * @return additionalInformation
  **/
  @Schema(description = "Specifies a character string with a maximum length of 140 characters.<br/>")
  public Object getAdditionalInformation() {
    return additionalInformation;
  }

  public void setAdditionalInformation(Object additionalInformation) {
    this.additionalInformation = additionalInformation;
  }

  public SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultImageCapturedSignature imageData(Object imageData) {
    this.imageData = imageData;
    return this;
  }

   /**
   * Binary data of 2MB maximum.&lt;br/&gt;
   * @return imageData
  **/
  @Schema(description = "Binary data of 2MB maximum.<br/>")
  public Object getImageData() {
    return imageData;
  }

  public void setImageData(Object imageData) {
    this.imageData = imageData;
  }

  public SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultImageCapturedSignature imageFormat(Object imageFormat) {
    this.imageFormat = imageFormat;
    return this;
  }

   /**
   * Specifies a character string with a maximum length of 35 characters.&lt;br/&gt;
   * @return imageFormat
  **/
  @Schema(required = true, description = "Specifies a character string with a maximum length of 35 characters.<br/>")
  public Object getImageFormat() {
    return imageFormat;
  }

  public void setImageFormat(Object imageFormat) {
    this.imageFormat = imageFormat;
  }

  public SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultImageCapturedSignature imageReference(Object imageReference) {
    this.imageReference = imageReference;
    return this;
  }

   /**
   * Specifies a character string with a maximum length of 500 characters.&lt;br/&gt;
   * @return imageReference
  **/
  @Schema(description = "Specifies a character string with a maximum length of 500 characters.<br/>")
  public Object getImageReference() {
    return imageReference;
  }

  public void setImageReference(Object imageReference) {
    this.imageReference = imageReference;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultImageCapturedSignature saleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultImageCapturedSignature = (SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultImageCapturedSignature) o;
    return Objects.equals(this.additionalInformation, saleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultImageCapturedSignature.additionalInformation) &&
        Objects.equals(this.imageData, saleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultImageCapturedSignature.imageData) &&
        Objects.equals(this.imageFormat, saleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultImageCapturedSignature.imageFormat) &&
        Objects.equals(this.imageReference, saleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultImageCapturedSignature.imageReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalInformation, imageData, imageFormat, imageReference);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaleToPOIServiceResponseV06ServiceResponsePaymentResponseRetailerPaymentResultImageCapturedSignature {\n");
    
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    imageData: ").append(toIndentedString(imageData)).append("\n");
    sb.append("    imageFormat: ").append(toIndentedString(imageFormat)).append("\n");
    sb.append("    imageReference: ").append(toIndentedString(imageReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
